{"version":3,"sources":["webpack:///0-9d7a8215c5da0d658d68.js","webpack:///./src/app/modules/shared/local-storage.provider.ts","webpack:///./node_modules/@angular/forms/esm5/forms.js","webpack:///./src/app/modules/shared/tv-maze.provider.ts","webpack:///./node_modules/angular-async-cache/async-cache.provider.js","webpack:///./node_modules/positioning/dist/positioning.js","webpack:///./node_modules/angular-async-cache/async-cache-options.provider.js","webpack:///./node_modules/angular-async-cache/drivers/memory-driver.provider.js","webpack:///./node_modules/angular-confirmation-popover/esm5/angular-confirmation-popover.js","webpack:///./node_modules/@angular/common/esm5/http.js","webpack:///./node_modules/angular-async-cache/drivers/local-storage-driver.provider.js","webpack:///./node_modules/angular-async-cache/cached-http.provider.js","webpack:///./src/app/modules/shared/order-by.pipe.ts","webpack:///./node_modules/angular-async-cache/async-cache.module.js","webpack:///./node_modules/angular-async-cache/async-cache.pipe.js","webpack:///./node_modules/angular-confirmation-popover/angular-confirmation-popover.ngfactory.js","webpack:///./src/app/modules/shared/index.ts","webpack:///./src/app/modules/shared/sortable-header.directive.ts","webpack:///./src/app/modules/shared/show-list.component.ts","webpack:///./node_modules/rxjs/operators/takeUntil.js","webpack:///./src/app/modules/shared/show-list.component.ngfactory.js","webpack:///./src/app/modules/shared/replace.pipe.ts","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./src/app/modules/shared/sortable-header.directive.ngfactory.js","webpack:///./node_modules/lodash.orderby/index.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/lodash.get/index.js","webpack:///./node_modules/rxjs/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/add/observable/merge.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/add/operator/mergeMap.js","webpack:///./node_modules/symbol-observable/index.js","webpack:///./node_modules/symbol-observable/lib/index.js","webpack:///./node_modules/symbol-observable/lib/ponyfill.js"],"names":["webpackJsonp","175","module","__webpack_exports__","__webpack_require__","d","LocalStorage","prototype","getItem","key","defaultValue","localStorage","JSON","parse","setItem","value","stringify","removeItem","176","isEmptyInputValue","length","isPresent","o","toObservable","r","obs","Object","__WEBPACK_IMPORTED_MODULE_1__angular_core__","__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__","Error","_executeValidators","control","validators","map","v","_executeAsyncValidators","_mergeErrors","arrayOfErrors","res","reduce","errors","__WEBPACK_IMPORTED_MODULE_0_tslib__","keys","_isAndroid","test","__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__","getUserAgent","toLowerCase","normalizeValidator","validator","validate","c","normalizeAsyncValidator","unimplemented","_buildValueString","id","slice","_extractId","valueString","split","_buildValueString$1","_extractId$1","controlPath","name","parent","concat","setUpControl","dir","_throwError","valueAccessor","Validators","compose","asyncValidator","composeAsync","writeValue","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","isDisabled","_rawValidators","forEach","registerOnValidatorChange","updateValueAndValidity","_rawAsyncValidators","cleanUpControl","registerOnChange","_noControlError","registerOnTouched","_clearChangeFns","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","_pendingTouched","markAsTouched","viewToModelUpdate","markAsDirty","setValue","emitModelToViewChange","emitModelEvent","setUpFormContainer","message","messageEnd","join","path","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","hasOwnProperty","change","isFirstChange","currentValue","isBuiltInAccessor","BUILTIN_ACCESSORS","some","a","constructor","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","undefined","builtinAccessor","customAccessor","DefaultValueAccessor","removeDir","list","el","index","indexOf","splice","_find","delimiter","Array","FormGroup","controls","FormArray","at","coerceToValidator","validatorOrOpts","isOptionsObj","isArray","coerceToAsyncValidator","origAsyncValidator","asyncValidators","_hasInvalidParent","FormGroupName","FormGroupDirective","FormArrayName","ControlContainer","NG_VALUE_ACCESSOR","COMPOSITION_BUFFER_MODE","NgControl","NgControlStatus","NgControlStatusGroup","FormControlDirective","FormControlName","FormBuilder","FormControl","ReactiveFormsModule","InternalFormsSharedModule","NgNoValidate","RadioControlRegistry","__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__","n","__WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__","AbstractControlDirective","defineProperty","get","this","enumerable","configurable","valid","invalid","pending","disabled","enabled","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","reset","hasError","errorCode","getError","_super","apply","arguments","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","min","parseFloat","isNaN","actual","max","required","requiredTrue","email","minLength","minlength","requiredLength","actualLength","maxLength","maxlength","pattern","nullValidator","regex","regexStr","charAt","RegExp","toString","requiredPattern","actualValue","presentValidators","filter","observables","call","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","CheckboxControlValueAccessor","multi","_renderer","_elementRef","onChange","_","onTouched","setProperty","nativeElement","fn","decorators","type","args","selector","host","(change)","(blur)","providers","ctorParameters","DEFAULT_VALUE_ACCESSOR","_compositionMode","_composing","normalizedValue","_handleInput","_compositionStart","_compositionEnd","(input)","(compositionstart)","(compositionend)","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","_this","_parent","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","_accessors","add","accessor","push","remove","i","select","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","ngOnInit","_checkName","ngOnDestroy","_state","_fn","formControlName","_throwNameError","propDecorators","RANGE_VALUE_ACCESSOR","RangeValueAccessor","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_optionMap","Map","_idCounter","_compareWith","set","_getOptionId","_getOptionValue","_registerOption","_i","_a","from","has","compareWith","NgSelectOption","_element","_select","_setElementValue","delete","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","optionSelectedStateSetter","ids_1","opt","_setSelected","selected","options","selectedOptions","item","val","_value","NgSelectMultipleOption","AbstractFormGroupDirective","_checkParentType","addFormGroup","formDirective","removeFormGroup","getFormGroup","_validators","_asyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","AbstractControl","_onCollectionChange","_onDisabledChange","_updateOn","setValidators","newValidator","setAsyncValidators","clearValidators","clearAsyncValidators","opts","onlySelf","markAsUntouched","_forEachChild","_updateTouched","markAsPristine","_updatePristine","markAsPending","disable","_updateValue","emitEvent","emit","_updateAncestors","changeFn","enable","setParent","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","_updateTreeValidity","ctrl","_allControlsDisabled","_asyncValidationSubscription","subscribe","setErrors","unsubscribe","_updateControlsErrors","x","_initObservables","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","_isBoxedValue","formState","_registerOnCollectionChange","_setUpdateStrategy","_onChange","_applyFormState","emitViewToModelChange","patchValue","condition","cb","_setUpControls","registerControl","addControl","removeControl","setControl","contains","controlName","_checkAllValuesPresent","_throwIfControlMissing","getRawValue","_reduceChildren","acc","subtreeUpdated","updated","child","k","_reduceValue","initValue","_registerControl","insert","removeAt","formDirectiveProvider","NgForm","resolvedPromise","Promise","resolve","submitted","_directives","ngSubmit","ngAfterViewInit","then","container","_findContainer","getControl","group","updateModel","onSubmit","$event","onReset","resetForm","pop","(submit)","(reset)","outputs","exportAs","FormErrorExamples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","TemplateDrivenErrors","modelParentException","formGroupNameException","missingNameException","modelGroupParentException","modelGroupProvider","NgModelGroup","formControlBinding","NgModel","resolvedPromise$1","_registered","update","ngOnChanges","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","standalone","disabledValue","ReactiveErrors","controlParentException","ngModelGroupException","missingFormException","groupParentException","arrayParentException","disabledAttrWarning","console","warn","formControlBinding$1","_isControlChanged","formDirectiveProvider$1","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","addFormArray","removeFormArray","getFormArray","newCtrl","_oldForm","sync","async","formGroupNameProvider","formArrayNameProvider","controlNameBinding","_added","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","_required","[attr.required]","EMAIL_VALIDATOR","EmailValidator","_enabled","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","_validator","parseInt","[attr.minlength]","MAX_LENGTH_VALIDATOR","MaxLengthValidator","[attr.maxlength]","PATTERN_VALIDATOR","PatternValidator","[attr.pattern]","controlsConfig","extra","_reduceControls","array","_createControl","controlConfig","novalidate","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","declarations","exports","FormsModule","177","TVMaze","__WEBPACK_IMPORTED_MODULE_0__angular_common_http__","__WEBPACK_IMPORTED_MODULE_1_rxjs_operators_map__","http","search","query","BASE_URL","params","pipe","shows","show","getEpisodes","178","AsyncCache","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_2_rxjs_add_observable_fromPromise__","__WEBPACK_IMPORTED_MODULE_3_rxjs_add_observable_of__","__WEBPACK_IMPORTED_MODULE_4_rxjs_add_observable_merge__","__WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_map__","__WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_mergeMap__","__WEBPACK_IMPORTED_MODULE_7_symbol_observable__","__WEBPACK_IMPORTED_MODULE_7_symbol_observable___default","__WEBPACK_IMPORTED_MODULE_8__async_cache_options_provider__","isPromise","catch","isObservable","anyToObservable","fromPromise","of","defaults","wrap","cacheKey","userOptions","getAsyncValue","assign","create","observer","promise","error","result","next","complete","err","driver","flatMap","existsInCache","cacheAndReturnAsyncValue","bypassCache","getCachedValue","fromCacheAndReplay","merge","179","Positioning","getAllStyles","element","window","getComputedStyle","getStyle","prop","isStaticPositioned","offsetParent","offsetParentEl","document","documentElement","position","round","elPosition","parentOffset","width","height","top","bottom","left","right","getBoundingClientRect","offset","clientTop","clientLeft","Math","elBcr","viewportOffset","pageYOffset","pageXOffset","elOffset","offsetHeight","offsetWidth","positionElements","hostElement","targetElement","placement","appendToBody","hostElPosition","targetElStyles","targetElBCR","placementPrimary","placementSecondary","targetElPosition","marginBottom","marginRight","180","AsyncCacheOptions","__WEBPACK_IMPORTED_MODULE_0__drivers_memory_driver_provider__","overrides","181","MemoryDriver","Symbol","clear","182","optionsFactory","ConfirmationPopoverOptions","ConfirmationPopoverModule","ConfirmationPopoverWindowOptions","ConfirmationPopoverWindowComponent","ConfirmationPopoverDirective","USER_OPTIONS","FocusDirective","__WEBPACK_IMPORTED_MODULE_2_positioning__","__WEBPACK_IMPORTED_MODULE_3__angular_common__","confirmText","cancelText","confirmButtonType","cancelButtonType","hideConfirmButton","hideCancelButton","popoverClass","reverseButtonOrder","onAfterViewInit","styles","template","viewContainerRef","elm","defaultOptions","cfr","renderer","isOpen","isOpenChange","confirm","cancel","eventListeners","showPopover","hidePopover","onConfirm","event","onCancel","togglePopover","popover","onDocumentClick","target","location","setTimeout","listen","positionPopover","options_1","popoverTitle","popoverMessage","param","componentFactory","resolveComponentFactory","childInjector","useValue","parentInjector","createComponent","body","appendChild","popoverElement","children","popoverPosition","setStyle","destroy","focusButton","customTemplate","mwlFocus","focus","forRoot","ngModule","useFactory","deps","imports","entryComponents","183","paramParser","rawParams","codec","map$$1","eqIdx","decodeKey","decodeValue","standardEncoding","encodeURIComponent","replace","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","addBody","headers","observe","reportProgress","responseType","withCredentials","getResponseUrl","xhr","responseURL","getAllResponseHeaders","getResponseHeader","jsonpCallbackContext","HttpBackend","HttpHandler","HttpClient","HTTP_INTERCEPTORS","HttpClientModule","HttpClientXsrfModule","HttpParams","HttpXhrBackend","XhrFactory","HttpXsrfTokenExtractor","HttpInterceptingHandler","BrowserXhr","HttpXsrfCookieExtractor","HttpXsrfInterceptor","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_of__","__WEBPACK_IMPORTED_MODULE_2_rxjs_operator_concatMap__","__WEBPACK_IMPORTED_MODULE_3_rxjs_operator_filter__","__WEBPACK_IMPORTED_MODULE_5_tslib__","__WEBPACK_IMPORTED_MODULE_6__angular_common__","__WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__","HttpHeaders","normalizedNames","lazyUpdate","lazyInit","line","name_1","trim","maybeSetNormalizedName","values","init","getAll","append","clone","op","lcName","copyFrom","applyUpdate","other","base","toDelete_1","existing","HttpUrlEncodingCodec","encodeKey","encodeValue","decodeURIComponent","updates","cloneFrom","encoder","fromString","fromObject","eKey","base_1","idx","HttpRequest","url","third","fourth","toUpperCase","urlWithParams","qIdx","sep","serializeBody","detectContentTypeHeader","setHeaders","setParams","HttpEventType","Sent","UploadProgress","ResponseHeader","DownloadProgress","Response","User","HttpResponseBase","defaultStatus","defaultStatusText","statusText","ok","HttpHeaderResponse","HttpResponse","HttpErrorResponse","handler","request","first","req","events$","handle","res$","head","jsonp","callbackParam","patch","post","put","HttpInterceptorHandler","interceptor","intercept","NoopInterceptor","nextRequestId","JsonpCallbackContext","JsonpClientBackend","callbackMap","nextCallback","callback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","onError","addEventListener","removeEventListener","JsonpInterceptor","XSSI_PREFIX","build","XMLHttpRequest","xhrFactory","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","text","sentHeaders","onDownProgress","progressEvent","loaded","lengthComputable","total","partialText","onUpProgress","progress","upload","send","abort","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","tokenService","headerName","lcUrl","startsWith","token","backend","injector","chain","interceptors","reduceRight","useClass","withOptions","HttpClientJsonpModule","184","LocalStorageDriver","DEFAULT_KEY_PREFIX","keyPrefix","getInternalKey","getExternalKey","suffix","185","CachedHttp","__WEBPACK_IMPORTED_MODULE_1__angular_common_http__","__WEBPACK_IMPORTED_MODULE_2__async_cache_provider__","asyncCache","asyncCacheOptions","result$","186","OrderByDirection","OrderBy","__WEBPACK_IMPORTED_MODULE_1_lodash_orderby__","__WEBPACK_IMPORTED_MODULE_1_lodash_orderby___default","transform","input","field","direction","Asc","187","memoryDriverFactory","memory_driver_provider","localStorageDriverFactory","local_storage_driver_provider","cacheOptionFactory","async_cache_options_provider","core","async_cache_provider","async_cache_pipe_AsyncCachePipe","AsyncCachePipe","cached_http_provider","async_cache_module_AsyncCacheModule","AsyncCacheModule","cacheOptions","188","View_ɵe_2","_l","_v","en","ad","context","clickEvent","__WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__","_ck","View_ɵe_3","View_ɵe_1","__WEBPACK_IMPORTED_MODULE_2__angular_common__","ngClass","ngIf","View_ɵe_4","View_ɵe_0","ngTemplateOutletContext","ngTemplateOutlet","_co","component","View_ɵe_Host_0","RenderType_ɵe","ɵeNgFactory","styles_ɵe","encapsulation","189","asyncCacheOptionsFactory","__WEBPACK_IMPORTED_MODULE_0_angular_async_cache__","SharedModule","192","SortableHeaderComponent","__WEBPACK_IMPORTED_MODULE_1__order_by_pipe__","headerClicked","sort","fieldName","Desc","193","ShowListComponent","__WEBPACK_IMPORTED_MODULE_3__order_by_pipe__","__WEBPACK_IMPORTED_MODULE_4__angular_forms__","__WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__","__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_takeUntil__","__WEBPACK_IMPORTED_MODULE_7_lodash_get__","__WEBPACK_IMPORTED_MODULE_7_lodash_get___default","filteredShowsList","searchTextControl","destroy$","updateFilteredShowsList","changeRecord","subscribeToShow","setSubscribedShows","getSubscribedShows","unsubscribeFromShow","iShow","subscribedShows","filterByFields","isSubscribed","fieldValue","includes","194","takeUntil","notifier","source","lift","TakeUntilOperator","__extends","b","__","p","OuterSubscriber_1","subscribeToResult_1","subscriber","TakeUntilSubscriber","destination","subscribeToResult","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","OuterSubscriber","199","View_ShowListComponent_1","$implicit","angular_confirmation_popover","positioning","onClick","router","routerLink","image","medium","network","summary","View_ShowListComponent_2","View_ShowListComponent_0","order_by_pipe","Replace","esm5_forms","p0_0","sortable_header_directive_ngfactory","sortable_header_directive","common","ngForOf","ngClassUntouched","ngClassTouched","ngClassPristine","ngClassDirty","ngClassValid","ngClassInvalid","ngClassPending","View_ShowListComponent_Host_0","RenderType_ShowListComponent","show_list_component","local_storage_provider","find","replaceWith","styles_ShowListComponent","200","webpackPolyfill","deprecate","paths","l","201","ForkJoinObservable_1","forkJoin","ForkJoinObservable","202","View_SortableHeaderComponent_0","View_SortableHeaderComponent_Host_0","RenderType_SortableHeaderComponent","__WEBPACK_IMPORTED_MODULE_1__sortable_header_directive__","styles_SortableHeaderComponent","203","__WEBPACK_IMPORTED_MODULE_1__drivers_local_storage_driver_provider__","__WEBPACK_IMPORTED_MODULE_3__async_cache_options_provider__","218","global","arrayMap","iteratee","arraySome","predicate","baseProperty","object","baseSortBy","comparer","baseTimes","baseUnary","func","getValue","isHostObject","e","mapToArray","size","setToArray","Hash","entries","entry","hashClear","__data__","nativeCreate","hashDelete","hashGet","HASH_UNDEFINED","hashHas","hashSet","ListCache","listCacheClear","listCacheDelete","assocIndexOf","listCacheGet","listCacheHas","listCacheSet","MapCache","mapCacheClear","hash","string","mapCacheDelete","getMapData","mapCacheGet","mapCacheHas","mapCacheSet","SetCache","setCacheAdd","setCacheHas","Stack","stackClear","stackDelete","stackGet","stackHas","stackSet","cache","pairs","LARGE_ARRAY_SIZE","arrayLikeKeys","inherited","isArguments","String","skipIndexes","isIndex","eq","baseForOwn","baseFor","baseGet","isKey","castPath","toKey","baseGetTag","objectToString","baseHasIn","baseIsEqual","customizer","bitmask","stack","isObject","isObjectLike","baseIsEqualDeep","equalFunc","objIsArr","othIsArr","objTag","arrayTag","othTag","getTag","argsTag","objectTag","objIsObj","othIsObj","isSameTag","isTypedArray","equalArrays","equalByTag","PARTIAL_COMPARE_FLAG","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","equalObjects","baseIsMatch","matchData","noCustomizer","objValue","srcValue","UNORDERED_COMPARE_FLAG","baseIsNative","isMasked","isFunction","reIsNative","reIsHostCtor","toSource","baseIsTypedArray","isLength","typedArrayTags","baseIteratee","identity","baseMatchesProperty","baseMatches","property","baseKeys","isPrototype","nativeKeys","baseMap","collection","isArrayLike","baseEach","getMatchData","matchesStrictComparable","isStrictComparable","hasIn","baseOrderBy","iteratees","orders","criteria","compareMultiple","basePropertyDeep","baseToString","isSymbol","symbolToString","INFINITY","stringToPath","compareAscending","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","objCriteria","othCriteria","ordersLength","isPartial","arrLength","othLength","stacked","seen","arrValue","othValue","compared","othIndex","tag","dataViewTag","byteLength","byteOffset","buffer","arrayBufferTag","Uint8Array","boolTag","dateTag","numberTag","errorTag","regexpTag","stringTag","mapTag","convert","setTag","symbolTag","symbolValueOf","objProps","objLength","skipCtor","objCtor","othCtor","isKeyable","getNative","hasPath","hasFunc","MAX_SAFE_INTEGER","reIsUint","reIsPlainProp","reIsDeepProp","maskSrcKey","Ctor","objectProto","funcToString","orderBy","guard","memoize","resolver","TypeError","FUNC_ERROR_TEXT","memoized","Cache","isArrayLikeObject","propertyIsEnumerable","funcTag","genTag","reLeadingDot","rePropName","reRegExpChar","reEscapeChar","freeGlobal","freeSelf","self","root","Function","freeExports","nodeType","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","arrayProto","funcProto","coreJsData","uid","exec","IE_PROTO","arg","DataView","Set","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","valueOf","eachFunc","fromRight","iterable","keysFunc","props","ctorString","match","number","quote","219","Observable_1","EmptyObservable_1","isArray_1","sources","resultSelector","EmptyObservable","_subscribe","ForkJoinSubscriber","Observable","completed","haveValues","len","innerSubscription","_hasValue","220","221","fromPromise_1","222","of_1","223","merge_1","224","map_1","225","mergeMap_1","mergeMap","226","227","_ponyfill","_ponyfill2","obj","__esModule","default","228","symbolObservablePonyfill","_Symbol","observable"],"mappings":"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","file":"0-9d7a8215c5da0d658d68.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 175:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalStorage; });\nvar LocalStorage = /** @class */ (function () {\n    function LocalStorage() {\n    }\n    LocalStorage.prototype.getItem = function (key, defaultValue) {\n        if (localStorage.getItem(key)) {\n            return JSON.parse(localStorage.getItem(key));\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    LocalStorage.prototype.setItem = function (key, value) {\n        localStorage.setItem(key, JSON.stringify(value));\n    };\n    LocalStorage.prototype.removeItem = function (key) {\n        localStorage.removeItem(key);\n    };\n    return LocalStorage;\n}());\n\n\n\n/***/ }),\n\n/***/ 176:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export AbstractControlDirective */\n/* unused harmony export AbstractFormGroupDirective */\n/* unused harmony export CheckboxControlValueAccessor */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return ControlContainer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return NG_VALUE_ACCESSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return COMPOSITION_BUFFER_MODE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return DefaultValueAccessor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return NgControl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return NgControlStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return NgControlStatusGroup; });\n/* unused harmony export NgForm */\n/* unused harmony export NgModel */\n/* unused harmony export NgModelGroup */\n/* unused harmony export RadioControlValueAccessor */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return FormControlDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return FormControlName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return FormGroupDirective; });\n/* unused harmony export FormArrayName */\n/* unused harmony export FormGroupName */\n/* unused harmony export NgSelectOption */\n/* unused harmony export SelectControlValueAccessor */\n/* unused harmony export SelectMultipleControlValueAccessor */\n/* unused harmony export CheckboxRequiredValidator */\n/* unused harmony export EmailValidator */\n/* unused harmony export MaxLengthValidator */\n/* unused harmony export MinLengthValidator */\n/* unused harmony export PatternValidator */\n/* unused harmony export RequiredValidator */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return FormBuilder; });\n/* unused harmony export AbstractControl */\n/* unused harmony export FormArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return FormControl; });\n/* unused harmony export FormGroup */\n/* unused harmony export NG_ASYNC_VALIDATORS */\n/* unused harmony export NG_VALIDATORS */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return Validators; });\n/* unused harmony export VERSION */\n/* unused harmony export FormsModule */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return ReactiveFormsModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return InternalFormsSharedModule; });\n/* unused harmony export ɵz */\n/* unused harmony export ɵx */\n/* unused harmony export ɵy */\n/* unused harmony export ɵa */\n/* unused harmony export ɵb */\n/* unused harmony export ɵc */\n/* unused harmony export ɵd */\n/* unused harmony export ɵe */\n/* unused harmony export ɵf */\n/* unused harmony export ɵg */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return NgNoValidate; });\n/* unused harmony export ɵbb */\n/* unused harmony export ɵbc */\n/* unused harmony export ɵh */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return RadioControlRegistry; });\n/* unused harmony export ɵbd */\n/* unused harmony export ɵbe */\n/* unused harmony export ɵj */\n/* unused harmony export ɵk */\n/* unused harmony export ɵl */\n/* unused harmony export ɵn */\n/* unused harmony export ɵm */\n/* unused harmony export ɵo */\n/* unused harmony export ɵq */\n/* unused harmony export ɵp */\n/* unused harmony export ɵs */\n/* unused harmony export ɵt */\n/* unused harmony export ɵv */\n/* unused harmony export ɵu */\n/* unused harmony export ɵw */\n/* unused harmony export ɵr */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__ = __webpack_require__(201);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__ = __webpack_require__(20);\n/**\n * @license Angular v5.2.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = /** @class */ (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /** The value of the control. */\n        get: /**\n         * The value of the control.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         */\n        get: /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"status\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.control ? this.control.status : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         */\n        get: /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.statusChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         */\n        get: /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.valueChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         */\n        get: /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {@link AbstractControl}.\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar ControlContainer = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         */\n        get: /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         */\n        get: /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar NG_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"InjectionToken\"]('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"InjectionToken\"]('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = /** @class */ (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     *`min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     */\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    Validators.min = /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    function (min) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     */\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    Validators.max = /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    function (max) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     */\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     */\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     */\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return null; };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(Object(__WEBPACK_IMPORTED_MODULE_2_rxjs_observable_forkJoin__[\"forkJoin\"])(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ɵisPromise\"])(r) ? Object(__WEBPACK_IMPORTED_MODULE_3_rxjs_observable_fromPromise__[\"fromPromise\"])(r) : r;\n    if (!(Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ɵisObservable\"])(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __assign */])({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface if you want to create a custom form control directive\n * that integrates with Angular forms.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"InjectionToken\"]('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = /** @class */ (function () {\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    CheckboxControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    ]; };\n    return CheckboxControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = Object(__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__[\"s\" /* ɵgetDOM */])() ? Object(__WEBPACK_IMPORTED_MODULE_5__angular_platform_browser__[\"s\" /* ɵgetDOM */])().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"InjectionToken\"]('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = /** @class */ (function () {\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { this._composing = true; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    DefaultValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    DefaultValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    return DefaultValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = /** @class */ (function () {\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    NumberValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    NumberValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    ]; };\n    return NumberValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControl, _super);\n    function NgControl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    return NgControl;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = /** @class */ (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    RadioControlRegistry.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    RadioControlRegistry.ctorParameters = function () { return []; };\n    return RadioControlRegistry;\n}());\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = /** @class */ (function () {\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    RadioControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n        { type: RadioControlRegistry, },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injector\"], },\n    ]; };\n    RadioControlValueAccessor.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n        \"formControlName\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return RadioControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = /** @class */ (function () {\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    RangeValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RangeValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    ]; };\n    return RangeValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = /** @class */ (function () {\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ɵlooseIdentical\"];\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = _this._getOptionValue(valueString);\n            fn(_this.value);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return (this._idCounter++).toString(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    SelectControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    ]; };\n    SelectControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return SelectControlValueAccessor;\n}());\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = /** @class */ (function () {\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectOption.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectOption.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: SelectControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] },] },\n    ]; };\n    NgSelectOption.propDecorators = {\n        \"ngValue\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngValue',] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['value',] },],\n    };\n    return NgSelectOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = /** @class */ (function () {\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ɵlooseIdentical\"];\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = /** @type {?} */ (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\n    };\n    SelectMultipleControlValueAccessor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    ]; };\n    SelectMultipleControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return SelectMultipleControlValueAccessor;\n}());\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = /** @class */ (function () {\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    function (selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectMultipleOption.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectMultipleOption.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n        { type: SelectMultipleControlValueAccessor, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] },] },\n    ]; };\n    NgSelectMultipleOption.propDecorators = {\n        \"ngValue\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngValue',] },],\n        \"value\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['value',] },],\n    };\n    return NgSelectMultipleOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return /** @type {?} */ ((parent.path)).concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\n    ((dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */\n    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function (newValue) {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(function () {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    dir.viewToModelUpdate(control._pendingValue);\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        /** @type {?} */ ((\n        // control -> view\n        dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (/** @type {?} */ ((dir.path)).length > 1) {\n        messageEnd = \"path: '\" + (/** @type {?} */ ((dir.path))).join(' -> ') + \"'\";\n    }\n    else if (/** @type {?} */ ((dir.path))[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ɵlooseIdentical\"])(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(function (dir) {\n        var /** @type {?} */ control = /** @type {?} */ (dir.control);\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor = undefined;\n    var /** @type {?} */ builtinAccessor = undefined;\n    var /** @type {?} */ customAccessor = undefined;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {@link FormGroup} backing this binding.\n         */\n        get: /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         */\n        get: /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {@link Form} to which this group belongs.\n         */\n        get: /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = /** @class */ (function () {\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@stable\n */\nvar NgControlStatus = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControlStatus, _super);\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatus.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n    ];\n    /** @nocollapse */\n    NgControlStatus.ctorParameters = function () { return [\n        { type: NgControl, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] },] },\n    ]; };\n    return NgControlStatus;\n}(AbstractControlStatus));\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgControlStatusGroup, _super);\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatusGroup.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngControlStatusHost\n                },] },\n    ];\n    /** @nocollapse */\n    NgControlStatusGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] },] },\n    ]; };\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = (/** @type {?} */ (path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return (/** @type {?} */ (path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    var /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\n        validatorOrOpts));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    var /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\n        asyncValidator));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @record\n */\n\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = /** @class */ (function () {\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         */\n        get: /**\n         * The parent control.\n         * @return {?}\n         */\n        function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return !this.touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"updateOn\", {\n        /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         */\n        get: /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         * @return {?}\n         */\n        function () {\n            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     */\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     */\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     */\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     */\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = PENDING;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     */\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = DISABLED;\n        (/** @type {?} */ (this)).errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     */\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function (parent) { this._parent = parent; };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     */\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            (/** @type {?} */ (this)).errors = this._runValidator();\n            (/** @type {?} */ (this)).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = { emitEvent: true }; }\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = /**\n     * @return {?}\n     */\n    function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            (/** @type {?} */ (this)).status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = /**\n     * @return {?}\n     */\n    function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (errors, opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) { return !!this.getError(errorCode, path); };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         */\n        get: /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        (/** @type {?} */ (this)).status = this._calculateStatus();\n        if (emitEvent) {\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).valueChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        (/** @type {?} */ (this)).statusChanges = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = /**\n     * @return {?}\n     */\n    function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onCollectionChange = fn; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._setUpdateStrategy = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\n        }\n    };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * The second {\\@link FormControl} argument can accept one of three things:\n * * a sync validator function\n * * an array of sync validator functions\n * * an options object containing validator and/or async validator functions\n *\n * Example of a single sync validator function:\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * Example using options object:\n *\n * ```ts\n * const ctrl = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * The options object can also be used to define when the control should update.\n * By default, the value and validity of a control updates whenever the value\n * changes. You can configure it to update on the blur event instead by setting\n * the `updateOn` option to `'blur'`.\n *\n * ```ts\n * const c = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * You can also set `updateOn` to `'submit'`, which will delay value and validity\n * updates until the parent form of the control fires a submit event.\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControl, _super);\n    function FormControl(formState, validatorOrOpts, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     */\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.setValue = /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     */\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    function (formState, options) {\n        if (formState === void 0) { formState = null; }\n        if (options === void 0) { options = {}; }\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) { return false; };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     */\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange.push(fn); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     */\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) { };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = /**\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        if (this._isBoxedValue(formState)) {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *    one: new FormControl()\n * }, {updateOn: 'blur'});\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroup, _super);\n    function FormGroup(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {@link FormGroup#addControl addControl} instead.\n     */\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     */\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     */\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     */\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.reset = /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = {}; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the {@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).value = this._reduceValue(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators can be passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormArray, _super);\n    function FormArray(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {@link AbstractControl} at the end of the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /** Insert a new {@link AbstractControl} at the given `index` in the array. */\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    };\n    /** Remove the control at the given `index` in the array. */\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         */\n        get: /**\n         * Length of the control array.\n         * @return {?}\n         */\n        function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.reset = /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = []; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     */\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this.controls.reduce(function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        (/** @type {?} */ (this)).value =\n            this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = /**\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgForm, _super);\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this.submitted = false;\n        _this._directives = [];\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { this._setUpdateStrategy(); };\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            _this._directives.push(dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(_this._directives, dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = /** @type {?} */ (_this.form.get(/** @type {?} */ ((dir.path))));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        path.pop();\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\n    };\n    NgForm.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    NgForm.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgForm.propDecorators = {\n        \"options\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngFormOptions',] },],\n    };\n    return NgForm;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = /** @class */ (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgModelGroup, _super);\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    NgModelGroup.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n    ];\n    /** @nocollapse */\n    NgModelGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgModelGroup.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelGroup',] },],\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(NgModel, _super);\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = /**\n     * @return {?}\n     */\n    function () {\n        return !this._parent || !!(this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = /**\n     * @return {?}\n     */\n    function () {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    NgModel.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding],\n                    exportAs: 'ngModel'\n                },] },\n    ];\n    /** @nocollapse */\n    NgModel.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    NgModel.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n        \"options\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModelOptions',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n    };\n    return NgModel;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = /** @class */ (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = /**\n     * @return {?}\n     */\n    function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControlDirective, _super);\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    FormControlDirective.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n    ];\n    /** @nocollapse */\n    FormControlDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlDirective.propDecorators = {\n        \"form\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControl',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n    };\n    return FormControlDirective;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroupDirective, _super);\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this.submitted = false;\n        _this.directives = [];\n        _this.form = /** @type {?} */ ((null));\n        _this.ngSubmit = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { removeDir(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                (/** @type {?} */ (dir)).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    FormGroupDirective.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    FormGroupDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupDirective.propDecorators = {\n        \"form\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroup',] },],\n        \"ngSubmit\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],\n    };\n    return FormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormGroupName, _super);\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    FormGroupName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormGroupName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formGroupName',] },],\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by calling\n * its {\\@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormArrayName, _super);\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    FormArrayName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormArrayName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormArrayName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formArrayName',] },],\n    };\n    return FormArrayName;\n}(ControlContainer));\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(FormControlName, _super);\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType();\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    };\n    FormControlName.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n    ];\n    /** @nocollapse */\n    FormControlName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Host\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"SkipSelf\"] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Optional\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Self\"] }, { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Inject\"], args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlName.propDecorators = {\n        \"name\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['formControlName',] },],\n        \"model\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['ngModel',] },],\n        \"update\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"], args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"], args: ['disabled',] },],\n    };\n    return FormControlName;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = /** @class */ (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    RequiredValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    RequiredValidator.ctorParameters = function () { return []; };\n    RequiredValidator.propDecorators = {\n        \"required\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return RequiredValidator;\n}());\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */])(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    CheckboxRequiredValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxRequiredValidator.ctorParameters = function () { return []; };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = /** @class */ (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    EmailValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                },] },\n    ];\n    /** @nocollapse */\n    EmailValidator.ctorParameters = function () { return []; };\n    EmailValidator.propDecorators = {\n        \"email\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return EmailValidator;\n}());\n/**\n * \\@stable\n * @record\n */\n\n/**\n * \\@stable\n * @record\n */\n\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = /** @class */ (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    MinLengthValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MinLengthValidator.ctorParameters = function () { return []; };\n    MinLengthValidator.propDecorators = {\n        \"minlength\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return MinLengthValidator;\n}());\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = /** @class */ (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    MaxLengthValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MaxLengthValidator.ctorParameters = function () { return []; };\n    MaxLengthValidator.propDecorators = {\n        \"maxlength\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return MaxLengthValidator;\n}());\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: Object(__WEBPACK_IMPORTED_MODULE_1__angular_core__[\"forwardRef\"])(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = /** @class */ (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () { this._validator = Validators.pattern(this.pattern); };\n    PatternValidator.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    PatternValidator.ctorParameters = function () { return []; };\n    PatternValidator.propDecorators = {\n        \"pattern\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    };\n    return PatternValidator;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = /** @class */ (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {@link FormGroup} constructor for more details.\n     */\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     */\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     */\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    FormBuilder.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    FormBuilder.ctorParameters = function () { return []; };\n    return FormBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Version\"]('5.2.4');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = /** @class */ (function () {\n    function NgNoValidate() {\n    }\n    NgNoValidate.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                },] },\n    ];\n    /** @nocollapse */\n    NgNoValidate.ctorParameters = function () { return []; };\n    return NgNoValidate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = /** @class */ (function () {\n    function InternalFormsSharedModule() {\n    }\n    InternalFormsSharedModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    exports: SHARED_FORM_DIRECTIVES,\n                },] },\n    ];\n    /** @nocollapse */\n    InternalFormsSharedModule.ctorParameters = function () { return []; };\n    return InternalFormsSharedModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = /** @class */ (function () {\n    function FormsModule() {\n    }\n    FormsModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    providers: [RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    FormsModule.ctorParameters = function () { return []; };\n    return FormsModule;\n}());\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = /** @class */ (function () {\n    function ReactiveFormsModule() {\n    }\n    ReactiveFormsModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    providers: [FormBuilder, RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    ReactiveFormsModule.ctorParameters = function () { return []; };\n    return ReactiveFormsModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=forms.js.map\n\n\n/***/ }),\n\n/***/ 177:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return TVMaze; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_common_http__ = __webpack_require__(183);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operators_map__ = __webpack_require__(52);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operators_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_operators_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular_async_cache__ = __webpack_require__(203);\n\n\n\nvar TVMaze = /** @class */ (function () {\n    function TVMaze(http) {\n        this.http = http;\n    }\n    TVMaze.prototype.search = function (query) {\n        return this.http\n            .get(TVMaze.BASE_URL + \"search/shows\", {\n            params: new __WEBPACK_IMPORTED_MODULE_0__angular_common_http__[\"g\" /* HttpParams */]().set('q', query)\n        })\n            .pipe(Object(__WEBPACK_IMPORTED_MODULE_1_rxjs_operators_map__[\"map\"])(function (shows) {\n            return shows.map(function (show) { return show.show; });\n        }));\n    };\n    TVMaze.prototype.getEpisodes = function (id) {\n        return this.http.get(TVMaze.BASE_URL + \"shows/\" + id + \"/episodes\");\n    };\n    TVMaze.BASE_URL = 'https://api.tvmaze.com/';\n    return TVMaze;\n}());\n\n\n\n/***/ }),\n\n/***/ 178:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AsyncCache; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_observable_fromPromise__ = __webpack_require__(221);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_observable_fromPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_add_observable_fromPromise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_observable_of__ = __webpack_require__(222);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_observable_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_observable_merge__ = __webpack_require__(223);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_observable_merge___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_add_observable_merge__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_map__ = __webpack_require__(224);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_mergeMap__ = __webpack_require__(225);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_mergeMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_mergeMap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_symbol_observable__ = __webpack_require__(226);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_symbol_observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_symbol_observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__async_cache_options_provider__ = __webpack_require__(180);\n\n\n\n\n\n\n\n\n\nvar isPromise = function (fn) { return fn && typeof fn.then === 'function' && typeof fn.catch === 'function'; };\nvar isObservable = function (fn) { return fn && fn[__WEBPACK_IMPORTED_MODULE_7_symbol_observable___default.a]; };\nvar anyToObservable = function (fn) {\n    if (isObservable(fn)) {\n        return fn;\n    }\n    else if (isPromise(fn)) {\n        return __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"].fromPromise(fn);\n    }\n    else {\n        return __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"].of(fn);\n    }\n};\nvar AsyncCache = (function () {\n    function AsyncCache(defaults) {\n        this.defaults = defaults;\n    }\n    AsyncCache.prototype.wrap = function (value, cacheKey, userOptions) {\n        if (userOptions === void 0) { userOptions = {}; }\n        var getAsyncValue;\n        var options = Object.assign({}, this.defaults, userOptions);\n        if (isObservable(value)) {\n            getAsyncValue = value;\n        }\n        else if (typeof value === 'function') {\n            getAsyncValue = __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"].create(function (observer) {\n                var promise = value();\n                if (!isPromise(promise)) {\n                    return observer.error('The function you passed to the async cache didn\\'t return a promise');\n                }\n                promise.then(function (result) {\n                    observer.next(result);\n                    observer.complete();\n                }).catch(function (err) {\n                    observer.error(err);\n                });\n            });\n        }\n        else {\n            throw new Error('Value can only be an observable or a function that returns a promise');\n        }\n        return anyToObservable(options.driver.has(cacheKey)).flatMap(function (existsInCache) {\n            var cacheAndReturnAsyncValue = function () { return getAsyncValue.flatMap(function (value) {\n                return anyToObservable(options.driver.set(cacheKey, value)).map(function () { return value; });\n            }); };\n            if (existsInCache && !options.bypassCache) {\n                var getCachedValue = anyToObservable(options.driver.get(cacheKey));\n                if (options.fromCacheAndReplay) {\n                    return __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"].merge(getCachedValue, cacheAndReturnAsyncValue());\n                }\n                else {\n                    return getCachedValue;\n                }\n            }\n            else {\n                return cacheAndReturnAsyncValue();\n            }\n        });\n    };\n    AsyncCache.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    AsyncCache.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_8__async_cache_options_provider__[\"a\" /* AsyncCacheOptions */], },\n    ]; };\n    return AsyncCache;\n}());\n\n//# sourceMappingURL=async-cache.provider.js.map\n\n/***/ }),\n\n/***/ 179:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Positioning; });\n/* unused harmony export positionElements */\n// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nvar Positioning = (function () {\n    function Positioning() {\n    }\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\n    Positioning.prototype.isStaticPositioned = function (element) {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    };\n    Positioning.prototype.offsetParent = function (element) {\n        var offsetParentEl = element.offsetParent || document.documentElement;\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = offsetParentEl.offsetParent;\n        }\n        return offsetParentEl || document.documentElement;\n    };\n    Positioning.prototype.position = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elPosition;\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n        }\n        else {\n            var offsetParentEl = this.offsetParent(element);\n            elPosition = this.offset(element, false);\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n        return elPosition;\n    };\n    Positioning.prototype.offset = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elBcr = element.getBoundingClientRect();\n        var viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n        var elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n        return elOffset;\n    };\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        var targetElStyles = this.getAllStyles(targetElement);\n        var targetElBCR = targetElement.getBoundingClientRect();\n        var placementPrimary = placement.split('-')[0] || 'top';\n        var placementSecondary = placement.split('-')[1] || 'center';\n        var targetElPosition = {\n            'height': targetElBCR.height || targetElement.offsetHeight,\n            'width': targetElBCR.width || targetElement.offsetWidth,\n            'top': 0,\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\n            'left': 0,\n            'right': targetElBCR.width || targetElement.offsetWidth\n        };\n        switch (placementPrimary) {\n            case 'top':\n                targetElPosition.top =\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\n                break;\n            case 'left':\n                targetElPosition.left =\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\n                break;\n        }\n        switch (placementSecondary) {\n            case 'top':\n                targetElPosition.top = hostElPosition.top;\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                targetElPosition.left = hostElPosition.left;\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\n                }\n                else {\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\n                }\n                break;\n        }\n        targetElPosition.top = Math.round(targetElPosition.top);\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\n        targetElPosition.left = Math.round(targetElPosition.left);\n        targetElPosition.right = Math.round(targetElPosition.right);\n        return targetElPosition;\n    };\n    return Positioning;\n}());\n\nvar positionService = new Positioning();\nfunction positionElements(hostElement, targetElement, placement, appendToBody) {\n    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n    targetElement.style.top = pos.top + \"px\";\n    targetElement.style.left = pos.left + \"px\";\n}\n//# sourceMappingURL=positioning.js.map\n\n/***/ }),\n\n/***/ 180:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return AsyncCacheOptions; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__drivers_memory_driver_provider__ = __webpack_require__(181);\n\nvar AsyncCacheOptions = (function () {\n    function AsyncCacheOptions(overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        this.driver = new __WEBPACK_IMPORTED_MODULE_0__drivers_memory_driver_provider__[\"a\" /* MemoryDriver */]();\n        this.fromCacheAndReplay = false;\n        Object.assign(this, overrides);\n    }\n    return AsyncCacheOptions;\n}());\n\n//# sourceMappingURL=async-cache-options.provider.js.map\n\n/***/ }),\n\n/***/ 181:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MemoryDriver; });\nvar cacheKey = Symbol('cache key');\nvar MemoryDriver = (function () {\n    function MemoryDriver() {\n        this[cacheKey] = new Map();\n    }\n    MemoryDriver.prototype.has = function (key) {\n        return this[cacheKey].has(key);\n    };\n    MemoryDriver.prototype.get = function (key) {\n        return this[cacheKey].get(key);\n    };\n    MemoryDriver.prototype.set = function (key, value) {\n        return this[cacheKey].set(key, value);\n    };\n    MemoryDriver.prototype.delete = function (key) {\n        return this[cacheKey].delete(key);\n    };\n    MemoryDriver.prototype.clear = function () {\n        return this[cacheKey].clear();\n    };\n    MemoryDriver.prototype.keys = function () {\n        return Array.from(this[cacheKey].keys());\n    };\n    return MemoryDriver;\n}());\n\n//# sourceMappingURL=memory-driver.provider.js.map\n\n/***/ }),\n\n/***/ 182:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ConfirmationPopoverModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return ConfirmationPopoverOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return ConfirmationPopoverWindowOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return ConfirmationPopoverWindowComponent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return ConfirmationPopoverDirective; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return USER_OPTIONS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return optionsFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return FocusDirective; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_positioning__ = __webpack_require__(179);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common__ = __webpack_require__(19);\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar ConfirmationPopoverOptions = /** @class */ (function () {\n    function ConfirmationPopoverOptions() {\n        this.confirmText = 'Confirm';\n        this.cancelText = 'Cancel';\n        this.confirmButtonType = 'success';\n        this.cancelButtonType = 'default';\n        this.placement = 'top';\n        this.hideConfirmButton = false;\n        this.hideCancelButton = false;\n        this.popoverClass = '';\n        this.appendToBody = false;\n        this.reverseButtonOrder = false;\n    }\n    return ConfirmationPopoverOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowOptions = /** @class */ (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"b\" /* __extends */](ConfirmationPopoverWindowOptions, _super);\n    function ConfirmationPopoverWindowOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ConfirmationPopoverWindowOptions;\n}(ConfirmationPopoverOptions));\nConfirmationPopoverWindowOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injectable\"] },\n];\n/** @nocollapse */\nConfirmationPopoverWindowOptions.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowComponent = /** @class */ (function () {\n    /**\n     * @param {?} options\n     */\n    function ConfirmationPopoverWindowComponent(options) {\n        this.options = options;\n    }\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {\n        this.options.onAfterViewInit();\n    };\n    return ConfirmationPopoverWindowComponent;\n}());\nConfirmationPopoverWindowComponent.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Component\"], args: [{\n                selector: 'mwl-confirmation-popover-window',\n                styles: [\n                    \"\\n    .popover {\\n      display: block;\\n    }\\n    .bs-popover-top .arrow, .bs-popover-bottom .arrow {\\n      left: 50%;\\n    }\\n    .bs-popover-left .arrow, .bs-popover-right .arrow {\\n      top: 50%;\\n    }\\n    .btn {\\n      transition: none;\\n    }\\n    .confirm-btns {\\n      display: flex;\\n      justify-content: space-around;\\n    }\\n    .confirm-btn-container {\\n      flex-basis: 50%;\\n    }\\n    .confirm-btn-container:not(:first-child) {\\n      margin-left: 4px;\\n    }\\n    .confirm-btn-container:not(:last-child) {\\n      margin-right: 4px;\\n    }\\n    .confirm-btns-reversed {\\n      flex-direction: row-reverse;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:first-child) {\\n      margin-right: 4px;\\n      margin-left: 0;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:last-child) {\\n      margin-right: 0;\\n      margin-left: 4px;\\n    }\\n  \"\n                ],\n                template: \"\\n    <ng-template #defaultTemplate let-options=\\\"options\\\">\\n      <div [ngClass]=\\\"[\\n        'popover',\\n        options.placement,\\n        'popover-' + options.placement,\\n        'bs-popover-' + options.placement,\\n        options.popoverClass\\n      ]\\\">\\n        <div class=\\\"popover-arrow arrow\\\"></div>\\n        <h3 class=\\\"popover-title popover-header\\\" [innerHTML]=\\\"options.popoverTitle\\\"></h3>\\n        <div class=\\\"popover-content popover-body\\\">\\n          <p [innerHTML]=\\\"options.popoverMessage\\\"></p>\\n          <div class=\\\"confirm-btns\\\" [class.confirm-btns-reversed]=\\\"options.reverseButtonOrder\\\">\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideCancelButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'cancel'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.cancelButtonType\\\"\\n                (click)=\\\"options.onCancel({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.cancelText\\\">\\n              </button>\\n            </div>\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideConfirmButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'confirm'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.confirmButtonType\\\"\\n                (click)=\\\"options.onConfirm({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.confirmText\\\">\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"options.customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{options: options}\\\">\\n    </ng-template>\\n  \"\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverWindowComponent.ctorParameters = function () { return [\n    { type: ConfirmationPopoverWindowOptions, },\n]; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n * @record\n */\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [popoverTitle]=\"popoverTitle\"\n *  [popoverMessage]=\"popoverMessage\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\nvar ConfirmationPopoverDirective = /** @class */ (function () {\n    /**\n     * \\@internal\n     * @param {?} viewContainerRef\n     * @param {?} elm\n     * @param {?} defaultOptions\n     * @param {?} cfr\n     * @param {?} position\n     * @param {?} renderer\n     */\n    function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {\n        this.viewContainerRef = viewContainerRef;\n        this.elm = elm;\n        this.defaultOptions = defaultOptions;\n        this.cfr = cfr;\n        this.position = position;\n        this.renderer = renderer;\n        /**\n         * Whether to disable showing the popover. Default `false`.\n         */\n        this.isDisabled = false;\n        /**\n         * Will open or show the popover when changed.\n         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n         */\n        this.isOpen = false;\n        /**\n         * Will emit when the popover is opened or closed\n         */\n        this.isOpenChange = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"](true);\n        /**\n         * An expression that is called when the confirm button is clicked.\n         */\n        this.confirm = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        /**\n         * An expression that is called when the cancel button is clicked.\n         */\n        this.cancel = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        this.eventListeners = [];\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnInit = function () {\n        this.isOpenChange.emit(false);\n    };\n    /**\n     * \\@internal\n     * @param {?} changes\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"isOpen\"]) {\n            if (changes[\"isOpen\"].currentValue === true) {\n                this.showPopover();\n            }\n            else {\n                this.hidePopover();\n            }\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onConfirm = function (event) {\n        this.confirm.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onCancel = function (event) {\n        this.cancel.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.togglePopover = function () {\n        if (!this.popover) {\n            this.showPopover();\n        }\n        else {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {\n        if (this.popover &&\n            !this.elm.nativeElement.contains(event.target) &&\n            !this.popover.location.nativeElement.contains(event.target)) {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.showPopover = function () {\n        var _this = this;\n        if (!this.popover && !this.isDisabled) {\n            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n            // otherwise the document click event gets fired after the click event\n            // that triggered the popover to open (no idea why this is so)\n            setTimeout(function () {\n                _this.eventListeners = [\n                    _this.renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('window', 'resize', function () { return _this.positionPopover(); })\n                ];\n            });\n            var /** @type {?} */ options_1 = new ConfirmationPopoverWindowOptions();\n            Object.assign(options_1, this.defaultOptions, {\n                popoverTitle: this.popoverTitle,\n                popoverMessage: this.popoverMessage,\n                onConfirm: function (event) {\n                    _this.onConfirm(event);\n                },\n                onCancel: function (event) {\n                    _this.onCancel(event);\n                },\n                onAfterViewInit: function () {\n                    _this.positionPopover();\n                }\n            });\n            var /** @type {?} */ optionalParams = [\n                'confirmText',\n                'cancelText',\n                'placement',\n                'confirmButtonType',\n                'cancelButtonType',\n                'focusButton',\n                'hideConfirmButton',\n                'hideCancelButton',\n                'popoverClass',\n                'appendToBody',\n                'customTemplate',\n                'reverseButtonOrder'\n            ];\n            optionalParams.forEach(function (param) {\n                if (typeof _this[param] !== 'undefined') {\n                    ((options_1))[param] = _this[param];\n                }\n            });\n            var /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n            var /** @type {?} */ childInjector = __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Injector\"].create([\n                {\n                    provide: ConfirmationPopoverWindowOptions,\n                    useValue: options_1\n                }\n            ], this.viewContainerRef.parentInjector);\n            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n            if (options_1.appendToBody) {\n                document.body.appendChild(this.popover.location.nativeElement);\n            }\n            this.isOpenChange.emit(true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.positionPopover = function () {\n        if (this.popover) {\n            var /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];\n            var /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n            this.renderer.setStyle(popoverElement, 'top', popoverPosition.top + \"px\");\n            this.renderer.setStyle(popoverElement, 'left', popoverPosition.left + \"px\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.hidePopover = function () {\n        if (this.popover) {\n            this.popover.destroy();\n            delete this.popover;\n            this.isOpenChange.emit(false);\n            this.eventListeners.forEach(function (fn) { return fn(); });\n            this.eventListeners = [];\n        }\n    };\n    return ConfirmationPopoverDirective;\n}());\nConfirmationPopoverDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[mwlConfirmationPopover]'\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ViewContainerRef\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n    { type: ConfirmationPopoverOptions, },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ComponentFactoryResolver\"], },\n    { type: __WEBPACK_IMPORTED_MODULE_2_positioning__[\"a\" /* Positioning */], },\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Renderer2\"], },\n]; };\nConfirmationPopoverDirective.propDecorators = {\n    \"popoverTitle\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"popoverMessage\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"confirmText\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"cancelText\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"placement\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"confirmButtonType\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"cancelButtonType\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"focusButton\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"hideConfirmButton\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"hideCancelButton\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"isDisabled\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"isOpen\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"customTemplate\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"isOpenChange\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],\n    \"confirm\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],\n    \"cancel\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Output\"] },],\n    \"popoverClass\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"appendToBody\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"reverseButtonOrder\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n    \"togglePopover\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"HostListener\"], args: ['click',] },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\nvar FocusDirective = /** @class */ (function () {\n    /**\n     * @param {?} elm\n     */\n    function FocusDirective(elm) {\n        this.elm = elm;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FocusDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"mwlFocus\"] && this.mwlFocus === true) {\n            this.elm.nativeElement.focus();\n        }\n    };\n    return FocusDirective;\n}());\nFocusDirective.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Directive\"], args: [{\n                selector: '[mwlFocus]'\n            },] },\n];\n/** @nocollapse */\nFocusDirective.ctorParameters = function () { return [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"ElementRef\"], },\n]; };\nFocusDirective.propDecorators = {\n    \"mwlFocus\": [{ type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Input\"] },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar USER_OPTIONS = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"InjectionToken\"]('confirmation popover user options');\n/**\n * @param {?} userOptions\n * @return {?}\n */\nfunction optionsFactory(userOptions) {\n    var /** @type {?} */ options = new ConfirmationPopoverOptions();\n    Object.assign(options, userOptions);\n    return options;\n}\nvar ConfirmationPopoverModule = /** @class */ (function () {\n    function ConfirmationPopoverModule() {\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    ConfirmationPopoverModule.forRoot = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: ConfirmationPopoverModule,\n            providers: [\n                {\n                    provide: USER_OPTIONS,\n                    useValue: options\n                },\n                {\n                    provide: ConfirmationPopoverOptions,\n                    useFactory: optionsFactory,\n                    deps: [USER_OPTIONS]\n                },\n                __WEBPACK_IMPORTED_MODULE_2_positioning__[\"a\" /* Positioning */]\n            ]\n        };\n    };\n    return ConfirmationPopoverModule;\n}());\nConfirmationPopoverModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"NgModule\"], args: [{\n                declarations: [\n                    ConfirmationPopoverDirective,\n                    ConfirmationPopoverWindowComponent,\n                    FocusDirective\n                ],\n                imports: [__WEBPACK_IMPORTED_MODULE_3__angular_common__[\"c\" /* CommonModule */]],\n                exports: [ConfirmationPopoverDirective, FocusDirective],\n                entryComponents: [ConfirmationPopoverWindowComponent]\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverModule.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=angular-confirmation-popover.js.map\n\n\n/***/ }),\n\n/***/ 183:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return HttpBackend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return HttpHandler; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return HttpClient; });\n/* unused harmony export HttpHeaders */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return HTTP_INTERCEPTORS; });\n/* unused harmony export JsonpClientBackend */\n/* unused harmony export JsonpInterceptor */\n/* unused harmony export HttpClientJsonpModule */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return HttpClientModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return HttpClientXsrfModule; });\n/* unused harmony export ɵinterceptingHandler */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return HttpParams; });\n/* unused harmony export HttpUrlEncodingCodec */\n/* unused harmony export HttpRequest */\n/* unused harmony export HttpErrorResponse */\n/* unused harmony export HttpEventType */\n/* unused harmony export HttpHeaderResponse */\n/* unused harmony export HttpResponse */\n/* unused harmony export HttpResponseBase */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return HttpXhrBackend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return XhrFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return HttpXsrfTokenExtractor; });\n/* unused harmony export ɵa */\n/* unused harmony export ɵb */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return HttpInterceptingHandler; });\n/* unused harmony export ɵd */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return BrowserXhr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return HttpXsrfCookieExtractor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return HttpXsrfInterceptor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return XSRF_COOKIE_NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return XSRF_HEADER_NAME; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_of__ = __webpack_require__(56);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_observable_of___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_of__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_concatMap__ = __webpack_require__(89);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_concatMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_operator_concatMap__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_filter__ = __webpack_require__(93);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_filter___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_operator_filter__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_tslib__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__angular_common__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__);\n/**\n * @license Angular v5.2.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n\n\n\n\n\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_5_tslib__[\"b\" /* __extends */])(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_5_tslib__[\"b\" /* __extends */])(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    Object(__WEBPACK_IMPORTED_MODULE_5_tslib__[\"b\" /* __extends */])(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = __WEBPACK_IMPORTED_MODULE_2_rxjs_operator_concatMap__[\"concatMap\"].call(Object(__WEBPACK_IMPORTED_MODULE_1_rxjs_observable_of__[\"of\"])(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = __WEBPACK_IMPORTED_MODULE_3_rxjs_operator_filter__[\"filter\"].call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return __WEBPACK_IMPORTED_MODULE_4_rxjs_operator_map__[\"map\"].call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nvar HTTP_INTERCEPTORS = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__[\"Observable\"](function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [__WEBPACK_IMPORTED_MODULE_6__angular_common__[\"d\" /* DOCUMENT */],] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new __WEBPACK_IMPORTED_MODULE_7_rxjs_Observable__[\"Observable\"](function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var /** @type {?} */ originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = /** @type {?} */ ({ error: error, text: body });\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"InjectionToken\"]('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = Object(__WEBPACK_IMPORTED_MODULE_6__angular_common__[\"w\" /* ɵparseCookieValue */])(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [__WEBPACK_IMPORTED_MODULE_6__angular_common__[\"d\" /* DOCUMENT */],] },] },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"PLATFORM_ID\"],] },] },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Inject\"], args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptingHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        if (this.chain === null) {\n            var /** @type {?} */ interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    HttpInterceptingHandler.ctorParameters = function () { return [\n        { type: HttpBackend, },\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injector\"], },\n    ]; };\n    return HttpInterceptingHandler;\n}());\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModule\"], args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n\n//# sourceMappingURL=http.js.map\n\n\n/***/ }),\n\n/***/ 184:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return LocalStorageDriver; });\nvar DEFAULT_KEY_PREFIX = 'async-cache-';\nvar LocalStorageDriver = (function () {\n    function LocalStorageDriver(options) {\n        if (options === void 0) { options = { keyPrefix: DEFAULT_KEY_PREFIX }; }\n        this.options = options;\n    }\n    LocalStorageDriver.prototype.has = function (key) {\n        return localStorage.hasOwnProperty(this.getInternalKey(key));\n    };\n    LocalStorageDriver.prototype.get = function (key) {\n        return JSON.parse(localStorage.getItem(this.getInternalKey(key)));\n    };\n    LocalStorageDriver.prototype.set = function (key, value) {\n        return localStorage.setItem(this.getInternalKey(key), JSON.stringify(value));\n    };\n    LocalStorageDriver.prototype.delete = function (key) {\n        return localStorage.removeItem(this.getInternalKey(key));\n    };\n    LocalStorageDriver.prototype.clear = function () {\n        for (var _i = 0, _a = this.keys(); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.delete(key);\n        }\n        return;\n    };\n    LocalStorageDriver.prototype.keys = function () {\n        var _this = this;\n        var keys = [];\n        for (var i = 0; i < localStorage.length; i++) {\n            keys.push(localStorage.key(i));\n        }\n        return keys.filter(function (key) { return key.startsWith(_this.options.keyPrefix); }).map(function (key) { return _this.getExternalKey(key); });\n    };\n    LocalStorageDriver.prototype.getInternalKey = function (suffix) {\n        return \"\" + this.options.keyPrefix + suffix;\n    };\n    LocalStorageDriver.prototype.getExternalKey = function (key) {\n        return key.replace(new RegExp('^' + this.options.keyPrefix), '');\n    };\n    return LocalStorageDriver;\n}());\n\n//# sourceMappingURL=local-storage-driver.provider.js.map\n\n/***/ }),\n\n/***/ 185:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CachedHttp; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_common_http__ = __webpack_require__(183);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__async_cache_provider__ = __webpack_require__(178);\n\n\n\nvar CachedHttp = (function () {\n    function CachedHttp(http, asyncCache) {\n        this.http = http;\n        this.asyncCache = asyncCache;\n    }\n    CachedHttp.prototype.get = function (url, options, asyncCacheOptions) {\n        var result$ = this.http.get(url, options);\n        var cacheKey = url;\n        if (options && options.params) {\n            cacheKey += '?' + options.params.toString();\n        }\n        return this.asyncCache.wrap(result$, cacheKey, asyncCacheOptions);\n    };\n    CachedHttp.decorators = [\n        { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Injectable\"] },\n    ];\n    /** @nocollapse */\n    CachedHttp.ctorParameters = function () { return [\n        { type: __WEBPACK_IMPORTED_MODULE_1__angular_common_http__[\"c\" /* HttpClient */], },\n        { type: __WEBPACK_IMPORTED_MODULE_2__async_cache_provider__[\"a\" /* AsyncCache */], },\n    ]; };\n    return CachedHttp;\n}());\n\n//# sourceMappingURL=cached-http.provider.js.map\n\n/***/ }),\n\n/***/ 186:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return OrderByDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return OrderBy; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_orderby__ = __webpack_require__(218);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_orderby___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_orderby__);\n\n\nvar OrderByDirection;\n(function (OrderByDirection) {\n    OrderByDirection[\"Asc\"] = \"asc\";\n    OrderByDirection[\"Desc\"] = \"desc\";\n})(OrderByDirection || (OrderByDirection = {}));\nvar OrderBy = /** @class */ (function () {\n    function OrderBy() {\n    }\n    OrderBy.prototype.transform = function (input, field, direction) {\n        if (direction === void 0) { direction = OrderByDirection.Asc; }\n        if (input && field) {\n            return __WEBPACK_IMPORTED_MODULE_1_lodash_orderby___default()(input, field, direction);\n        }\n        return input;\n    };\n    return OrderBy;\n}());\n\n\n\n/***/ }),\n\n/***/ 187:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/esm5/core.js\nvar core = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./node_modules/angular-async-cache/drivers/local-storage-driver.provider.js\nvar local_storage_driver_provider = __webpack_require__(184);\n\n// EXTERNAL MODULE: ./node_modules/angular-async-cache/drivers/memory-driver.provider.js\nvar memory_driver_provider = __webpack_require__(181);\n\n// EXTERNAL MODULE: ./node_modules/angular-async-cache/async-cache-options.provider.js\nvar async_cache_options_provider = __webpack_require__(180);\n\n// EXTERNAL MODULE: ./node_modules/angular-async-cache/async-cache.provider.js\nvar async_cache_provider = __webpack_require__(178);\n\n// CONCATENATED MODULE: ./node_modules/angular-async-cache/async-cache.pipe.js\n\n\nvar async_cache_pipe_AsyncCachePipe = (function () {\n    function AsyncCachePipe(asyncCache) {\n        this.asyncCache = asyncCache;\n    }\n    AsyncCachePipe.prototype.transform = function (value, cacheKey, options) {\n        return this.asyncCache.wrap(value, cacheKey, options);\n    };\n    AsyncCachePipe.decorators = [\n        { type: core[\"Pipe\"], args: [{\n                    name: 'asyncCache'\n                },] },\n    ];\n    /** @nocollapse */\n    AsyncCachePipe.ctorParameters = function () { return [\n        { type: async_cache_provider[\"a\" /* AsyncCache */], },\n    ]; };\n    return AsyncCachePipe;\n}());\n\n//# sourceMappingURL=async-cache.pipe.js.map\n// EXTERNAL MODULE: ./node_modules/angular-async-cache/cached-http.provider.js\nvar cached_http_provider = __webpack_require__(185);\n\n// CONCATENATED MODULE: ./node_modules/angular-async-cache/async-cache.module.js\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = memoryDriverFactory;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = localStorageDriverFactory;\n/* unused harmony export cacheOptionFactory */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return async_cache_module_AsyncCacheModule; });\n\n\n\n\n\n\n\nfunction memoryDriverFactory(options) {\n    return options.driver instanceof memory_driver_provider[\"a\" /* MemoryDriver */] ? options.driver : new memory_driver_provider[\"a\" /* MemoryDriver */]();\n}\nfunction localStorageDriverFactory(options) {\n    return options.driver instanceof local_storage_driver_provider[\"a\" /* LocalStorageDriver */] ? options.driver : new local_storage_driver_provider[\"a\" /* LocalStorageDriver */]();\n}\nfunction cacheOptionFactory() {\n    return new async_cache_options_provider[\"a\" /* AsyncCacheOptions */]();\n}\nvar async_cache_module_AsyncCacheModule = (function () {\n    function AsyncCacheModule() {\n    }\n    AsyncCacheModule.forRoot = function (cacheOptions) {\n        if (cacheOptions === void 0) { cacheOptions = {\n            provide: async_cache_options_provider[\"a\" /* AsyncCacheOptions */],\n            useFactory: cacheOptionFactory\n        }; }\n        return {\n            ngModule: AsyncCacheModule,\n            providers: [{\n                    provide: local_storage_driver_provider[\"a\" /* LocalStorageDriver */],\n                    useFactory: localStorageDriverFactory,\n                    deps: [async_cache_options_provider[\"a\" /* AsyncCacheOptions */]]\n                }, {\n                    provide: memory_driver_provider[\"a\" /* MemoryDriver */],\n                    useFactory: memoryDriverFactory,\n                    deps: [async_cache_options_provider[\"a\" /* AsyncCacheOptions */]]\n                },\n                cacheOptions,\n                async_cache_provider[\"a\" /* AsyncCache */],\n                cached_http_provider[\"a\" /* CachedHttp */]\n            ]\n        };\n    };\n    AsyncCacheModule.decorators = [\n        { type: core[\"NgModule\"], args: [{\n                    declarations: [async_cache_pipe_AsyncCachePipe],\n                    exports: [async_cache_pipe_AsyncCachePipe]\n                },] },\n    ];\n    /** @nocollapse */\n    AsyncCacheModule.ctorParameters = function () { return []; };\n    return AsyncCacheModule;\n}());\n\n//# sourceMappingURL=async-cache.module.js.map\n\n/***/ }),\n\n/***/ 188:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export ConfirmationPopoverModuleNgFactory */\n/* unused harmony export RenderType_ɵe */\n/* unused harmony export View_ɵe_0 */\n/* unused harmony export View_ɵe_Host_0 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ɵeNgFactory; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__ = __webpack_require__(182);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(19);\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\nvar ConfirmationPopoverModuleNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵcmf\"](__WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"a\" /* ConfirmationPopoverModule */], [], function (_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmod\"]([__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmpd\"](512, __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ComponentFactoryResolver\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵCodegenComponentFactoryResolver\"], [[8, [ɵeNgFactory]], [3, __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ComponentFactoryResolver\"]], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"NgModuleRef\"]]), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmpd\"](4608, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"n\" /* NgLocalization */], __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"m\" /* NgLocaleLocalization */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"LOCALE_ID\"], [2, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"v\" /* ɵa */]]]), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmpd\"](512, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"c\" /* CommonModule */], __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"c\" /* CommonModule */], []), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵmpd\"](512, __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"a\" /* ConfirmationPopoverModule */], __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"a\" /* ConfirmationPopoverModule */], [])]); });\n\nvar styles_ɵe = [\".popover[_ngcontent-%COMP%] {\\n      display: block;\\n    }\\n    .bs-popover-top[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-bottom[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      left: 50%;\\n    }\\n    .bs-popover-left[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-right[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      top: 50%;\\n    }\\n    .btn[_ngcontent-%COMP%] {\\n      transition: none;\\n    }\\n    .confirm-btns[_ngcontent-%COMP%] {\\n      display: flex;\\n      justify-content: space-around;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%] {\\n      flex-basis: 50%;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child) {\\n      margin-left: 4px;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 4px;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%] {\\n      flex-direction: row-reverse;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child) {\\n      margin-right: 4px;\\n      margin-left: 0;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 0;\\n      margin-left: 4px;\\n    }\"];\nvar RenderType_ɵe = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵcrt\"]({ encapsulation: 0, styles: styles_ɵe, data: {} });\n\nfunction View_ɵe_2(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](0, 0, null, null, 5, \"div\", [[\"class\", \"confirm-btn-container\"]], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n              \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](2, 0, null, null, 2, \"button\", [[\"type\", \"button\"]], [[8, \"className\", 0], [8, \"innerHTML\", 1]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.parent.context.options.onCancel({ clickEvent: $event }) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](3, 540672, null, 0, __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"h\" /* ɵg */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"]], { mwlFocus: [0, \"mwlFocus\"] }, null), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n              \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n            \"]))], function (_ck, _v) { var currVal_2 = (_v.parent.context.options.focusButton === \"cancel\"); _ck(_v, 3, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = (\"btn btn-block btn-\" + _v.parent.context.options.cancelButtonType); var currVal_1 = _v.parent.context.options.cancelText; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_ɵe_3(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](0, 0, null, null, 5, \"div\", [[\"class\", \"confirm-btn-container\"]], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n              \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](2, 0, null, null, 2, \"button\", [[\"type\", \"button\"]], [[8, \"className\", 0], [8, \"innerHTML\", 1]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.parent.context.options.onConfirm({ clickEvent: $event }) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](3, 540672, null, 0, __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"h\" /* ɵg */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"]], { mwlFocus: [0, \"mwlFocus\"] }, null), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n              \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n            \"]))], function (_ck, _v) { var currVal_2 = (_v.parent.context.options.focusButton === \"confirm\"); _ck(_v, 3, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = (\"btn btn-block btn-\" + _v.parent.context.options.confirmButtonType); var currVal_1 = _v.parent.context.options.confirmText; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_ɵe_1(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](1, 0, null, null, 21, \"div\", [], null, null, null, null, null)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](2, 278528, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"j\" /* NgClass */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"IterableDiffers\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"KeyValueDiffers\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ElementRef\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"Renderer2\"]], { ngClass: [0, \"ngClass\"] }, null), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵpad\"](3, 5), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](5, 0, null, null, 0, \"div\", [[\"class\", \"popover-arrow arrow\"]], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](7, 0, null, null, 0, \"h3\", [[\"class\", \"popover-title popover-header\"]], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](9, 0, null, null, 12, \"div\", [[\"class\", \"popover-content popover-body\"]], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](11, 0, null, null, 0, \"p\", [], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](13, 0, null, null, 7, \"div\", [[\"class\", \"confirm-btns\"]], [[2, \"confirm-btns-reversed\", null]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵand\"](16777216, null, null, 1, null, View_ɵe_2)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](16, 16384, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"l\" /* NgIf */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"]], { ngIf: [0, \"ngIf\"] }, null), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵand\"](16777216, null, null, 1, null, View_ɵe_3)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](19, 16384, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"l\" /* NgIf */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"TemplateRef\"]], { ngIf: [0, \"ngIf\"] }, null), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"]))], function (_ck, _v) { var currVal_0 = _ck(_v, 3, 0, \"popover\", _v.context.options.placement, (\"popover-\" + _v.context.options.placement), (\"bs-popover-\" + _v.context.options.placement), _v.context.options.popoverClass); _ck(_v, 2, 0, currVal_0); var currVal_4 = !_v.context.options.hideCancelButton; _ck(_v, 16, 0, currVal_4); var currVal_5 = !_v.context.options.hideConfirmButton; _ck(_v, 19, 0, currVal_5); }, function (_ck, _v) { var currVal_1 = _v.context.options.popoverTitle; _ck(_v, 7, 0, currVal_1); var currVal_2 = _v.context.options.popoverMessage; _ck(_v, 11, 0, currVal_2); var currVal_3 = _v.context.options.reverseButtonOrder; _ck(_v, 13, 0, currVal_3); }); }\nfunction View_ɵe_4(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"]))], null, null); }\nfunction View_ɵe_0(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵand\"](0, [[\"defaultTemplate\", 2]], null, 0, null, View_ɵe_1)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵand\"](16777216, null, null, 2, null, View_ɵe_4)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](4, 540672, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"q\" /* NgTemplateOutlet */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ViewContainerRef\"]], { ngTemplateOutletContext: [0, \"ngTemplateOutletContext\"], ngTemplateOutlet: [1, \"ngTemplateOutlet\"] }, null), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵpod\"](5, { options: 0 }), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n  \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _ck(_v, 5, 0, _co.options); var currVal_1 = (_co.options.customTemplate || __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵnov\"](_v, 1)); _ck(_v, 4, 0, currVal_0, currVal_1); }, null); }\nfunction View_ɵe_Host_0(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](0, 0, null, null, 1, \"mwl-confirmation-popover-window\", [], null, null, null, View_ɵe_0, RenderType_ɵe)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](1, 4243456, null, 0, __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"f\" /* ɵe */], [__WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"g\" /* ɵf */]], null, null)], null, null); }\nvar ɵeNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵccf\"](\"mwl-confirmation-popover-window\", __WEBPACK_IMPORTED_MODULE_1_angular_confirmation_popover__[\"f\" /* ɵe */], View_ɵe_Host_0, {}, {}, []);\n\n//# sourceMappingURL=angular-confirmation-popover.ngfactory.js.map\n\n/***/ }),\n\n/***/ 189:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = asyncCacheOptionsFactory;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SharedModule; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular_async_cache__ = __webpack_require__(203);\n\nfunction asyncCacheOptionsFactory() {\n    return new __WEBPACK_IMPORTED_MODULE_0_angular_async_cache__[\"a\" /* AsyncCacheOptions */]({\n        driver: new __WEBPACK_IMPORTED_MODULE_0_angular_async_cache__[\"b\" /* LocalStorageDriver */](),\n        fromCacheAndReplay: true\n    });\n}\nvar SharedModule = /** @class */ (function () {\n    function SharedModule() {\n    }\n    return SharedModule;\n}());\n\n\n\n/***/ }),\n\n/***/ 192:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SortableHeaderComponent; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__ = __webpack_require__(186);\n\n\nvar SortableHeaderComponent = /** @class */ (function () {\n    function SortableHeaderComponent() {\n        this.OrderByDirection = __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__[\"b\" /* OrderByDirection */];\n    }\n    SortableHeaderComponent.prototype.headerClicked = function () {\n        if (this.sort.field === this.fieldName) {\n            if (this.sort.direction === __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__[\"b\" /* OrderByDirection */].Desc) {\n                this.sort.direction = __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__[\"b\" /* OrderByDirection */].Asc;\n                this.sort.field = null;\n            }\n            else {\n                this.sort.direction = __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__[\"b\" /* OrderByDirection */].Desc;\n            }\n        }\n        else {\n            this.sort.field = this.fieldName;\n            this.sort.direction = __WEBPACK_IMPORTED_MODULE_1__order_by_pipe__[\"b\" /* OrderByDirection */].Asc;\n        }\n    };\n    return SortableHeaderComponent;\n}());\n\n\n\n/***/ }),\n\n/***/ 193:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return ShowListComponent; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__local_storage_provider__ = __webpack_require__(175);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__order_by_pipe__ = __webpack_require__(186);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_forms__ = __webpack_require__(176);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_takeUntil__ = __webpack_require__(194);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_operators_takeUntil___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_takeUntil__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash_get__ = __webpack_require__(220);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash_get__);\n\n\n\n\n\n\n\n\nvar SUBSCRIBED_SHOWS_LS_KEY = 'subscribedShows';\nvar ShowListComponent = /** @class */ (function () {\n    function ShowListComponent(localStorage) {\n        this.localStorage = localStorage;\n        this.unsubscribe = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"EventEmitter\"]();\n        this.filteredShowsList = [];\n        this.sort = {\n            field: null,\n            direction: __WEBPACK_IMPORTED_MODULE_3__order_by_pipe__[\"b\" /* OrderByDirection */].Asc\n        };\n        this.searchTextControl = new __WEBPACK_IMPORTED_MODULE_4__angular_forms__[\"e\" /* FormControl */]('');\n        this.destroy$ = new __WEBPACK_IMPORTED_MODULE_5_rxjs_Subject__[\"Subject\"]();\n    }\n    ShowListComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.searchTextControl.valueChanges\n            .pipe(Object(__WEBPACK_IMPORTED_MODULE_6_rxjs_operators_takeUntil__[\"takeUntil\"])(this.destroy$))\n            .subscribe(function () { return _this.updateFilteredShowsList(); });\n    };\n    ShowListComponent.prototype.ngOnChanges = function (changeRecord) {\n        if (changeRecord.shows && this.shows) {\n            this.updateFilteredShowsList();\n        }\n    };\n    ShowListComponent.prototype.ngOnDestroy = function () {\n        this.destroy$.next();\n    };\n    ShowListComponent.prototype.subscribeToShow = function (show) {\n        this.setSubscribedShows(this.getSubscribedShows().concat([show]));\n    };\n    ShowListComponent.prototype.unsubscribeFromShow = function (show) {\n        this.setSubscribedShows(this.getSubscribedShows().filter(function (iShow) { return iShow.id !== show.id; }));\n        this.unsubscribe.emit(show);\n    };\n    ShowListComponent.prototype.getSubscribedShows = function () {\n        return this.localStorage.getItem(SUBSCRIBED_SHOWS_LS_KEY, []);\n    };\n    ShowListComponent.prototype.setSubscribedShows = function (shows) {\n        this.localStorage.setItem(SUBSCRIBED_SHOWS_LS_KEY, shows);\n        this.updateFilteredShowsList();\n    };\n    ShowListComponent.prototype.updateFilteredShowsList = function () {\n        var _this = this;\n        var subscribedShows = this.getSubscribedShows();\n        var filterByFields = ['name', 'network.name', 'summary'];\n        this.filteredShowsList = this.shows\n            .map(function (show) {\n            var isSubscribed = subscribedShows.some(function (iShow) { return iShow.id === show.id; });\n            return __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __assign */]({}, show, { isSubscribed: isSubscribed });\n        })\n            .filter(function (show) {\n            if (!_this.searchTextControl.value) {\n                return true;\n            }\n            else {\n                return filterByFields.some(function (field) {\n                    var fieldValue = __WEBPACK_IMPORTED_MODULE_7_lodash_get___default()(show, field);\n                    return (fieldValue &&\n                        fieldValue\n                            .toLowerCase()\n                            .includes(_this.searchTextControl.value.toLowerCase()));\n                });\n            }\n        });\n    };\n    return ShowListComponent;\n}());\n\n\n\n/***/ }),\n\n/***/ 194:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = __webpack_require__(54);\nvar subscribeToResult_1 = __webpack_require__(53);\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n\n/***/ }),\n\n/***/ 199:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/esm5/core.js\nvar core = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./node_modules/angular-confirmation-popover/esm5/angular-confirmation-popover.js\nvar angular_confirmation_popover = __webpack_require__(182);\n\n// EXTERNAL MODULE: ./node_modules/positioning/dist/positioning.js\nvar positioning = __webpack_require__(179);\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/esm5/router.js\nvar router = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./src/app/modules/shared/order-by.pipe.ts\nvar order_by_pipe = __webpack_require__(186);\n\n// CONCATENATED MODULE: ./src/app/modules/shared/replace.pipe.ts\n\nvar Replace = /** @class */ (function () {\n    function Replace() {\n    }\n    Replace.prototype.transform = function (input, find, replaceWith) {\n        if (input === void 0) { input = ''; }\n        if (find === void 0) { find = ''; }\n        if (replaceWith === void 0) { replaceWith = ''; }\n        return input.replace(find, replaceWith);\n    };\n    return Replace;\n}());\n\n\n// EXTERNAL MODULE: ./node_modules/@angular/forms/esm5/forms.js\nvar esm5_forms = __webpack_require__(176);\n\n// EXTERNAL MODULE: ./src/app/modules/shared/sortable-header.directive.ngfactory.js\nvar sortable_header_directive_ngfactory = __webpack_require__(202);\n\n// EXTERNAL MODULE: ./src/app/modules/shared/sortable-header.directive.ts\nvar sortable_header_directive = __webpack_require__(192);\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/esm5/common.js\nvar common = __webpack_require__(19);\n\n// EXTERNAL MODULE: ./src/app/modules/shared/show-list.component.ts\nvar show_list_component = __webpack_require__(193);\n\n// EXTERNAL MODULE: ./src/app/modules/shared/local-storage.provider.ts\nvar local_storage_provider = __webpack_require__(175);\n\n// CONCATENATED MODULE: ./src/app/modules/shared/show-list.component.ngfactory.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RenderType_ShowListComponent; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = View_ShowListComponent_0;\n/* unused harmony export View_ShowListComponent_Host_0 */\n/* unused harmony export ShowListComponentNgFactory */\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\n\n\n\n\n\n\n\n\n\n\nvar styles_ShowListComponent = [];\nvar RenderType_ShowListComponent = core[\"ɵcrt\"]({ encapsulation: 2, styles: styles_ShowListComponent, data: {} });\n\nfunction View_ShowListComponent_1(_l) { return core[\"ɵvid\"](0, [(_l()(), core[\"ɵeld\"](0, 0, null, null, 36, \"tr\", [], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](2, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](3, null, [\"\", \"\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](5, 0, null, null, 4, \"td\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](7, 0, null, null, 1, \"img\", [[\"width\", \"60\"]], [[8, \"src\", 4]], null, null, null, null)), core[\"ɵppd\"](8, 3), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](11, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](12, null, [\"\", \"\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](14, 0, null, null, 0, \"td\", [], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](16, 0, null, null, 4, \"td\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](18, 0, null, null, 1, \"span\", [[\"class\", \"badge\"]], [[2, \"badge-success\", null], [2, \"badge-danger\", null]], null, null, null, null)), (_l()(), core[\"ɵted\"](19, null, [\"\\n               \", \"\\n             \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](22, 0, null, null, 13, \"td\", [[\"style\", \"width: 270px\"]], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](24, 0, null, null, 1, \"button\", [[\"class\", \"btn btn-success\"]], [[8, \"hidden\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.subscribeToShow(_v.context.$implicit) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n              Subscribe\\n            \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](27, 16777216, null, null, 2, \"button\", [[\"class\", \"btn btn-danger\"], [\"mwlConfirmationPopover\", \"\"], [\"popoverMessage\", \"Are you sure you would like to unsubscribe from this show?\"], [\"popoverTitle\", \"Unsubscribe\"]], [[8, \"hidden\", 0]], [[null, \"confirm\"], [null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (core[\"ɵnov\"](_v, 28).togglePopover() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"confirm\" === en)) {\n        var pd_1 = (_co.unsubscribeFromShow(_v.context.$implicit) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), core[\"ɵdid\"](28, 737280, null, 0, angular_confirmation_popover[\"d\" /* ɵc */], [core[\"ViewContainerRef\"], core[\"ElementRef\"], angular_confirmation_popover[\"e\" /* ɵd */], core[\"ComponentFactoryResolver\"], positioning[\"a\" /* Positioning */], core[\"Renderer2\"]], { popoverTitle: [0, \"popoverTitle\"], popoverMessage: [1, \"popoverMessage\"] }, { confirm: \"confirm\" }), (_l()(), core[\"ɵted\"](-1, null, [\"\\n              Unsubscribe\\n            \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](31, 0, null, null, 3, \"button\", [[\"class\", \"btn btn-info\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (core[\"ɵnov\"](_v, 32).onClick() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), core[\"ɵdid\"](32, 16384, null, 0, router[\"m\" /* RouterLink */], [router[\"l\" /* Router */], router[\"a\" /* ActivatedRoute */], [8, null], core[\"Renderer2\"], core[\"ElementRef\"]], { routerLink: [0, \"routerLink\"] }, null), core[\"ɵpad\"](33, 2), (_l()(), core[\"ɵted\"](-1, null, [\"\\n              Episodes\\n            \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"]))], function (_ck, _v) { var currVal_10 = \"Unsubscribe\"; var currVal_11 = \"Are you sure you would like to unsubscribe from this show?\"; _ck(_v, 28, 0, currVal_10, currVal_11); var currVal_12 = _ck(_v, 33, 0, \"/episodes\", _v.context.$implicit.id); _ck(_v, 32, 0, currVal_12); }, function (_ck, _v) { var currVal_0 = !((_v.context.$implicit.image == null) ? null : _v.context.$implicit.image.medium); _ck(_v, 0, 0, currVal_0); var currVal_1 = _v.context.$implicit.name; _ck(_v, 3, 0, currVal_1); var currVal_2 = core[\"ɵunv\"](_v, 7, 0, _ck(_v, 8, 0, core[\"ɵnov\"](_v.parent, 1), ((_v.context.$implicit.image == null) ? null : _v.context.$implicit.image.medium), \"http://\", \"https://\")); _ck(_v, 7, 0, currVal_2); var currVal_3 = ((_v.context.$implicit.network == null) ? null : _v.context.$implicit.network.name); _ck(_v, 12, 0, currVal_3); var currVal_4 = _v.context.$implicit.summary; _ck(_v, 14, 0, currVal_4); var currVal_5 = (_v.context.$implicit.status === \"Running\"); var currVal_6 = (_v.context.$implicit.status !== \"Running\"); _ck(_v, 18, 0, currVal_5, currVal_6); var currVal_7 = _v.context.$implicit.status; _ck(_v, 19, 0, currVal_7); var currVal_8 = _v.context.$implicit.isSubscribed; _ck(_v, 24, 0, currVal_8); var currVal_9 = !_v.context.$implicit.isSubscribed; _ck(_v, 27, 0, currVal_9); }); }\nfunction View_ShowListComponent_2(_l) { return core[\"ɵvid\"](0, [(_l()(), core[\"ɵeld\"](0, 0, null, null, 10, \"tfoot\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵeld\"](2, 0, null, null, 7, \"tr\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](4, 0, null, null, 4, \"th\", [[\"colspan\", \"6\"]], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](6, 0, null, null, 1, \"div\", [[\"class\", \"alert alert-info\"]], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"No shows were found for your search\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"]))], null, null); }\nfunction View_ShowListComponent_0(_l) { return core[\"ɵvid\"](0, [core[\"ɵpid\"](0, order_by_pipe[\"a\" /* OrderBy */], []), core[\"ɵpid\"](0, Replace, []), (_l()(), core[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), core[\"ɵeld\"](3, 0, null, null, 50, \"table\", [[\"class\", \"table\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), core[\"ɵeld\"](5, 0, null, null, 37, \"thead\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵeld\"](7, 0, null, null, 11, \"tr\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](9, 0, null, null, 8, \"th\", [[\"colspan\", \"6\"]], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n            \"])), (_l()(), core[\"ɵeld\"](11, 0, null, null, 5, \"input\", [[\"class\", \"form-control\"], [\"placeholder\", \"Filter shows...\"], [\"type\", \"search\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"]], function (_v, en, $event) { var ad = true; if ((\"input\" === en)) {\n        var pd_0 = (core[\"ɵnov\"](_v, 12)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (core[\"ɵnov\"](_v, 12).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (core[\"ɵnov\"](_v, 12)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (core[\"ɵnov\"](_v, 12)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } return ad; }, null, null)), core[\"ɵdid\"](12, 16384, null, 0, esm5_forms[\"c\" /* DefaultValueAccessor */], [core[\"Renderer2\"], core[\"ElementRef\"], [2, esm5_forms[\"a\" /* COMPOSITION_BUFFER_MODE */]]], null, null), core[\"ɵprd\"](1024, null, esm5_forms[\"i\" /* NG_VALUE_ACCESSOR */], function (p0_0) { return [p0_0]; }, [esm5_forms[\"c\" /* DefaultValueAccessor */]]), core[\"ɵdid\"](14, 540672, null, 0, esm5_forms[\"f\" /* FormControlDirective */], [[8, null], [8, null], [2, esm5_forms[\"i\" /* NG_VALUE_ACCESSOR */]]], { form: [0, \"form\"] }, null), core[\"ɵprd\"](2048, null, esm5_forms[\"j\" /* NgControl */], null, [esm5_forms[\"f\" /* FormControlDirective */]]), core[\"ɵdid\"](16, 16384, null, 0, esm5_forms[\"k\" /* NgControlStatus */], [esm5_forms[\"j\" /* NgControl */]], null, null), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵeld\"](20, 0, null, null, 21, \"tr\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](22, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"name\"]], null, null, null, sortable_header_directive_ngfactory[\"b\" /* View_SortableHeaderComponent_0 */], sortable_header_directive_ngfactory[\"a\" /* RenderType_SortableHeaderComponent */])), core[\"ɵdid\"](23, 49152, null, 0, sortable_header_directive[\"a\" /* SortableHeaderComponent */], [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), core[\"ɵted\"](-1, 0, [\"Name\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](26, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"Image\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](29, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"network.name\"]], null, null, null, sortable_header_directive_ngfactory[\"b\" /* View_SortableHeaderComponent_0 */], sortable_header_directive_ngfactory[\"a\" /* RenderType_SortableHeaderComponent */])), core[\"ɵdid\"](30, 49152, null, 0, sortable_header_directive[\"a\" /* SortableHeaderComponent */], [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), core[\"ɵted\"](-1, 0, [\"Network\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](33, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"Summary\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](36, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"status\"]], null, null, null, sortable_header_directive_ngfactory[\"b\" /* View_SortableHeaderComponent_0 */], sortable_header_directive_ngfactory[\"a\" /* RenderType_SortableHeaderComponent */])), core[\"ɵdid\"](37, 49152, null, 0, sortable_header_directive[\"a\" /* SortableHeaderComponent */], [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), core[\"ɵted\"](-1, 0, [\"Status\"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n          \"])), (_l()(), core[\"ɵeld\"](40, 0, null, null, 0, \"th\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), core[\"ɵeld\"](44, 0, null, null, 5, \"tbody\", [], null, null, null, null, null)), (_l()(), core[\"ɵted\"](-1, null, [\"\\n        \"])), (_l()(), core[\"ɵand\"](16777216, null, null, 2, null, View_ShowListComponent_1)), core[\"ɵdid\"](47, 802816, null, 0, common[\"k\" /* NgForOf */], [core[\"ViewContainerRef\"], core[\"TemplateRef\"], core[\"IterableDiffers\"]], { ngForOf: [0, \"ngForOf\"] }, null), core[\"ɵppd\"](48, 3), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), core[\"ɵand\"](16777216, null, null, 1, null, View_ShowListComponent_2)), core[\"ɵdid\"](52, 16384, null, 0, common[\"l\" /* NgIf */], [core[\"ViewContainerRef\"], core[\"TemplateRef\"]], { ngIf: [0, \"ngIf\"] }, null), (_l()(), core[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), core[\"ɵted\"](-1, null, [\"\\n  \"]))], function (_ck, _v) { var _co = _v.component; var currVal_8 = _co.searchTextControl; _ck(_v, 14, 0, currVal_8); var currVal_9 = \"name\"; var currVal_10 = _co.sort; _ck(_v, 23, 0, currVal_9, currVal_10); var currVal_11 = \"network.name\"; var currVal_12 = _co.sort; _ck(_v, 30, 0, currVal_11, currVal_12); var currVal_13 = \"status\"; var currVal_14 = _co.sort; _ck(_v, 37, 0, currVal_13, currVal_14); var currVal_15 = core[\"ɵunv\"](_v, 47, 0, _ck(_v, 48, 0, core[\"ɵnov\"](_v, 0), _co.filteredShowsList, _co.sort.field, _co.sort.direction)); _ck(_v, 47, 0, currVal_15); var currVal_16 = ((_co.filteredShowsList.length === 0) && _co.searchTextControl.value); _ck(_v, 52, 0, currVal_16); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = (!_co.shows || (_co.shows.length === 0)); _ck(_v, 3, 0, currVal_0); var currVal_1 = core[\"ɵnov\"](_v, 16).ngClassUntouched; var currVal_2 = core[\"ɵnov\"](_v, 16).ngClassTouched; var currVal_3 = core[\"ɵnov\"](_v, 16).ngClassPristine; var currVal_4 = core[\"ɵnov\"](_v, 16).ngClassDirty; var currVal_5 = core[\"ɵnov\"](_v, 16).ngClassValid; var currVal_6 = core[\"ɵnov\"](_v, 16).ngClassInvalid; var currVal_7 = core[\"ɵnov\"](_v, 16).ngClassPending; _ck(_v, 11, 0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7); }); }\nfunction View_ShowListComponent_Host_0(_l) { return core[\"ɵvid\"](0, [(_l()(), core[\"ɵeld\"](0, 0, null, null, 1, \"mwl-show-list\", [], null, null, null, View_ShowListComponent_0, RenderType_ShowListComponent)), core[\"ɵdid\"](1, 770048, null, 0, show_list_component[\"a\" /* ShowListComponent */], [local_storage_provider[\"a\" /* LocalStorage */]], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar ShowListComponentNgFactory = core[\"ɵccf\"](\"mwl-show-list\", show_list_component[\"a\" /* ShowListComponent */], View_ShowListComponent_Host_0, { shows: \"shows\" }, { unsubscribe: \"unsubscribe\" }, []);\n\n//# sourceMappingURL=show-list.component.ngfactory.js.map\n\n/***/ }),\n\n/***/ 200:\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n\n/***/ 201:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ForkJoinObservable_1 = __webpack_require__(219);\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map\n\n/***/ }),\n\n/***/ 202:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RenderType_SortableHeaderComponent; });\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = View_SortableHeaderComponent_0;\n/* unused harmony export View_SortableHeaderComponent_Host_0 */\n/* unused harmony export SortableHeaderComponentNgFactory */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sortable_header_directive__ = __webpack_require__(192);\n/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \n\n\nvar styles_SortableHeaderComponent = [\"div[_ngcontent-%COMP%] {\\n      cursor: pointer;\\n      width: 80px;\\n    }\"];\nvar RenderType_SortableHeaderComponent = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵcrt\"]({ encapsulation: 0, styles: styles_SortableHeaderComponent, data: {} });\n\nfunction View_SortableHeaderComponent_0(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](1, 0, null, null, 9, \"div\", [], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.headerClicked() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](3, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](5, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort-asc\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](7, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort-desc\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n      \"])), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵncd\"](null, 0), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n    \"])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵted\"](-1, null, [\"\\n  \"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.sort.field === _co.fieldName); _ck(_v, 3, 0, currVal_0); var currVal_1 = ((_co.sort.field !== _co.fieldName) || (_co.sort.direction === _co.OrderByDirection.Desc)); _ck(_v, 5, 0, currVal_1); var currVal_2 = ((_co.sort.field !== _co.fieldName) || (_co.sort.direction === _co.OrderByDirection.Asc)); _ck(_v, 7, 0, currVal_2); }); }\nfunction View_SortableHeaderComponent_Host_0(_l) { return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵvid\"](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵeld\"](0, 0, null, null, 1, \"th\", [[\"mwlSortableHeader\", \"\"]], null, null, null, View_SortableHeaderComponent_0, RenderType_SortableHeaderComponent)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵdid\"](1, 49152, null, 0, __WEBPACK_IMPORTED_MODULE_1__sortable_header_directive__[\"a\" /* SortableHeaderComponent */], [], { fieldName: [0, \"fieldName\"] }, null)], function (_ck, _v) { var currVal_0 = \"\"; _ck(_v, 1, 0, currVal_0); }, null); }\nvar SortableHeaderComponentNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"ɵccf\"](\"th[mwlSortableHeader]\", __WEBPACK_IMPORTED_MODULE_1__sortable_header_directive__[\"a\" /* SortableHeaderComponent */], View_SortableHeaderComponent_Host_0, { fieldName: \"mwlSortableHeader\", sort: \"sort\" }, {}, [\"*\"]);\n\n//# sourceMappingURL=sortable-header.directive.ngfactory.js.map\n\n/***/ }),\n\n/***/ 203:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__async_cache_module__ = __webpack_require__(187);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__drivers_local_storage_driver_provider__ = __webpack_require__(184);\n/* harmony namespace reexport (by used) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return __WEBPACK_IMPORTED_MODULE_1__drivers_local_storage_driver_provider__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__drivers_memory_driver_provider__ = __webpack_require__(181);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__async_cache_options_provider__ = __webpack_require__(180);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return __WEBPACK_IMPORTED_MODULE_3__async_cache_options_provider__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__async_cache_provider__ = __webpack_require__(178);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__cached_http_provider__ = __webpack_require__(185);\n/* unused harmony namespace reexport */\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n/***/ }),\n\n/***/ 218:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = orderBy;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28), __webpack_require__(200)(module)))\n\n/***/ }),\n\n/***/ 219:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = __webpack_require__(1);\nvar EmptyObservable_1 = __webpack_require__(30);\nvar isArray_1 = __webpack_require__(55);\nvar subscribeToResult_1 = __webpack_require__(53);\nvar OuterSubscriber_1 = __webpack_require__(54);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map\n\n/***/ }),\n\n/***/ 220:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))\n\n/***/ }),\n\n/***/ 221:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar fromPromise_1 = __webpack_require__(86);\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map\n\n/***/ }),\n\n/***/ 222:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar of_1 = __webpack_require__(56);\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map\n\n/***/ }),\n\n/***/ 223:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar merge_1 = __webpack_require__(83);\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map\n\n/***/ }),\n\n/***/ 224:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar map_1 = __webpack_require__(84);\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n/***/ }),\n\n/***/ 225:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Observable_1 = __webpack_require__(1);\nvar mergeMap_1 = __webpack_require__(90);\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n\n/***/ }),\n\n/***/ 226:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(227);\n\n\n/***/ }),\n\n/***/ 227:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _ponyfill = __webpack_require__(228);\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar root = undefined; /* global window */\n\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = (0, _ponyfill2.default)(root);\nexports.default = result;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(28)))\n\n/***/ }),\n\n/***/ 228:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0-9d7a8215c5da0d658d68.js","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LocalStorage {\n  getItem(key: string, defaultValue?: any): any {\n    if (localStorage.getItem(key)) {\n      return JSON.parse(localStorage.getItem(key) as string);\n    } else {\n      return defaultValue;\n    }\n  }\n\n  setItem(key: string, value: any): void {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(key);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/local-storage.provider.ts","/**\n * @license Angular v5.2.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { __assign, __extends } from 'tslib';\nimport { Directive, ElementRef, EventEmitter, Host, Inject, Injectable, InjectionToken, Injector, Input, NgModule, Optional, Output, Renderer2, Self, SkipSelf, Version, forwardRef, ɵisObservable, ɵisPromise, ɵlooseIdentical } from '@angular/core';\nimport { forkJoin } from 'rxjs/observable/forkJoin';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { map } from 'rxjs/operator/map';\nimport { ɵgetDOM } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base class for control directives.\n *\n * Only used internally in the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControlDirective = /** @class */ (function () {\n    function AbstractControlDirective() {\n    }\n    Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n        /** The value of the control. */\n        get: /**\n         * The value of the control.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.value : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.valid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.invalid : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pending : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.disabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.enabled : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n        /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         */\n        get: /**\n         * Returns any errors generated by failing validation. If there\n         * are no errors, it will return null.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.errors : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.pristine : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.dirty : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.touched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"status\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.control ? this.control.status : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return this.control ? this.control.untouched : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n        /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         */\n        get: /**\n         * Emits an event every time the validation status of the control\n         * is re-calculated.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.statusChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n        /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         */\n        get: /**\n         * Emits an event every time the value of the control changes, in\n         * the UI or programmatically.\n         * @return {?}\n         */\n        function () {\n            return this.control ? this.control.valueChanges : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n        /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         */\n        get: /**\n         * Returns an array that represents the path from the top-level form\n         * to this control. Each index is the string name of the control on\n         * that level.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {@link AbstractControl}.\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * For more information, see {\\@link AbstractControl}.\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        if (this.control)\n            this.control.reset(value);\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlDirective.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    };\n    return AbstractControlDirective;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A directive that contains multiple {\\@link NgControl}s.\n *\n * Only used by the forms module.\n *\n * \\@stable\n * @abstract\n */\nvar ControlContainer = /** @class */ (function (_super) {\n    __extends(ControlContainer, _super);\n    function ControlContainer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n        /**\n         * Get the form to which this container belongs.\n         */\n        get: /**\n         * Get the form to which this container belongs.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ControlContainer.prototype, \"path\", {\n        /**\n         * Get the path to this container.\n         */\n        get: /**\n         * Get the path to this container.\n         * @return {?}\n         */\n        function () { return null; },\n        enumerable: true,\n        configurable: true\n    });\n    return ControlContainer;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * Providers for validators to be used for {\\@link FormControl}s in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * ### Example\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n */\nvar NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * Providers for asynchronous validators to be used for {\\@link FormControl}s\n * in a form.\n *\n * Provide this using `multi: true` to add validators.\n *\n * See {\\@link NG_VALIDATORS} for more details.\n *\n * \\@stable\n */\nvar NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\nvar EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n/**\n * Provides a set of validators used by form controls.\n *\n * A validator is a function that processes a {\\@link FormControl} or collection of\n * controls and returns a map of errors. A null map means that validation has passed.\n *\n * ### Example\n *\n * ```typescript\n * var loginControl = new FormControl(\"\", Validators.required)\n * ```\n *\n * \\@stable\n */\nvar Validators = /** @class */ (function () {\n    function Validators() {\n    }\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     *`min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     */\n    /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    Validators.min = /**\n     * Validator that requires controls to have a value greater than a number.\n     * `min()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.min(3));`.\n     * @param {?} min\n     * @return {?}\n     */\n    function (min) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     */\n    /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    Validators.max = /**\n     * Validator that requires controls to have a value less than a number.\n     * `max()` exists only as a function, not as a directive. For example,\n     * `control = new FormControl('', Validators.max(15));`.\n     * @param {?} max\n     * @return {?}\n     */\n    function (max) {\n        return function (control) {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a non-empty value.\n     */\n    /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.required = /**\n     * Validator that requires controls to have a non-empty value.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    };\n    /**\n     * Validator that requires control value to be true.\n     */\n    /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.requiredTrue = /**\n     * Validator that requires control value to be true.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return control.value === true ? null : { 'required': true };\n    };\n    /**\n     * Validator that performs email validation.\n     */\n    /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    Validators.email = /**\n     * Validator that performs email validation.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    };\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    Validators.minLength = /**\n     * Validator that requires controls to have a value of a minimum length.\n     * @param {?} minLength\n     * @return {?}\n     */\n    function (minLength) {\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     */\n    /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    Validators.maxLength = /**\n     * Validator that requires controls to have a value of a maximum length.\n     * @param {?} maxLength\n     * @return {?}\n     */\n    function (maxLength) {\n        return function (control) {\n            var /** @type {?} */ length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        };\n    };\n    /**\n     * Validator that requires a control to match a regex to its value.\n     */\n    /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    Validators.pattern = /**\n     * Validator that requires a control to match a regex to its value.\n     * @param {?} pattern\n     * @return {?}\n     */\n    function (pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        var /** @type {?} */ regex;\n        var /** @type {?} */ regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return function (control) {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            var /** @type {?} */ value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        };\n    };\n    /**\n     * No-op validator.\n     */\n    /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    Validators.nullValidator = /**\n     * No-op validator.\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return null; };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.compose = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        };\n    };\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    Validators.composeAsync = /**\n     * @param {?} validators\n     * @return {?}\n     */\n    function (validators) {\n        if (!validators)\n            return null;\n        var /** @type {?} */ presentValidators = /** @type {?} */ (validators.filter(isPresent));\n        if (presentValidators.length == 0)\n            return null;\n        return function (control) {\n            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return map.call(forkJoin(observables), _mergeErrors);\n        };\n    };\n    return Validators;\n}());\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    var /** @type {?} */ obs = ɵisPromise(r) ? fromPromise(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(\"Expected validator to return Promise or Observable.\");\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map(function (v) { return v(control); });\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {\n        return errors != null ? __assign({}, /** @type {?} */ ((res)), errors) : /** @type {?} */ ((res));\n    }, {});\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `ControlValueAccessor` acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface if you want to create a custom form control directive\n * that integrates with Angular forms.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Used to provide a {\\@link ControlValueAccessor} for form controls.\n *\n * See {\\@link DefaultValueAccessor} for how to implement one.\n * \\@stable\n */\nvar NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),\n    multi: true,\n};\n/**\n * The accessor for writing a value and listening to changes on a checkbox input element.\n *\n *  ### Example\n *  ```\n *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar CheckboxControlValueAccessor = /** @class */ (function () {\n    function CheckboxControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    CheckboxControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    CheckboxControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                    providers: [CHECKBOX_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return CheckboxControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return DefaultValueAccessor; }),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    var /** @type {?} */ userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * Turn this mode on if you want form directives to buffer IME input until compositionend\n * \\@experimental\n */\nvar COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * The default accessor for writing a value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"text\" name=\"searchQuery\" ngModel>\n *  ```\n *\n *  \\@stable\n */\nvar DefaultValueAccessor = /** @class */ (function () {\n    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onChange = fn; };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._handleInput = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionStart = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { this._composing = true; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultValueAccessor.prototype._compositionEnd = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    };\n    DefaultValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                    // TODO: vsavkin replace the above selector with the one below it once\n                    // https://github.com/angular/angular/issues/3011 is implemented\n                    // selector: '[ngModel],[formControl],[formControlName]',\n                    host: {\n                        '(input)': '$any(this)._handleInput($event.target.value)',\n                        '(blur)': 'onTouched()',\n                        '(compositionstart)': '$any(this)._compositionStart()',\n                        '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                    },\n                    providers: [DEFAULT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    DefaultValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },\n    ]; };\n    return DefaultValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if ((/** @type {?} */ (validator)).validate) {\n        return function (c) { return (/** @type {?} */ (validator)).validate(c); };\n    }\n    else {\n        return /** @type {?} */ (validator);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NumberValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a number value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"number\" [(ngModel)]=\"age\">\n *  ```\n */\nvar NumberValueAccessor = /** @class */ (function () {\n    function NumberValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        var /** @type {?} */ normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    NumberValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    NumberValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [NUMBER_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    NumberValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return NumberValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * A base class that all control directive extend.\n * It binds a {\\@link FormControl} object to a DOM element.\n *\n * Used internally by Angular forms.\n *\n * \\@stable\n * @abstract\n */\nvar NgControl = /** @class */ (function (_super) {\n    __extends(NgControl, _super);\n    function NgControl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * \\@internal\n         */\n        _this._parent = null;\n        _this.name = null;\n        _this.valueAccessor = null;\n        /**\n         * \\@internal\n         */\n        _this._rawValidators = [];\n        /**\n         * \\@internal\n         */\n        _this._rawAsyncValidators = [];\n        return _this;\n    }\n    Object.defineProperty(NgControl.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (unimplemented()); },\n        enumerable: true,\n        configurable: true\n    });\n    return NgControl;\n}(AbstractControlDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RadioControlValueAccessor; }),\n    multi: true\n};\n/**\n * Internal class used by Angular to uncheck radio buttons with the matching name.\n */\nvar RadioControlRegistry = /** @class */ (function () {\n    function RadioControlRegistry() {\n        this._accessors = [];\n    }\n    /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.add = /**\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (control, accessor) {\n        this._accessors.push([control, accessor]);\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.remove = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    };\n    /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype.select = /**\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (accessor) {\n        var _this = this;\n        this._accessors.forEach(function (c) {\n            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        });\n    };\n    /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    RadioControlRegistry.prototype._isSameGroup = /**\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    function (controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    };\n    RadioControlRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    RadioControlRegistry.ctorParameters = function () { return []; };\n    return RadioControlRegistry;\n}());\n/**\n * \\@whatItDoes Writes radio control values and listens to radio control changes.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any radio control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use radio buttons with form directives\n *\n * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons\n * in the same group have the same `name` attribute.  Radio buttons with different `name`\n * attributes do not affect each other.\n *\n * {\\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}\n *\n * When using radio buttons in a reactive form, radio buttons in the same group should have the\n * same `formControlName`. You can also add a `name` attribute, but it's optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  \\@stable\n */\nvar RadioControlValueAccessor = /** @class */ (function () {\n    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        this.onChange = function () { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this._registry.remove(this); };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this._fn = fn;\n        this.onChange = function () {\n            fn(_this.value);\n            _this._registry.select(_this);\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.fireUncheck = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.writeValue(value); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    };\n    /**\n     * @return {?}\n     */\n    RadioControlValueAccessor.prototype._throwNameError = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n    };\n    RadioControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                    providers: [RADIO_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RadioControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n        { type: RadioControlRegistry, },\n        { type: Injector, },\n    ]; };\n    RadioControlValueAccessor.propDecorators = {\n        \"name\": [{ type: Input },],\n        \"formControlName\": [{ type: Input },],\n        \"value\": [{ type: Input },],\n    };\n    return RadioControlValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return RangeValueAccessor; }),\n    multi: true\n};\n/**\n * The accessor for writing a range value and listening to changes that is used by the\n * {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName} directives.\n *\n *  ### Example\n *  ```\n *  <input type=\"range\" [(ngModel)]=\"age\" >\n *  ```\n */\nvar RangeValueAccessor = /** @class */ (function () {\n    function RangeValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    RangeValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    RangeValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                    host: {\n                        '(change)': 'onChange($event.target.value)',\n                        '(input)': 'onChange($event.target.value)',\n                        '(blur)': 'onTouched()'\n                    },\n                    providers: [RANGE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    RangeValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    return RangeValueAccessor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@whatItDoes Writes values and listens to changes on a select element.\n *\n * Used by {\\@link NgModel}, {\\@link FormControlDirective}, and {\\@link FormControlName}\n * to keep the view synced with the {\\@link FormControl} model.\n *\n * \\@howToUse\n *\n * If you have imported the {\\@link FormsModule} or the {\\@link ReactiveFormsModule}, this\n * value accessor will be active on any select control that has a form directive. You do\n * **not** need to add a special selector to activate it.\n *\n * ### How to use select controls with form directives\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * If your option values are simple strings, you can bind to the normal `value` property\n * on the option.  If your option values happen to be objects (and you'd like to save the\n * selection in your form as an object), use `ngValue` instead:\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * In reactive forms, you'll also want to add your form directive (`formControlName` or\n * `formControl`) on the main `<select>` tag. Like in the former example, you have the\n * choice of binding to the  `value` or `ngValue` property on the select's options.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Caveat: Option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * Note: We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar SelectControlValueAccessor = /** @class */ (function () {\n    function SelectControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this.value = value;\n        var /** @type {?} */ id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        var /** @type {?} */ valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (valueString) {\n            _this.value = _this._getOptionValue(valueString);\n            fn(_this.value);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return (this._idCounter++).toString(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    };\n    SelectControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    SelectControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: Input },],\n    };\n    return SelectControlValueAccessor;\n}());\n/**\n * \\@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * \\@howToUse\n *\n * See docs for {\\@link SelectControlValueAccessor} for usage examples.\n *\n * \\@stable\n */\nvar NgSelectOption = /** @class */ (function () {\n    function NgSelectOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._select._optionMap.set(this.id, value);\n            this._setElementValue(_buildValueString(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._setElementValue(value);\n            if (this._select)\n                this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectOption.decorators = [\n        { type: Directive, args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectOption.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n    ]; };\n    NgSelectOption.propDecorators = {\n        \"ngValue\": [{ type: Input, args: ['ngValue',] },],\n        \"value\": [{ type: Input, args: ['value',] },],\n    };\n    return NgSelectOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return \"\" + value;\n    if (typeof value === 'string')\n        value = \"'\" + value + \"'\";\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return (id + \": \" + value).slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * The accessor for writing a value and listening to changes on a select element.\n *\n *  ### Caveat: Options selection\n *\n * Angular uses object identity to select options. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`\n * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects options by the return value of the function.\n *\n * #### Syntax\n *\n * ```\n * <select multiple [compareWith]=\"compareFn\"  [(ngModel)]=\"selectedCountries\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * \\@stable\n */\nvar SelectMultipleControlValueAccessor = /** @class */ (function () {\n    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        this.onChange = function (_) { };\n        this.onTouched = function () { };\n        this._compareWith = ɵlooseIdentical;\n    }\n    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, \"compareWith\", {\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (typeof fn !== 'function') {\n                throw new Error(\"compareWith must be a function, but received \" + JSON.stringify(fn));\n            }\n            this._compareWith = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        this.value = value;\n        var /** @type {?} */ optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };\n        }\n        else {\n            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.onChange = function (_) {\n            var /** @type {?} */ selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                var /** @type {?} */ options = _.selectedOptions;\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            else {\n                var /** @type {?} */ options = /** @type {?} */ (_.options);\n                for (var /** @type {?} */ i = 0; i < options.length; i++) {\n                    var /** @type {?} */ opt = options.item(i);\n                    if (opt.selected) {\n                        var /** @type {?} */ val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            _this.value = selected;\n            fn(selected);\n        };\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this.onTouched = fn; };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._registerOption = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var /** @type {?} */ id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionId = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {\n            var id = _a[_i];\n            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._getOptionValue = /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    function (valueString) {\n        var /** @type {?} */ id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? /** @type {?} */ ((this._optionMap.get(id)))._value : valueString;\n    };\n    SelectMultipleControlValueAccessor.decorators = [\n        { type: Directive, args: [{\n                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    SelectMultipleControlValueAccessor.ctorParameters = function () { return [\n        { type: Renderer2, },\n        { type: ElementRef, },\n    ]; };\n    SelectMultipleControlValueAccessor.propDecorators = {\n        \"compareWith\": [{ type: Input },],\n    };\n    return SelectMultipleControlValueAccessor;\n}());\n/**\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * ### Example\n *\n * ```\n * <select multiple name=\"city\" ngModel>\n *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n * </select>\n * ```\n */\nvar NgSelectMultipleOption = /** @class */ (function () {\n    function NgSelectMultipleOption(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select == null)\n                return;\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._select) {\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            }\n            else {\n                this._setElementValue(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setElementValue = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype._setSelected = /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    function (selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    };\n    /**\n     * @return {?}\n     */\n    NgSelectMultipleOption.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    };\n    NgSelectMultipleOption.decorators = [\n        { type: Directive, args: [{ selector: 'option' },] },\n    ];\n    /** @nocollapse */\n    NgSelectMultipleOption.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Renderer2, },\n        { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },\n    ]; };\n    NgSelectMultipleOption.propDecorators = {\n        \"ngValue\": [{ type: Input, args: ['ngValue',] },],\n        \"value\": [{ type: Input, args: ['value',] },],\n    };\n    return NgSelectMultipleOption;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return /** @type {?} */ ((parent.path)).concat([name]);\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */\n    ((dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if (/** @type {?} */ ((dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((/** @type {?} */ ((dir.valueAccessor)).setDisabledState))(isDisabled); });\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if ((/** @type {?} */ (validator)).registerOnValidatorChange)\n            /** @type {?} */ (((/** @type {?} */ (validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */\n    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });\n    dir._rawValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    dir._rawAsyncValidators.forEach(function (validator) {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    });\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnChange(function (newValue) {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    /** @type {?} */ ((dir.valueAccessor)).registerOnTouched(function () {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    dir.viewToModelUpdate(control._pendingValue);\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange(function (newValue, emitModelEvent) {\n        /** @type {?} */ ((\n        // control -> view\n        dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    });\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    var /** @type {?} */ messageEnd;\n    if (/** @type {?} */ ((dir.path)).length > 1) {\n        messageEnd = \"path: '\" + (/** @type {?} */ ((dir.path))).join(' -> ') + \"'\";\n    }\n    else if (/** @type {?} */ ((dir.path))[0]) {\n        messageEnd = \"name: '\" + dir.path + \"'\";\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(message + \" \" + messageEnd);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    var /** @type {?} */ change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\nvar BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach(function (dir) {\n        var /** @type {?} */ control = /** @type {?} */ (dir.control);\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    });\n}\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    var /** @type {?} */ defaultAccessor = undefined;\n    var /** @type {?} */ builtinAccessor = undefined;\n    var /** @type {?} */ customAccessor = undefined;\n    valueAccessors.forEach(function (v) {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    });\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    var /** @type {?} */ index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This is a base class for code shared between {\\@link NgModelGroup} and {\\@link FormGroupName}.\n *\n * \\@stable\n */\nvar AbstractFormGroupDirective = /** @class */ (function (_super) {\n    __extends(AbstractFormGroupDirective, _super);\n    function AbstractFormGroupDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormGroup(this);\n    };\n    /**\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    };\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n        /**\n         * Get the {@link FormGroup} backing this binding.\n         */\n        get: /**\n         * Get the {\\@link FormGroup} backing this binding.\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormGroup(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n        /**\n         * Get the path to this control group.\n         */\n        get: /**\n         * Get the path to this control group.\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n        /**\n         * Get the {@link Form} to which this group belongs.\n         */\n        get: /**\n         * Get the {\\@link Form} to which this group belongs.\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractFormGroupDirective.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    return AbstractFormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AbstractControlStatus = /** @class */ (function () {\n    function AbstractControlStatus(cd) {\n        this._cd = cd;\n    }\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.untouched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.touched : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pristine : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.dirty : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.valid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.invalid : false; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPending\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._cd.control ? this._cd.control.pending : false; },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractControlStatus;\n}());\nvar ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status. The following classes are applied as the properties\n * become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@stable\n */\nvar NgControlStatus = /** @class */ (function (_super) {\n    __extends(NgControlStatus, _super);\n    function NgControlStatus(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatus.decorators = [\n        { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n    ];\n    /** @nocollapse */\n    NgControlStatus.ctorParameters = function () { return [\n        { type: NgControl, decorators: [{ type: Self },] },\n    ]; };\n    return NgControlStatus;\n}(AbstractControlStatus));\n/**\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * \\@stable\n */\nvar NgControlStatusGroup = /** @class */ (function (_super) {\n    __extends(NgControlStatusGroup, _super);\n    function NgControlStatusGroup(cd) {\n        return _super.call(this, cd) || this;\n    }\n    NgControlStatusGroup.decorators = [\n        { type: Directive, args: [{\n                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                    host: ngControlStatusHost\n                },] },\n    ];\n    /** @nocollapse */\n    NgControlStatusGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Self },] },\n    ]; };\n    return NgControlStatusGroup;\n}(AbstractControlStatus));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nvar VALID = 'VALID';\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nvar INVALID = 'INVALID';\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nvar PENDING = 'PENDING';\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nvar DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!(path instanceof Array)) {\n        path = (/** @type {?} */ (path)).split(delimiter);\n    }\n    if (path instanceof Array && (path.length === 0))\n        return null;\n    return (/** @type {?} */ (path)).reduce(function (v, name) {\n        if (v instanceof FormGroup) {\n            return v.controls[name] || null;\n        }\n        if (v instanceof FormArray) {\n            return v.at(/** @type {?} */ (name)) || null;\n        }\n        return null;\n    }, control);\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    var /** @type {?} */ validator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).validators :\n        validatorOrOpts));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    var /** @type {?} */ origAsyncValidator = /** @type {?} */ ((isOptionsObj(validatorOrOpts) ? (/** @type {?} */ (validatorOrOpts)).asyncValidators :\n        asyncValidator));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * @record\n */\n\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * \\@whatItDoes This is the base class for {\\@link FormControl}, {\\@link FormGroup}, and\n * {\\@link FormArray}.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * \\@stable\n * @abstract\n */\nvar AbstractControl = /** @class */ (function () {\n    function AbstractControl(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = function () { };\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    Object.defineProperty(AbstractControl.prototype, \"parent\", {\n        /**\n         * The parent control.\n         */\n        get: /**\n         * The parent control.\n         * @return {?}\n         */\n        function () { return this._parent; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"valid\", {\n        /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         */\n        get: /**\n         * A control is `valid` when its `status === VALID`.\n         *\n         * In order to have this status, the control must have passed all its\n         * validation checks.\n         * @return {?}\n         */\n        function () { return this.status === VALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n        /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         */\n        get: /**\n         * A control is `invalid` when its `status === INVALID`.\n         *\n         * In order to have this status, the control must have failed\n         * at least one of its validation checks.\n         * @return {?}\n         */\n        function () { return this.status === INVALID; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"pending\", {\n        /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         */\n        get: /**\n         * A control is `pending` when its `status === PENDING`.\n         *\n         * In order to have this status, the control must be in the\n         * middle of conducting a validation check.\n         * @return {?}\n         */\n        function () { return this.status == PENDING; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n        /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         */\n        get: /**\n         * A control is `disabled` when its `status === DISABLED`.\n         *\n         * Disabled controls are exempt from validation checks and\n         * are not included in the aggregate value of their ancestor\n         * controls.\n         * @return {?}\n         */\n        function () { return this.status === DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n        /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         */\n        get: /**\n         * A control is `enabled` as long as its `status !== DISABLED`.\n         *\n         * In other words, it has a status of `VALID`, `INVALID`, or\n         * `PENDING`.\n         * @return {?}\n         */\n        function () { return this.status !== DISABLED; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n        /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         */\n        get: /**\n         * A control is `dirty` if the user has changed the value\n         * in the UI.\n         *\n         * Note that programmatic changes to a control's value will\n         * *not* mark it dirty.\n         * @return {?}\n         */\n        function () { return !this.pristine; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n        /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         */\n        get: /**\n         * A control is `untouched` if the user has not yet triggered\n         * a `blur` event on it.\n         * @return {?}\n         */\n        function () { return !this.touched; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AbstractControl.prototype, \"updateOn\", {\n        /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         */\n        get: /**\n         * Returns the update strategy of the `AbstractControl` (i.e.\n         * the event on which the control will update itself).\n         * Possible values: `'change'` (default) | `'blur'` | `'submit'`\n         * @return {?}\n         */\n        function () {\n            return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     */\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setValidators = /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this will overwrite any existing sync validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    };\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     */\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControl.prototype.setAsyncValidators = /**\n     * Sets the async validators that are active on this control. Calling this\n     * will overwrite any existing async validators.\n     * @param {?} newValidator\n     * @return {?}\n     */\n    function (newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    };\n    /**\n     * Empties out the sync validator list.\n     */\n    /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearValidators = /**\n     * Empties out the sync validator list.\n     * @return {?}\n     */\n    function () { this.validator = null; };\n    /**\n     * Empties out the async validator list.\n     */\n    /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    AbstractControl.prototype.clearAsyncValidators = /**\n     * Empties out the async validator list.\n     * @return {?}\n     */\n    function () { this.asyncValidator = null; };\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsTouched = /**\n     * Marks the control as `touched`.\n     *\n     * This will also mark all direct ancestors as `touched` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsUntouched = /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, it will also mark all children as `untouched`\n     * to maintain the model, and re-calculate the `touched` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     */\n    /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsDirty = /**\n     * Marks the control as `dirty`.\n     *\n     * This will also mark all direct ancestors as `dirty` to maintain\n     * the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    };\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     */\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPristine = /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, it will also mark all children as `pristine`\n     * to maintain the model, and re-calculate the `pristine` status of all parent\n     * controls.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /**\n     * Marks the control as `pending`.\n     */\n    /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.markAsPending = /**\n     * Marks the control as `pending`.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = PENDING;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    };\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     */\n    /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.disable = /**\n     * Disables the control. This means the control will be exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children will be disabled to maintain the model.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = DISABLED;\n        (/** @type {?} */ (this)).errors = null;\n        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });\n    };\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     */\n    /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.enable = /**\n     * Enables the control. This means the control will be included in validation checks and\n     * the aggregate value of its parent. Its status is re-calculated based on its value and\n     * its validators.\n     *\n     * If the control has children, all children will be enabled.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).status = VALID;\n        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(!!opts.onlySelf);\n        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });\n    };\n    /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    AbstractControl.prototype._updateAncestors = /**\n     * @param {?} onlySelf\n     * @return {?}\n     */\n    function (onlySelf) {\n        if (this._parent && !onlySelf) {\n            this._parent.updateValueAndValidity();\n            this._parent._updatePristine();\n            this._parent._updateTouched();\n        }\n    };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControl.prototype.setParent = /**\n     * @param {?} parent\n     * @return {?}\n     */\n    function (parent) { this._parent = parent; };\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     */\n    /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.updateValueAndValidity = /**\n     * Re-calculates the value and validation status of the control.\n     *\n     * By default, it will also update the value and validity of its ancestors.\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            (/** @type {?} */ (this)).errors = this._runValidator();\n            (/** @type {?} */ (this)).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            (/** @type {?} */ (this.valueChanges)).emit(this.value);\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTreeValidity = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = { emitEvent: true }; }\n        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._setInitialStatus = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).status = this._allControlsDisabled() ? DISABLED : VALID;\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._runValidator = /**\n     * @return {?}\n     */\n    function () {\n        return this.validator ? this.validator(this) : null;\n    };\n    /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._runAsyncValidator = /**\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        var _this = this;\n        if (this.asyncValidator) {\n            (/** @type {?} */ (this)).status = PENDING;\n            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._cancelExistingSubscription = /**\n     * @return {?}\n     */\n    function () {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     */\n    /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype.setErrors = /**\n     * Sets errors on a form control.\n     *\n     * This is used when validations are run manually by the user, rather than automatically.\n     *\n     * Calling `setErrors` will also update the validity of the parent control.\n     *\n     * ### Example\n     *\n     * ```\n     * const login = new FormControl(\"someLogin\");\n     * login.setErrors({\n     *   \"notUnique\": true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({\"notUnique\": true});\n     *\n     * login.setValue(\"someOtherLogin\");\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (errors, opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    };\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     */\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControl.prototype.get = /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * Paths can be passed in as an array or a string delimited by a dot.\n     *\n     * To get a control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) { return _find(this, path, '.'); };\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.getError = /**\n     * Returns error data if the control with the given path has the error specified. Otherwise\n     * returns null or undefined.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) {\n        var /** @type {?} */ control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    };\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     */\n    /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControl.prototype.hasError = /**\n     * Returns true if the control with the given path has the error specified. Otherwise\n     * returns false.\n     *\n     * If no path is given, it checks for the error on the present control.\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    function (errorCode, path) { return !!this.getError(errorCode, path); };\n    Object.defineProperty(AbstractControl.prototype, \"root\", {\n        /**\n         * Retrieves the top-level ancestor of this control.\n         */\n        get: /**\n         * Retrieves the top-level ancestor of this control.\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ x = this;\n            while (x._parent) {\n                x = x._parent;\n            }\n            return x;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    AbstractControl.prototype._updateControlsErrors = /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    function (emitEvent) {\n        (/** @type {?} */ (this)).status = this._calculateStatus();\n        if (emitEvent) {\n            (/** @type {?} */ (this.statusChanges)).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._initObservables = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this)).valueChanges = new EventEmitter();\n        (/** @type {?} */ (this)).statusChanges = new EventEmitter();\n    };\n    /**\n     * @return {?}\n     */\n    AbstractControl.prototype._calculateStatus = /**\n     * @return {?}\n     */\n    function () {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsHaveStatus = /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    function (status) {\n        return this._anyControls(function (control) { return control.status === status; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsDirty = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.dirty; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControlsTouched = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this._anyControls(function (control) { return control.touched; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updatePristine = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._updateTouched = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (opts === void 0) { opts = {}; }\n        (/** @type {?} */ (this)).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    AbstractControl.prototype._isBoxedValue = /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    AbstractControl.prototype._registerOnCollectionChange = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onCollectionChange = fn; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControl.prototype._setUpdateStrategy = /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    function (opts) {\n        if (isOptionsObj(opts) && (/** @type {?} */ (opts)).updateOn != null) {\n            this._updateOn = /** @type {?} */ (((/** @type {?} */ (opts)).updateOn));\n        }\n    };\n    return AbstractControl;\n}());\n/**\n * \\@whatItDoes Tracks the value and validation status of an individual form control.\n *\n * It is one of the three fundamental building blocks of Angular forms, along with\n * {\\@link FormGroup} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormControl}, you can pass in an initial value as the\n * first argument. Example:\n *\n * ```ts\n * const ctrl = new FormControl('some value');\n * console.log(ctrl.value);     // 'some value'\n * ```\n *\n * You can also initialize the control with a form state object on instantiation,\n * which includes both the value and whether or not the control is disabled.\n * You can't use the value key without the disabled key; both are required\n * to use this way of initialization.\n *\n * ```ts\n * const ctrl = new FormControl({value: 'n/a', disabled: true});\n * console.log(ctrl.value);     // 'n/a'\n * console.log(ctrl.status);   // 'DISABLED'\n * ```\n *\n * The second {\\@link FormControl} argument can accept one of three things:\n * * a sync validator function\n * * an array of sync validator functions\n * * an options object containing validator and/or async validator functions\n *\n * Example of a single sync validator function:\n *\n * ```ts\n * const ctrl = new FormControl('', Validators.required);\n * console.log(ctrl.value);     // ''\n * console.log(ctrl.status);   // 'INVALID'\n * ```\n *\n * Example using options object:\n *\n * ```ts\n * const ctrl = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * The options object can also be used to define when the control should update.\n * By default, the value and validity of a control updates whenever the value\n * changes. You can configure it to update on the blur event instead by setting\n * the `updateOn` option to `'blur'`.\n *\n * ```ts\n * const c = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * You can also set `updateOn` to `'submit'`, which will delay value and validity\n * updates until the parent form of the control fires a submit event.\n *\n * See its superclass, {\\@link AbstractControl}, for more properties and methods.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormControl = /** @class */ (function (_super) {\n    __extends(FormControl, _super);\n    function FormControl(formState, validatorOrOpts, asyncValidator) {\n        if (formState === void 0) { formState = null; }\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        /**\n         * \\@internal\n         */\n        _this._onChange = [];\n        _this._applyFormState(formState);\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        _this._initObservables();\n        return _this;\n    }\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     */\n    /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.setValue = /**\n     * Set the value of the form control to `value`.\n     *\n     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n     * and not its parent component. This defaults to false.\n     *\n     * If `emitEvent` is `true`, this\n     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n     * to true (as it falls through to `updateValueAndValidity`).\n     *\n     * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n     * specified.\n     *\n     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n     * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        (/** @type {?} */ (this)).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach(function (changeFn) { return changeFn(_this.value, options.emitViewToModelChange !== false); });\n        }\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     */\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.patchValue = /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (options === void 0) { options = {}; }\n        this.setValue(value, options);\n    };\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    FormControl.prototype.reset = /**\n     * Resets the form control. This means by default:\n     *\n     * * it is marked as `pristine`\n     * * it is marked as `untouched`\n     * * value is set to null\n     *\n     * You can also reset to a specific form state by passing through a standalone\n     * value or a form state object that contains both a value and a disabled state\n     * (these are the only two properties that cannot be calculated).\n     *\n     * Ex:\n     *\n     * ```ts\n     * this.control.reset('Nancy');\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * ```\n     *\n     * OR\n     *\n     * ```\n     * this.control.reset({value: 'Nancy', disabled: true});\n     *\n     * console.log(this.control.value);  // 'Nancy'\n     * console.log(this.control.status);  // 'DISABLED'\n     * ```\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    function (formState, options) {\n        if (formState === void 0) { formState = null; }\n        if (options === void 0) { options = {}; }\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormControl.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) { return false; };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { return this.disabled; };\n    /**\n     * Register a listener for change events.\n     */\n    /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnChange = /**\n     * Register a listener for change events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange.push(fn); };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._clearChangeFns = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = function () { };\n    };\n    /**\n     * Register a listener for disabled events.\n     */\n    /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    FormControl.prototype.registerOnDisabledChange = /**\n     * Register a listener for disabled events.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._onDisabledChange.push(fn);\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormControl.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) { };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormControl.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} formState\n     * @return {?}\n     */\n    FormControl.prototype._applyFormState = /**\n     * @param {?} formState\n     * @return {?}\n     */\n    function (formState) {\n        if (this._isBoxedValue(formState)) {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            (/** @type {?} */ (this)).value = this._pendingValue = formState;\n        }\n    };\n    return FormControl;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of a group of {\\@link FormControl}\n * instances.\n *\n * A `FormGroup` aggregates the values of each child {\\@link FormControl} into one object,\n * with each control name as the key.  It calculates its status by reducing the statuses\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormArray}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormGroup}, pass in a collection of child controls as the first\n * argument. The key for each child will be the name under which it is registered.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * You can also include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ### Example\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like {\\@link FormControl} instances, you can alternatively choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, {validators: passwordMatchValidator, asyncValidators: otherValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *    one: new FormControl()\n * }, {updateOn: 'blur'});\n * ```\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormGroup = /** @class */ (function (_super) {\n    __extends(FormGroup, _super);\n    function FormGroup(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {@link FormGroup#addControl addControl} instead.\n     */\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.registerControl = /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control, so for most cases you'll want\n     * to use {\\@link FormGroup#addControl addControl} instead.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    };\n    /**\n     * Add a control to this group.\n     */\n    /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.addControl = /**\n     * Add a control to this group.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Remove a control from this group.\n     */\n    /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype.removeControl = /**\n     * Remove a control from this group.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    FormGroup.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} name\n     * @param {?} control\n     * @return {?}\n     */\n    function (name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange(function () { });\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {@link AbstractControl#get get} instead.\n     */\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    FormGroup.prototype.contains = /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * It will return false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     * @param {?} controlName\n     * @return {?}\n     */\n    function (controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    };\n    /**\n     *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormGroup}. It accepts an object that matches\n     *  the structure of the group, with control names as keys.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.setValue({first: 'Nancy', last: 'Drew'});\n     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach(function (name) {\n            _this._throwIfControlMissing(name);\n            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormGroup}. It accepts an object with control\n     *  names as keys, and will do its best to match the values to the correct controls\n     *  in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const form = new FormGroup({\n     *     first: new FormControl(),\n     *     last: new FormControl()\n     *  });\n     *  console.log(form.value);   // {first: null, last: null}\n     *\n     *  form.patchValue({first: 'Nancy'});\n     *  console.log(form.value);   // {first: 'Nancy', last: null}\n     *\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        Object.keys(value).forEach(function (name) {\n            if (_this.controls[name]) {\n                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormGroup.prototype.reset = /**\n     * Resets the {\\@link FormGroup}. This means by default:\n     *\n     * * The group and all descendants are marked `pristine`\n     * * The group and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * can be a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.form.reset({first: 'name', last: 'last name'});\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = {}; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, name) {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the {@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     */\n    /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    FormGroup.prototype.getRawValue = /**\n     * The aggregate value of the {\\@link FormGroup}, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the group.\n     * @return {?}\n     */\n    function () {\n        return this._reduceChildren({}, function (acc, control, name) {\n            acc[name] = control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this._reduceChildren(false, function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        });\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    FormGroup.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.controls[name]) {\n            throw new Error(\"Cannot find form control with name: \" + name + \".\");\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormGroup.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var _this = this;\n        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) {\n            control.setParent(_this);\n            control._registerOnCollectionChange(_this._onCollectionChange);\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).value = this._reduceValue(); };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormGroup.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        var _this = this;\n        var /** @type {?} */ res = false;\n        this._forEachChild(function (control, name) {\n            res = res || (_this.contains(name) && condition(control));\n        });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._reduceValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this._reduceChildren({}, function (acc, control, name) {\n            if (control.enabled || _this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    FormGroup.prototype._reduceChildren = /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    function (initValue, fn) {\n        var /** @type {?} */ res = initValue;\n        this._forEachChild(function (control, name) { res = fn(res, control, name); });\n        return res;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroup.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n            var controlName = _a[_i];\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroup.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, name) {\n            if (value[name] === undefined) {\n                throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n            }\n        });\n    };\n    return FormGroup;\n}(AbstractControl));\n/**\n * \\@whatItDoes Tracks the value and validity state of an array of {\\@link FormControl},\n * {\\@link FormGroup} or {\\@link FormArray} instances.\n *\n * A `FormArray` aggregates the values of each child {\\@link FormControl} into an array.\n * It calculates its status by reducing the statuses of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {\\@link FormControl} and {\\@link FormGroup}.\n *\n * \\@howToUse\n *\n * When instantiating a {\\@link FormArray}, pass in an array of child controls as the first\n * argument.\n *\n * ### Example\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * You can also include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators can be passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * The options object can also be used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls will default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n * * **npm package**: `\\@angular/forms`\n *\n * \\@stable\n */\nvar FormArray = /** @class */ (function (_super) {\n    __extends(FormArray, _super);\n    function FormArray(controls, validatorOrOpts, asyncValidator) {\n        var _this = _super.call(this, coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts)) || this;\n        _this.controls = controls;\n        _this._initObservables();\n        _this._setUpdateStrategy(validatorOrOpts);\n        _this._setUpControls();\n        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        return _this;\n    }\n    /**\n     * Get the {@link AbstractControl} at the given `index` in the array.\n     */\n    /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.at = /**\n     * Get the {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) { return this.controls[index]; };\n    /**\n     * Insert a new {@link AbstractControl} at the end of the array.\n     */\n    /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.push = /**\n     * Insert a new {\\@link AbstractControl} at the end of the array.\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    /** Insert a new {@link AbstractControl} at the given `index` in the array. */\n    /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.insert = /**\n     * Insert a new {\\@link AbstractControl} at the given `index` in the array.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    };\n    /** Remove the control at the given `index` in the array. */\n    /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype.removeAt = /**\n     * Remove the control at the given `index` in the array.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    };\n    /**\n     * Replace an existing control.\n     */\n    /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype.setControl = /**\n     * Replace an existing control.\n     * @param {?} index\n     * @param {?} control\n     * @return {?}\n     */\n    function (index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange(function () { });\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    };\n    Object.defineProperty(FormArray.prototype, \"length\", {\n        /**\n         * Length of the control array.\n         */\n        get: /**\n         * Length of the control array.\n         * @return {?}\n         */\n        function () { return this.controls.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *  Sets the value of the {@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     */\n    /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.setValue = /**\n     *  Sets the value of the {\\@link FormArray}. It accepts an array that matches\n     *  the structure of the control.\n     *\n     * This method performs strict checks, so it will throw an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.setValue(['Nancy', 'Drew']);\n     *  console.log(arr.value);   // ['Nancy', 'Drew']\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        this._checkAllValuesPresent(value);\n        value.forEach(function (newValue, index) {\n            _this._throwIfControlMissing(index);\n            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     */\n    /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.patchValue = /**\n     *  Patches the value of the {\\@link FormArray}. It accepts an array that matches the\n     *  structure of the control, and will do its best to match the values to the correct\n     *  controls in the group.\n     *\n     *  It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     *  ### Example\n     *\n     *  ```\n     *  const arr = new FormArray([\n     *     new FormControl(),\n     *     new FormControl()\n     *  ]);\n     *  console.log(arr.value);   // [null, null]\n     *\n     *  arr.patchValue(['Nancy']);\n     *  console.log(arr.value);   // ['Nancy', null]\n     *  ```\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        value.forEach(function (newValue, index) {\n            if (_this.at(index)) {\n                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        });\n        this.updateValueAndValidity(options);\n    };\n    /**\n     * Resets the {@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     */\n    /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    FormArray.prototype.reset = /**\n     * Resets the {\\@link FormArray}. This means by default:\n     *\n     * * The array and all descendants are marked `pristine`\n     * * The array and all descendants are marked `untouched`\n     * * The value of all descendants will be null or null maps\n     *\n     * You can also reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state can be a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * ### Example\n     *\n     * ```ts\n     * this.arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * - OR -\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    function (value, options) {\n        if (value === void 0) { value = []; }\n        if (options === void 0) { options = {}; }\n        this._forEachChild(function (control, index) {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        });\n        this.updateValueAndValidity(options);\n        this._updatePristine(options);\n        this._updateTouched(options);\n    };\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     */\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    FormArray.prototype.getRawValue = /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * If you'd like to include all values regardless of disabled status, use this method.\n     * Otherwise, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    function () {\n        return this.controls.map(function (control) {\n            return control instanceof FormControl ? control.value : (/** @type {?} */ (control)).getRawValue();\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._syncPendingControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ subtreeUpdated = this.controls.reduce(function (updated, child) {\n            return child._syncPendingControls() ? true : updated;\n        }, false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    FormArray.prototype._throwIfControlMissing = /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (!this.controls.length) {\n            throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n        }\n        if (!this.at(index)) {\n            throw new Error(\"Cannot find form control at index \" + index);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    FormArray.prototype._forEachChild = /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        this.controls.forEach(function (control, index) { cb(control, index); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._updateValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        (/** @type {?} */ (this)).value =\n            this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    FormArray.prototype._anyControls = /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    function (condition) {\n        return this.controls.some(function (control) { return control.enabled && condition(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._setUpControls = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._forEachChild(function (control) { return _this._registerControl(control); });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    FormArray.prototype._checkAllValuesPresent = /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        this._forEachChild(function (control, i) {\n            if (value[i] === undefined) {\n                throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n            }\n        });\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormArray.prototype._allControlsDisabled = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n            var control = _a[_i];\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    };\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    FormArray.prototype._registerControl = /**\n     * @param {?} control\n     * @return {?}\n     */\n    function (control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    };\n    return FormArray;\n}(AbstractControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgForm; })\n};\nvar resolvedPromise = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a top-level {\\@link FormGroup} instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * \\@howToUse\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You can export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * {\\@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n * will give you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, you'll want to use {\\@link NgModel} with a\n * `name` attribute.  You can also use {\\@link NgModelGroup} if you'd like to create\n * sub-groups within the form.\n *\n * You can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * If you want to import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, you can add `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgForm = /** @class */ (function (_super) {\n    __extends(NgForm, _super);\n    function NgForm(validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this.submitted = false;\n        _this._directives = [];\n        _this.ngSubmit = new EventEmitter();\n        _this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () { this._setUpdateStrategy(); };\n    Object.defineProperty(NgForm.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForm.prototype, \"controls\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form.controls; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            (/** @type {?} */ (dir)).control = /** @type {?} */ (container.registerControl(dir.name, dir.control));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            _this._directives.push(dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(_this._directives, dir);\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            var /** @type {?} */ group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ container = _this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    NgForm.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var _this = this;\n        resolvedPromise.then(function () {\n            var /** @type {?} */ ctrl = /** @type {?} */ (_this.form.get(/** @type {?} */ ((dir.path))));\n            ctrl.setValue(value);\n        });\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgForm.prototype.setValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { this.control.setValue(value); };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    NgForm.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    NgForm.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /**\n     * @return {?}\n     */\n    NgForm.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    NgForm.prototype._findContainer = /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        path.pop();\n        return path.length ? /** @type {?} */ (this.form.get(path)) : this.form;\n    };\n    NgForm.decorators = [\n        { type: Directive, args: [{\n                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                    providers: [formDirectiveProvider],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    outputs: ['ngSubmit'],\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    NgForm.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgForm.propDecorators = {\n        \"options\": [{ type: Input, args: ['ngFormOptions',] },],\n    };\n    return NgForm;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar FormErrorExamples = {\n    formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n    formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n    formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; index as i\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n    ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n    ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TemplateDrivenErrors = /** @class */ (function () {\n    function TemplateDrivenErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + FormErrorExamples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + FormErrorExamples.ngModelWithFormGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.formGroupNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.missingNameException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDrivenErrors.modelGroupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + FormErrorExamples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + FormErrorExamples.ngModelGroup);\n    };\n    return TemplateDrivenErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return NgModelGroup; })\n};\n/**\n * \\@whatItDoes Creates and binds a {\\@link FormGroup} instance to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used as a child of {\\@link NgForm} (or in other words,\n * within `<form>` tags).\n *\n * Use this directive if you'd like to create a sub-group within a form. This can\n * come in handy if you want to validate a sub-group of your form separately from\n * the rest of your form, or if some values in your domain model make more sense to\n * consume together in a nested object.\n *\n * Pass in the name you'd like this sub-group to have and it will become the key\n * for the sub-group in the form's full value. You can also export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `FormsModule`\n *\n * \\@stable\n */\nvar NgModelGroup = /** @class */ (function (_super) {\n    __extends(NgModelGroup, _super);\n    function NgModelGroup(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgModelGroup.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    };\n    NgModelGroup.decorators = [\n        { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n    ];\n    /** @nocollapse */\n    NgModelGroup.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    NgModelGroup.propDecorators = {\n        \"name\": [{ type: Input, args: ['ngModelGroup',] },],\n    };\n    return NgModelGroup;\n}(AbstractFormGroupDirective));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return NgModel; })\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nvar resolvedPromise$1 = Promise.resolve(null);\n/**\n * \\@whatItDoes Creates a {\\@link FormControl} instance from a domain model and binds it\n * to a form control element.\n *\n * The {\\@link FormControl} instance will track the value, user interaction, and\n * validation status of the control and keep the view synced with the model. If used\n * within a parent form, the directive will also register itself with the form as a child\n * control.\n *\n * \\@howToUse\n *\n * This directive can be used by itself or as part of a larger form. All you need is the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional {\\@link Input}. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n * the domain model in your class as well.\n *\n * If you wish to inspect the properties of the associated {\\@link FormControl} (like\n * validity state), you can also export the directive into a local template variable using\n * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n * will fall through to the control anyway, so you can access them directly. You can see a\n * full list of properties directly available in {\\@link AbstractControlDirective}.\n *\n * The following is an example of a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * It's worth noting that in the context of a parent form, you often can skip one-way or\n * two-way binding because the parent form will sync the value for you. You can access\n * its properties by exporting it into a local template variable using `ngForm` (ex:\n * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * Take a look at an example of using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * To see `ngModel` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: `FormsModule`\n *\n *  \\@stable\n */\nvar NgModel = /** @class */ (function (_super) {\n    __extends(NgModel, _super);\n    function NgModel(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        _this._registered = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () { this.formDirective && this.formDirective.removeControl(this); };\n    Object.defineProperty(NgModel.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? controlPath(this.name, this._parent) : [this.name];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    NgModel.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpdateStrategy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._isStandalone = /**\n     * @return {?}\n     */\n    function () {\n        return !this._parent || !!(this.options && this.options.standalone);\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._setUpStandalone = /**\n     * @return {?}\n     */\n    function () {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkForErrors = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgModel.prototype._checkName = /**\n     * @return {?}\n     */\n    function () {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    NgModel.prototype._updateValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        var _this = this;\n        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    NgModel.prototype._updateDisabled = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;\n        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then(function () {\n            if (isDisabled && !_this.control.disabled) {\n                _this.control.disable();\n            }\n            else if (!isDisabled && _this.control.disabled) {\n                _this.control.enable();\n            }\n        });\n    };\n    NgModel.decorators = [\n        { type: Directive, args: [{\n                    selector: '[ngModel]:not([formControlName]):not([formControl])',\n                    providers: [formControlBinding],\n                    exportAs: 'ngModel'\n                },] },\n    ];\n    /** @nocollapse */\n    NgModel.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    NgModel.propDecorators = {\n        \"name\": [{ type: Input },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"options\": [{ type: Input, args: ['ngModelOptions',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n    };\n    return NgModel;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ReactiveErrors = /** @class */ (function () {\n    function ReactiveErrors() {\n    }\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.controlParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.ngModelGroupException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + FormErrorExamples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + FormErrorExamples.ngModelGroup);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.missingFormException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + FormErrorExamples.formControlName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.groupParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + FormErrorExamples.formGroupName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.arrayParentException = /**\n     * @return {?}\n     */\n    function () {\n        throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + FormErrorExamples.formArrayName);\n    };\n    /**\n     * @return {?}\n     */\n    ReactiveErrors.disabledAttrWarning = /**\n     * @return {?}\n     */\n    function () {\n        console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n    };\n    return ReactiveErrors;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlDirective; })\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n *\n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n *\n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n *  \\@stable\n */\nvar FormControlDirective = /** @class */ (function (_super) {\n    __extends(FormControlDirective, _super);\n    function FormControlDirective(validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this.update = new EventEmitter();\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n                /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    };\n    Object.defineProperty(FormControlDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._rawAsyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlDirective.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlDirective.prototype._isControlChanged = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        return changes.hasOwnProperty('form');\n    };\n    FormControlDirective.decorators = [\n        { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n    ];\n    /** @nocollapse */\n    FormControlDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlDirective.propDecorators = {\n        \"form\": [{ type: Input, args: ['formControl',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n    };\n    return FormControlDirective;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupDirective; })\n};\n/**\n * \\@whatItDoes Binds an existing {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive accepts an existing {\\@link FormGroup} instance. It will then use this\n * {\\@link FormGroup} instance to match any child {\\@link FormControl}, {\\@link FormGroup},\n * and {\\@link FormArray} instances to child {\\@link FormControlName}, {\\@link FormGroupName},\n * and {\\@link FormArrayName} directives.\n *\n * **Set value**: You can set the form's initial value when instantiating the\n * {\\@link FormGroup}, or you can set it programmatically later using the {\\@link FormGroup}'s\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}\n * methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n * to the {\\@link FormGroup}'s {\\@link AbstractControl#valueChanges valueChanges} event.  You can also\n * listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be notified when the\n * validation status is re-calculated.\n *\n * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event will be emitted with the original form\n * submission event.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormGroupDirective = /** @class */ (function (_super) {\n    __extends(FormGroupDirective, _super);\n    function FormGroupDirective(_validators, _asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._validators = _validators;\n        _this._asyncValidators = _asyncValidators;\n        _this.submitted = false;\n        _this.directives = [];\n        _this.form = /** @type {?} */ ((null));\n        _this.ngSubmit = new EventEmitter();\n        return _this;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormGroupDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    };\n    Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.form; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return []; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeControl = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { removeDir(this.directives, dir); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormGroup = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.addFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        var /** @type {?} */ ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.removeFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { };\n    /**\n     * @param {?} dir\n     * @return {?}\n     */\n    FormGroupDirective.prototype.getFormArray = /**\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) { return /** @type {?} */ (this.form.get(dir.path)); };\n    /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.updateModel = /**\n     * @param {?} dir\n     * @param {?} value\n     * @return {?}\n     */\n    function (dir, value) {\n        var /** @type {?} */ ctrl = /** @type {?} */ (this.form.get(dir.path));\n        ctrl.setValue(value);\n    };\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onSubmit = /**\n     * @param {?} $event\n     * @return {?}\n     */\n    function ($event) {\n        (/** @type {?} */ (this)).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype.onReset = /**\n     * @return {?}\n     */\n    function () { this.resetForm(); };\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    FormGroupDirective.prototype.resetForm = /**\n     * @param {?=} value\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = undefined; }\n        this.form.reset(value);\n        (/** @type {?} */ (this)).submitted = false;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateDomValue = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.directives.forEach(function (dir) {\n            var /** @type {?} */ newCtrl = _this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                (/** @type {?} */ (dir)).control = newCtrl;\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateRegistrations = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange(function () { });\n        this._oldForm = this.form;\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._updateValidators = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);\n        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);\n    };\n    /**\n     * @return {?}\n     */\n    FormGroupDirective.prototype._checkFormPresent = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    };\n    FormGroupDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: '[formGroup]',\n                    providers: [formDirectiveProvider$1],\n                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                    exportAs: 'ngForm'\n                },] },\n    ];\n    /** @nocollapse */\n    FormGroupDirective.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupDirective.propDecorators = {\n        \"form\": [{ type: Input, args: ['formGroup',] },],\n        \"ngSubmit\": [{ type: Output },],\n    };\n    return FormGroupDirective;\n}(ControlContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormGroupName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormGroup} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive can only be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormGroup} you want to link, and\n * will look for a {\\@link FormGroup} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form groups can come in handy when you want to validate a sub-group of a\n * form separately from the rest or when you'd like to group the values of certain\n * controls into their own nested object.\n *\n * **Access the group**: You can access the associated {\\@link FormGroup} using the\n * {\\@link AbstractControl#get get} method. Ex: `this.form.get('name')`.\n *\n * You can also access individual controls within the group using dot syntax.\n * Ex: `this.form.get('name.first')`\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormGroup}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormGroup}, or you can set it programmatically later using\n * {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the group, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormGroupName = /** @class */ (function (_super) {\n    __extends(FormGroupName, _super);\n    function FormGroupName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    FormGroupName.prototype._checkParentType = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    };\n    FormGroupName.decorators = [\n        { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormGroupName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormGroupName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formGroupName',] },],\n    };\n    return FormGroupName;\n}(AbstractFormGroupDirective));\nvar formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(function () { return FormArrayName; })\n};\n/**\n * \\@whatItDoes Syncs a nested {\\@link FormArray} to a DOM element.\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested {\\@link FormArray} you want to link, and\n * will look for a {\\@link FormArray} registered with that name in the parent\n * {\\@link FormGroup} instance you passed into {\\@link FormGroupDirective}.\n *\n * Nested form arrays can come in handy when you have a group of form controls but\n * you're not sure how many there will be. Form arrays allow you to create new\n * form controls dynamically.\n *\n * **Access the array**: You can access the associated {\\@link FormArray} using the\n * {\\@link AbstractControl#get get} method on the parent {\\@link FormGroup}.\n * Ex: `this.form.get('cities')`.\n *\n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormArray}. See a full list of available properties in {\\@link AbstractControl}.\n *\n * **Set the value**: You can set an initial value for each child control when instantiating\n * the {\\@link FormArray}, or you can set the value programmatically later using the\n * {\\@link FormArray}'s {\\@link AbstractControl#setValue setValue} or\n * {\\@link AbstractControl#patchValue patchValue} methods.\n *\n * **Listen to value**: If you want to listen to changes in the value of the array, you can\n * subscribe to the {\\@link FormArray}'s {\\@link AbstractControl#valueChanges valueChanges} event.\n * You can also listen to its {\\@link AbstractControl#statusChanges statusChanges} event to be\n * notified when the validation status is re-calculated.\n *\n * **Add new controls**: You can add new controls to the {\\@link FormArray} dynamically by calling\n * its {\\@link FormArray#push push} method.\n * Ex: `this.form.get('cities').push(new FormControl());`\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * * **npm package**: `\\@angular/forms`\n *\n * * **NgModule**: `ReactiveFormsModule`\n *\n * \\@stable\n */\nvar FormArrayName = /** @class */ (function (_super) {\n    __extends(FormArrayName, _super);\n    function FormArrayName(parent, validators, asyncValidators) {\n        var _this = _super.call(this) || this;\n        _this._parent = parent;\n        _this._validators = validators;\n        _this._asyncValidators = asyncValidators;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType(); /** @type {?} */\n        ((this.formDirective)).addFormArray(this);\n    };\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    };\n    Object.defineProperty(FormArrayName.prototype, \"control\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((this.formDirective)).getFormArray(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._parent ? /** @type {?} */ (this._parent.formDirective) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, this._parent); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._validators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return composeAsyncValidators(this._asyncValidators);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormArrayName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    };\n    FormArrayName.decorators = [\n        { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n    ];\n    /** @nocollapse */\n    FormArrayName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n    ]; };\n    FormArrayName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formArrayName',] },],\n    };\n    return FormArrayName;\n}(ControlContainer));\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(function () { return FormControlName; })\n};\n/**\n * \\@whatItDoes Syncs a {\\@link FormControl} in an existing {\\@link FormGroup} to a form control\n * element by name.\n *\n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n *\n * \\@howToUse\n *\n * This directive is designed to be used with a parent {\\@link FormGroupDirective} (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the {\\@link FormControl} instance you want to\n * link, and will look for a {\\@link FormControl} registered with that name in the\n * closest {\\@link FormGroup} or {\\@link FormArray} above it.\n *\n * **Access the control**: You can access the {\\@link FormControl} associated with\n * this directive by using the {\\@link AbstractControl#get get} method.\n * Ex: `this.form.get('first');`\n *\n * **Get value**: the `value` property is always synced and available on the {\\@link FormControl}.\n * See a full list of available properties in {\\@link AbstractControl}.\n *\n *  **Set value**: You can set an initial value for the control when instantiating the\n *  {\\@link FormControl}, or you can set it programmatically later using\n *  {\\@link AbstractControl#setValue setValue} or {\\@link AbstractControl#patchValue patchValue}.\n *\n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl#valueChanges valueChanges} event.  You can also listen to\n * {\\@link AbstractControl#statusChanges statusChanges} to be notified when the validation status is\n * re-calculated.\n *\n * ### Example\n *\n * In this example, we create form controls for first name and last name.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: {\\@link RadioControlValueAccessor}\n * * Selects: {\\@link SelectControlValueAccessor}\n *\n * **npm package**: `\\@angular/forms`\n *\n * **NgModule**: {\\@link ReactiveFormsModule}\n *\n *  \\@stable\n */\nvar FormControlName = /** @class */ (function (_super) {\n    __extends(FormControlName, _super);\n    function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n        var _this = _super.call(this) || this;\n        _this._added = false;\n        _this.update = new EventEmitter();\n        _this._parent = parent;\n        _this._rawValidators = validators || [];\n        _this._rawAsyncValidators = asyncValidators || [];\n        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);\n        return _this;\n    }\n    Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n        set: /**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    };\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    FormControlName.prototype.viewToModelUpdate = /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    };\n    Object.defineProperty(FormControlName.prototype, \"path\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._parent ? this._parent.formDirective : null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"validator\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return composeValidators(this._rawValidators); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ ((composeAsyncValidators(this._rawAsyncValidators)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._checkParentType = /**\n     * @return {?}\n     */\n    function () {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FormControlName.prototype._setUpControl = /**\n     * @return {?}\n     */\n    function () {\n        this._checkParentType();\n        (/** @type {?} */ (this)).control = this.formDirective.addControl(this);\n        if (this.control.disabled && /** @type {?} */ ((this.valueAccessor)).setDisabledState) {\n            /** @type {?} */ ((/** @type {?} */ ((this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    };\n    FormControlName.decorators = [\n        { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n    ];\n    /** @nocollapse */\n    FormControlName.ctorParameters = function () { return [\n        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },\n    ]; };\n    FormControlName.propDecorators = {\n        \"name\": [{ type: Input, args: ['formControlName',] },],\n        \"model\": [{ type: Input, args: ['ngModel',] },],\n        \"update\": [{ type: Output, args: ['ngModelChange',] },],\n        \"isDisabled\": [{ type: Input, args: ['disabled',] },],\n    };\n    return FormControlName;\n}(NgControl));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface that can be implemented by classes that can act as validators.\n *\n * ## Usage\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[custom-validator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(c: Control): {[key: string]: any} {\n *     return {\"custom\": true};\n *   }\n * }\n * ```\n *\n * \\@stable\n * @record\n */\n\n/**\n * \\@experimental\n * @record\n */\n\nvar REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return RequiredValidator; }),\n    multi: true\n};\nvar CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `required` validator to any controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@stable\n */\nvar RequiredValidator = /** @class */ (function () {\n    function RequiredValidator() {\n    }\n    Object.defineProperty(RequiredValidator.prototype, \"required\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._required = value != null && value !== false && \"\" + value !== 'false';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    RequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.required(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    RequiredValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    RequiredValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                    providers: [REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    RequiredValidator.ctorParameters = function () { return []; };\n    RequiredValidator.propDecorators = {\n        \"required\": [{ type: Input },],\n    };\n    return RequiredValidator;\n}());\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@experimental\n */\nvar CheckboxRequiredValidator = /** @class */ (function (_super) {\n    __extends(CheckboxRequiredValidator, _super);\n    function CheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    CheckboxRequiredValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.required ? Validators.requiredTrue(c) : null;\n    };\n    CheckboxRequiredValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                    providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                    host: { '[attr.required]': 'required ? \"\" : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    CheckboxRequiredValidator.ctorParameters = function () { return []; };\n    return CheckboxRequiredValidator;\n}(RequiredValidator));\n/**\n * Provider which adds {\\@link EmailValidator} to {\\@link NG_VALIDATORS}.\n */\nvar EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return EmailValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `email` validator to controls marked with the\n * `email` attribute, via the {\\@link NG_VALIDATORS} binding.\n *\n * ### Example\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@experimental\n */\nvar EmailValidator = /** @class */ (function () {\n    function EmailValidator() {\n    }\n    Object.defineProperty(EmailValidator.prototype, \"email\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._enabled = value === '' || value === true || value === 'true';\n            if (this._onChange)\n                this._onChange();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    EmailValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this._enabled ? Validators.email(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    EmailValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    EmailValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                    providers: [EMAIL_VALIDATOR]\n                },] },\n    ];\n    /** @nocollapse */\n    EmailValidator.ctorParameters = function () { return []; };\n    EmailValidator.propDecorators = {\n        \"email\": [{ type: Input },],\n    };\n    return EmailValidator;\n}());\n/**\n * \\@stable\n * @record\n */\n\n/**\n * \\@stable\n * @record\n */\n\n/**\n * Provider which adds {\\@link MinLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='min'}\n */\nvar MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MinLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MinLengthValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n *\n * \\@stable\n */\nvar MinLengthValidator = /** @class */ (function () {\n    function MinLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MinLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MinLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.minlength == null ? null : this._validator(c);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MinLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MinLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.minLength(parseInt(this.minlength, 10));\n    };\n    MinLengthValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                    providers: [MIN_LENGTH_VALIDATOR],\n                    host: { '[attr.minlength]': 'minlength ? minlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MinLengthValidator.ctorParameters = function () { return []; };\n    MinLengthValidator.propDecorators = {\n        \"minlength\": [{ type: Input },],\n    };\n    return MinLengthValidator;\n}());\n/**\n * Provider which adds {\\@link MaxLengthValidator} to {\\@link NG_VALIDATORS}.\n *\n * ## Example:\n *\n * {\\@example common/forms/ts/validators/validators.ts region='max'}\n */\nvar MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MaxLengthValidator; }),\n    multi: true\n};\n/**\n * A directive which installs the {\\@link MaxLengthValidator} for any `formControlName,\n * `formControl`,\n * or control with `ngModel` that also has a `maxlength` attribute.\n *\n * \\@stable\n */\nvar MaxLengthValidator = /** @class */ (function () {\n    function MaxLengthValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) {\n        return this.maxlength != null ? this._validator(c) : null;\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MaxLengthValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    MaxLengthValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () {\n        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n    };\n    MaxLengthValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                    providers: [MAX_LENGTH_VALIDATOR],\n                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    MaxLengthValidator.ctorParameters = function () { return []; };\n    MaxLengthValidator.propDecorators = {\n        \"maxlength\": [{ type: Input },],\n    };\n    return MaxLengthValidator;\n}());\nvar PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return PatternValidator; }),\n    multi: true\n};\n/**\n * A Directive that adds the `pattern` validator to any controls marked with the\n * `pattern` attribute, via the {\\@link NG_VALIDATORS} binding. Uses attribute value\n * as the regex to validate Control value against.  Follows pattern attribute\n * semantics; i.e. regex must match entire Control value.\n *\n * ### Example\n *\n * ```\n * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n * ```\n * \\@stable\n */\nvar PatternValidator = /** @class */ (function () {\n    function PatternValidator() {\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PatternValidator.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    };\n    /**\n     * @param {?} c\n     * @return {?}\n     */\n    PatternValidator.prototype.validate = /**\n     * @param {?} c\n     * @return {?}\n     */\n    function (c) { return this._validator(c); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    PatternValidator.prototype.registerOnValidatorChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onChange = fn; };\n    /**\n     * @return {?}\n     */\n    PatternValidator.prototype._createValidator = /**\n     * @return {?}\n     */\n    function () { this._validator = Validators.pattern(this.pattern); };\n    PatternValidator.decorators = [\n        { type: Directive, args: [{\n                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                    providers: [PATTERN_VALIDATOR],\n                    host: { '[attr.pattern]': 'pattern ? pattern : null' }\n                },] },\n    ];\n    /** @nocollapse */\n    PatternValidator.ctorParameters = function () { return []; };\n    PatternValidator.propDecorators = {\n        \"pattern\": [{ type: Input },],\n    };\n    return PatternValidator;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Creates an {\\@link AbstractControl} from a user-specified configuration.\n *\n * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n * forms.\n *\n * \\@howToUse\n *\n * To use, inject `FormBuilder` into your component class. You can then call its methods\n * directly.\n *\n * {\\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n *\n *  * **npm package**: `\\@angular/forms`\n *\n *  * **NgModule**: {\\@link ReactiveFormsModule}\n *\n * \\@stable\n */\nvar FormBuilder = /** @class */ (function () {\n    function FormBuilder() {\n    }\n    /**\n     * Construct a new {@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {@link FormGroup} constructor for more details.\n     */\n    /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    FormBuilder.prototype.group = /**\n     * Construct a new {\\@link FormGroup} with the given map of configuration.\n     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n     *\n     * See the {\\@link FormGroup} constructor for more details.\n     * @param {?} controlsConfig\n     * @param {?=} extra\n     * @return {?}\n     */\n    function (controlsConfig, extra) {\n        if (extra === void 0) { extra = null; }\n        var /** @type {?} */ controls = this._reduceControls(controlsConfig);\n        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;\n        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;\n        return new FormGroup(controls, validator, asyncValidator);\n    };\n    /**\n     * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     */\n    /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.control = /**\n     * Construct a new {\\@link FormControl} with the given `formState`,`validator`, and\n     * `asyncValidator`.\n     *\n     * `formState` can either be a standalone value for the form control or an object\n     * that contains both a value and a disabled status.\n     *\n     * @param {?} formState\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (formState, validator, asyncValidator) {\n        return new FormControl(formState, validator, asyncValidator);\n    };\n    /**\n     * Construct a {@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     */\n    /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    FormBuilder.prototype.array = /**\n     * Construct a {\\@link FormArray} from the given `controlsConfig` array of\n     * configuration, with the given optional `validator` and `asyncValidator`.\n     * @param {?} controlsConfig\n     * @param {?=} validator\n     * @param {?=} asyncValidator\n     * @return {?}\n     */\n    function (controlsConfig, validator, asyncValidator) {\n        var _this = this;\n        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n        return new FormArray(controls, validator, asyncValidator);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._reduceControls = /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    function (controlsConfig) {\n        var _this = this;\n        var /** @type {?} */ controls = {};\n        Object.keys(controlsConfig).forEach(function (controlName) {\n            controls[controlName] = _this._createControl(controlsConfig[controlName]);\n        });\n        return controls;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    FormBuilder.prototype._createControl = /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    function (controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            var /** @type {?} */ value = controlConfig[0];\n            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    };\n    FormBuilder.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    FormBuilder.ctorParameters = function () { return []; };\n    return FormBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar VERSION = new Version('5.2.4');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@experimental\n */\nvar NgNoValidate = /** @class */ (function () {\n    function NgNoValidate() {\n    }\n    NgNoValidate.decorators = [\n        { type: Directive, args: [{\n                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                    host: { 'novalidate': '' },\n                },] },\n    ];\n    /** @nocollapse */\n    NgNoValidate.ctorParameters = function () { return []; };\n    return NgNoValidate;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar SHARED_FORM_DIRECTIVES = [\n    NgNoValidate,\n    NgSelectOption,\n    NgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\nvar TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\nvar REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nvar InternalFormsSharedModule = /** @class */ (function () {\n    function InternalFormsSharedModule() {\n    }\n    InternalFormsSharedModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: SHARED_FORM_DIRECTIVES,\n                    exports: SHARED_FORM_DIRECTIVES,\n                },] },\n    ];\n    /** @nocollapse */\n    InternalFormsSharedModule.ctorParameters = function () { return []; };\n    return InternalFormsSharedModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The ng module for forms.\n * \\@stable\n */\nvar FormsModule = /** @class */ (function () {\n    function FormsModule() {\n    }\n    FormsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                    providers: [RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    FormsModule.ctorParameters = function () { return []; };\n    return FormsModule;\n}());\n/**\n * The ng module for reactive forms.\n * \\@stable\n */\nvar ReactiveFormsModule = /** @class */ (function () {\n    function ReactiveFormsModule() {\n    }\n    ReactiveFormsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                    providers: [FormBuilder, RadioControlRegistry],\n                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                },] },\n    ];\n    /** @nocollapse */\n    ReactiveFormsModule.ctorParameters = function () { return []; };\n    return ReactiveFormsModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControlDirective, AbstractFormGroupDirective, CheckboxControlValueAccessor, ControlContainer, NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE, DefaultValueAccessor, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, RadioControlValueAccessor, FormControlDirective, FormControlName, FormGroupDirective, FormArrayName, FormGroupName, NgSelectOption, SelectControlValueAccessor, SelectMultipleControlValueAccessor, CheckboxRequiredValidator, EmailValidator, MaxLengthValidator, MinLengthValidator, PatternValidator, RequiredValidator, FormBuilder, AbstractControl, FormArray, FormControl, FormGroup, NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators, VERSION, FormsModule, ReactiveFormsModule, InternalFormsSharedModule as ɵba, REACTIVE_DRIVEN_DIRECTIVES as ɵz, SHARED_FORM_DIRECTIVES as ɵx, TEMPLATE_DRIVEN_DIRECTIVES as ɵy, CHECKBOX_VALUE_ACCESSOR as ɵa, DEFAULT_VALUE_ACCESSOR as ɵb, AbstractControlStatus as ɵc, ngControlStatusHost as ɵd, formDirectiveProvider as ɵe, formControlBinding as ɵf, modelGroupProvider as ɵg, NgNoValidate as ɵbf, NUMBER_VALUE_ACCESSOR as ɵbb, NumberValueAccessor as ɵbc, RADIO_VALUE_ACCESSOR as ɵh, RadioControlRegistry as ɵi, RANGE_VALUE_ACCESSOR as ɵbd, RangeValueAccessor as ɵbe, formControlBinding$1 as ɵj, controlNameBinding as ɵk, formDirectiveProvider$1 as ɵl, formArrayNameProvider as ɵn, formGroupNameProvider as ɵm, SELECT_VALUE_ACCESSOR as ɵo, NgSelectMultipleOption as ɵq, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵp, CHECKBOX_REQUIRED_VALIDATOR as ɵs, EMAIL_VALIDATOR as ɵt, MAX_LENGTH_VALIDATOR as ɵv, MIN_LENGTH_VALIDATOR as ɵu, PATTERN_VALIDATOR as ɵw, REQUIRED_VALIDATOR as ɵr };\n//# sourceMappingURL=forms.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/forms/esm5/forms.js\n// module id = 176\n// module chunks = 0","import { Injectable } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators/map';\nimport { CachedHttp } from 'angular-async-cache';\nimport { Show, Episode } from '../../interfaces';\n\n@Injectable()\nexport class TVMaze {\n  static BASE_URL = 'https://api.tvmaze.com/';\n\n  constructor(private http: CachedHttp) {}\n\n  search(query: string): Observable<Show[]> {\n    return this.http\n      .get(`${TVMaze.BASE_URL}search/shows`, {\n        params: new HttpParams().set('q', query)\n      })\n      .pipe(\n        map((shows: Array<{ show: Show }>) =>\n          shows.map((show: { show: Show }) => show.show)\n        )\n      );\n  }\n\n  getEpisodes(id: number): Observable<Episode[]> {\n    return this.http.get(`${TVMaze.BASE_URL}shows/${id}/episodes`);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/tv-maze.provider.ts","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromPromise';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport symbolObservable from 'symbol-observable';\nimport { AsyncCacheOptions } from './async-cache-options.provider';\nvar isPromise = function (fn) { return fn && typeof fn.then === 'function' && typeof fn.catch === 'function'; };\nvar isObservable = function (fn) { return fn && fn[symbolObservable]; };\nvar anyToObservable = function (fn) {\n    if (isObservable(fn)) {\n        return fn;\n    }\n    else if (isPromise(fn)) {\n        return Observable.fromPromise(fn);\n    }\n    else {\n        return Observable.of(fn);\n    }\n};\nvar AsyncCache = (function () {\n    function AsyncCache(defaults) {\n        this.defaults = defaults;\n    }\n    AsyncCache.prototype.wrap = function (value, cacheKey, userOptions) {\n        if (userOptions === void 0) { userOptions = {}; }\n        var getAsyncValue;\n        var options = Object.assign({}, this.defaults, userOptions);\n        if (isObservable(value)) {\n            getAsyncValue = value;\n        }\n        else if (typeof value === 'function') {\n            getAsyncValue = Observable.create(function (observer) {\n                var promise = value();\n                if (!isPromise(promise)) {\n                    return observer.error('The function you passed to the async cache didn\\'t return a promise');\n                }\n                promise.then(function (result) {\n                    observer.next(result);\n                    observer.complete();\n                }).catch(function (err) {\n                    observer.error(err);\n                });\n            });\n        }\n        else {\n            throw new Error('Value can only be an observable or a function that returns a promise');\n        }\n        return anyToObservable(options.driver.has(cacheKey)).flatMap(function (existsInCache) {\n            var cacheAndReturnAsyncValue = function () { return getAsyncValue.flatMap(function (value) {\n                return anyToObservable(options.driver.set(cacheKey, value)).map(function () { return value; });\n            }); };\n            if (existsInCache && !options.bypassCache) {\n                var getCachedValue = anyToObservable(options.driver.get(cacheKey));\n                if (options.fromCacheAndReplay) {\n                    return Observable.merge(getCachedValue, cacheAndReturnAsyncValue());\n                }\n                else {\n                    return getCachedValue;\n                }\n            }\n            else {\n                return cacheAndReturnAsyncValue();\n            }\n        });\n    };\n    AsyncCache.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    AsyncCache.ctorParameters = function () { return [\n        { type: AsyncCacheOptions, },\n    ]; };\n    return AsyncCache;\n}());\nexport { AsyncCache };\n//# sourceMappingURL=async-cache.provider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/async-cache.provider.js\n// module id = 178\n// module chunks = 0","// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nvar Positioning = (function () {\n    function Positioning() {\n    }\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\n    Positioning.prototype.isStaticPositioned = function (element) {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    };\n    Positioning.prototype.offsetParent = function (element) {\n        var offsetParentEl = element.offsetParent || document.documentElement;\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = offsetParentEl.offsetParent;\n        }\n        return offsetParentEl || document.documentElement;\n    };\n    Positioning.prototype.position = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elPosition;\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n        }\n        else {\n            var offsetParentEl = this.offsetParent(element);\n            elPosition = this.offset(element, false);\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n        return elPosition;\n    };\n    Positioning.prototype.offset = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elBcr = element.getBoundingClientRect();\n        var viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n        var elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n        return elOffset;\n    };\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        var targetElStyles = this.getAllStyles(targetElement);\n        var targetElBCR = targetElement.getBoundingClientRect();\n        var placementPrimary = placement.split('-')[0] || 'top';\n        var placementSecondary = placement.split('-')[1] || 'center';\n        var targetElPosition = {\n            'height': targetElBCR.height || targetElement.offsetHeight,\n            'width': targetElBCR.width || targetElement.offsetWidth,\n            'top': 0,\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\n            'left': 0,\n            'right': targetElBCR.width || targetElement.offsetWidth\n        };\n        switch (placementPrimary) {\n            case 'top':\n                targetElPosition.top =\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\n                break;\n            case 'left':\n                targetElPosition.left =\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\n                break;\n        }\n        switch (placementSecondary) {\n            case 'top':\n                targetElPosition.top = hostElPosition.top;\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                targetElPosition.left = hostElPosition.left;\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\n                }\n                else {\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\n                }\n                break;\n        }\n        targetElPosition.top = Math.round(targetElPosition.top);\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\n        targetElPosition.left = Math.round(targetElPosition.left);\n        targetElPosition.right = Math.round(targetElPosition.right);\n        return targetElPosition;\n    };\n    return Positioning;\n}());\nexport { Positioning };\nvar positionService = new Positioning();\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\n    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n    targetElement.style.top = pos.top + \"px\";\n    targetElement.style.left = pos.left + \"px\";\n}\n//# sourceMappingURL=positioning.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/positioning/dist/positioning.js\n// module id = 179\n// module chunks = 0","import { MemoryDriver } from './drivers/memory-driver.provider';\nvar AsyncCacheOptions = (function () {\n    function AsyncCacheOptions(overrides) {\n        if (overrides === void 0) { overrides = {}; }\n        this.driver = new MemoryDriver();\n        this.fromCacheAndReplay = false;\n        Object.assign(this, overrides);\n    }\n    return AsyncCacheOptions;\n}());\nexport { AsyncCacheOptions };\n//# sourceMappingURL=async-cache-options.provider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/async-cache-options.provider.js\n// module id = 180\n// module chunks = 0","var cacheKey = Symbol('cache key');\nvar MemoryDriver = (function () {\n    function MemoryDriver() {\n        this[cacheKey] = new Map();\n    }\n    MemoryDriver.prototype.has = function (key) {\n        return this[cacheKey].has(key);\n    };\n    MemoryDriver.prototype.get = function (key) {\n        return this[cacheKey].get(key);\n    };\n    MemoryDriver.prototype.set = function (key, value) {\n        return this[cacheKey].set(key, value);\n    };\n    MemoryDriver.prototype.delete = function (key) {\n        return this[cacheKey].delete(key);\n    };\n    MemoryDriver.prototype.clear = function () {\n        return this[cacheKey].clear();\n    };\n    MemoryDriver.prototype.keys = function () {\n        return Array.from(this[cacheKey].keys());\n    };\n    return MemoryDriver;\n}());\nexport { MemoryDriver };\n//# sourceMappingURL=memory-driver.provider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/drivers/memory-driver.provider.js\n// module id = 181\n// module chunks = 0","import * as tslib_1 from \"tslib\";\nimport { Injectable, Component, Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { Positioning } from 'positioning';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar ConfirmationPopoverOptions = /** @class */ (function () {\n    function ConfirmationPopoverOptions() {\n        this.confirmText = 'Confirm';\n        this.cancelText = 'Cancel';\n        this.confirmButtonType = 'success';\n        this.cancelButtonType = 'default';\n        this.placement = 'top';\n        this.hideConfirmButton = false;\n        this.hideCancelButton = false;\n        this.popoverClass = '';\n        this.appendToBody = false;\n        this.reverseButtonOrder = false;\n    }\n    return ConfirmationPopoverOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfirmationPopoverWindowOptions, _super);\n    function ConfirmationPopoverWindowOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ConfirmationPopoverWindowOptions;\n}(ConfirmationPopoverOptions));\nConfirmationPopoverWindowOptions.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConfirmationPopoverWindowOptions.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowComponent = /** @class */ (function () {\n    /**\n     * @param {?} options\n     */\n    function ConfirmationPopoverWindowComponent(options) {\n        this.options = options;\n    }\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {\n        this.options.onAfterViewInit();\n    };\n    return ConfirmationPopoverWindowComponent;\n}());\nConfirmationPopoverWindowComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-confirmation-popover-window',\n                styles: [\n                    \"\\n    .popover {\\n      display: block;\\n    }\\n    .bs-popover-top .arrow, .bs-popover-bottom .arrow {\\n      left: 50%;\\n    }\\n    .bs-popover-left .arrow, .bs-popover-right .arrow {\\n      top: 50%;\\n    }\\n    .btn {\\n      transition: none;\\n    }\\n    .confirm-btns {\\n      display: flex;\\n      justify-content: space-around;\\n    }\\n    .confirm-btn-container {\\n      flex-basis: 50%;\\n    }\\n    .confirm-btn-container:not(:first-child) {\\n      margin-left: 4px;\\n    }\\n    .confirm-btn-container:not(:last-child) {\\n      margin-right: 4px;\\n    }\\n    .confirm-btns-reversed {\\n      flex-direction: row-reverse;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:first-child) {\\n      margin-right: 4px;\\n      margin-left: 0;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:last-child) {\\n      margin-right: 0;\\n      margin-left: 4px;\\n    }\\n  \"\n                ],\n                template: \"\\n    <ng-template #defaultTemplate let-options=\\\"options\\\">\\n      <div [ngClass]=\\\"[\\n        'popover',\\n        options.placement,\\n        'popover-' + options.placement,\\n        'bs-popover-' + options.placement,\\n        options.popoverClass\\n      ]\\\">\\n        <div class=\\\"popover-arrow arrow\\\"></div>\\n        <h3 class=\\\"popover-title popover-header\\\" [innerHTML]=\\\"options.popoverTitle\\\"></h3>\\n        <div class=\\\"popover-content popover-body\\\">\\n          <p [innerHTML]=\\\"options.popoverMessage\\\"></p>\\n          <div class=\\\"confirm-btns\\\" [class.confirm-btns-reversed]=\\\"options.reverseButtonOrder\\\">\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideCancelButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'cancel'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.cancelButtonType\\\"\\n                (click)=\\\"options.onCancel({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.cancelText\\\">\\n              </button>\\n            </div>\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideConfirmButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'confirm'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.confirmButtonType\\\"\\n                (click)=\\\"options.onConfirm({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.confirmText\\\">\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"options.customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{options: options}\\\">\\n    </ng-template>\\n  \"\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverWindowComponent.ctorParameters = function () { return [\n    { type: ConfirmationPopoverWindowOptions, },\n]; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n * @record\n */\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [popoverTitle]=\"popoverTitle\"\n *  [popoverMessage]=\"popoverMessage\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\nvar ConfirmationPopoverDirective = /** @class */ (function () {\n    /**\n     * \\@internal\n     * @param {?} viewContainerRef\n     * @param {?} elm\n     * @param {?} defaultOptions\n     * @param {?} cfr\n     * @param {?} position\n     * @param {?} renderer\n     */\n    function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {\n        this.viewContainerRef = viewContainerRef;\n        this.elm = elm;\n        this.defaultOptions = defaultOptions;\n        this.cfr = cfr;\n        this.position = position;\n        this.renderer = renderer;\n        /**\n         * Whether to disable showing the popover. Default `false`.\n         */\n        this.isDisabled = false;\n        /**\n         * Will open or show the popover when changed.\n         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n         */\n        this.isOpen = false;\n        /**\n         * Will emit when the popover is opened or closed\n         */\n        this.isOpenChange = new EventEmitter(true);\n        /**\n         * An expression that is called when the confirm button is clicked.\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * An expression that is called when the cancel button is clicked.\n         */\n        this.cancel = new EventEmitter();\n        this.eventListeners = [];\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnInit = function () {\n        this.isOpenChange.emit(false);\n    };\n    /**\n     * \\@internal\n     * @param {?} changes\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"isOpen\"]) {\n            if (changes[\"isOpen\"].currentValue === true) {\n                this.showPopover();\n            }\n            else {\n                this.hidePopover();\n            }\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onConfirm = function (event) {\n        this.confirm.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onCancel = function (event) {\n        this.cancel.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.togglePopover = function () {\n        if (!this.popover) {\n            this.showPopover();\n        }\n        else {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {\n        if (this.popover &&\n            !this.elm.nativeElement.contains(event.target) &&\n            !this.popover.location.nativeElement.contains(event.target)) {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.showPopover = function () {\n        var _this = this;\n        if (!this.popover && !this.isDisabled) {\n            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n            // otherwise the document click event gets fired after the click event\n            // that triggered the popover to open (no idea why this is so)\n            setTimeout(function () {\n                _this.eventListeners = [\n                    _this.renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('window', 'resize', function () { return _this.positionPopover(); })\n                ];\n            });\n            var /** @type {?} */ options_1 = new ConfirmationPopoverWindowOptions();\n            Object.assign(options_1, this.defaultOptions, {\n                popoverTitle: this.popoverTitle,\n                popoverMessage: this.popoverMessage,\n                onConfirm: function (event) {\n                    _this.onConfirm(event);\n                },\n                onCancel: function (event) {\n                    _this.onCancel(event);\n                },\n                onAfterViewInit: function () {\n                    _this.positionPopover();\n                }\n            });\n            var /** @type {?} */ optionalParams = [\n                'confirmText',\n                'cancelText',\n                'placement',\n                'confirmButtonType',\n                'cancelButtonType',\n                'focusButton',\n                'hideConfirmButton',\n                'hideCancelButton',\n                'popoverClass',\n                'appendToBody',\n                'customTemplate',\n                'reverseButtonOrder'\n            ];\n            optionalParams.forEach(function (param) {\n                if (typeof _this[param] !== 'undefined') {\n                    ((options_1))[param] = _this[param];\n                }\n            });\n            var /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n            var /** @type {?} */ childInjector = Injector.create([\n                {\n                    provide: ConfirmationPopoverWindowOptions,\n                    useValue: options_1\n                }\n            ], this.viewContainerRef.parentInjector);\n            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n            if (options_1.appendToBody) {\n                document.body.appendChild(this.popover.location.nativeElement);\n            }\n            this.isOpenChange.emit(true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.positionPopover = function () {\n        if (this.popover) {\n            var /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];\n            var /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n            this.renderer.setStyle(popoverElement, 'top', popoverPosition.top + \"px\");\n            this.renderer.setStyle(popoverElement, 'left', popoverPosition.left + \"px\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.hidePopover = function () {\n        if (this.popover) {\n            this.popover.destroy();\n            delete this.popover;\n            this.isOpenChange.emit(false);\n            this.eventListeners.forEach(function (fn) { return fn(); });\n            this.eventListeners = [];\n        }\n    };\n    return ConfirmationPopoverDirective;\n}());\nConfirmationPopoverDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlConfirmationPopover]'\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverDirective.ctorParameters = function () { return [\n    { type: ViewContainerRef, },\n    { type: ElementRef, },\n    { type: ConfirmationPopoverOptions, },\n    { type: ComponentFactoryResolver, },\n    { type: Positioning, },\n    { type: Renderer2, },\n]; };\nConfirmationPopoverDirective.propDecorators = {\n    \"popoverTitle\": [{ type: Input },],\n    \"popoverMessage\": [{ type: Input },],\n    \"confirmText\": [{ type: Input },],\n    \"cancelText\": [{ type: Input },],\n    \"placement\": [{ type: Input },],\n    \"confirmButtonType\": [{ type: Input },],\n    \"cancelButtonType\": [{ type: Input },],\n    \"focusButton\": [{ type: Input },],\n    \"hideConfirmButton\": [{ type: Input },],\n    \"hideCancelButton\": [{ type: Input },],\n    \"isDisabled\": [{ type: Input },],\n    \"isOpen\": [{ type: Input },],\n    \"customTemplate\": [{ type: Input },],\n    \"isOpenChange\": [{ type: Output },],\n    \"confirm\": [{ type: Output },],\n    \"cancel\": [{ type: Output },],\n    \"popoverClass\": [{ type: Input },],\n    \"appendToBody\": [{ type: Input },],\n    \"reverseButtonOrder\": [{ type: Input },],\n    \"togglePopover\": [{ type: HostListener, args: ['click',] },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\nvar FocusDirective = /** @class */ (function () {\n    /**\n     * @param {?} elm\n     */\n    function FocusDirective(elm) {\n        this.elm = elm;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FocusDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"mwlFocus\"] && this.mwlFocus === true) {\n            this.elm.nativeElement.focus();\n        }\n    };\n    return FocusDirective;\n}());\nFocusDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlFocus]'\n            },] },\n];\n/** @nocollapse */\nFocusDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nFocusDirective.propDecorators = {\n    \"mwlFocus\": [{ type: Input },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar USER_OPTIONS = new InjectionToken('confirmation popover user options');\n/**\n * @param {?} userOptions\n * @return {?}\n */\nfunction optionsFactory(userOptions) {\n    var /** @type {?} */ options = new ConfirmationPopoverOptions();\n    Object.assign(options, userOptions);\n    return options;\n}\nvar ConfirmationPopoverModule = /** @class */ (function () {\n    function ConfirmationPopoverModule() {\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    ConfirmationPopoverModule.forRoot = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: ConfirmationPopoverModule,\n            providers: [\n                {\n                    provide: USER_OPTIONS,\n                    useValue: options\n                },\n                {\n                    provide: ConfirmationPopoverOptions,\n                    useFactory: optionsFactory,\n                    deps: [USER_OPTIONS]\n                },\n                Positioning\n            ]\n        };\n    };\n    return ConfirmationPopoverModule;\n}());\nConfirmationPopoverModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    ConfirmationPopoverDirective,\n                    ConfirmationPopoverWindowComponent,\n                    FocusDirective\n                ],\n                imports: [CommonModule],\n                exports: [ConfirmationPopoverDirective, FocusDirective],\n                entryComponents: [ConfirmationPopoverWindowComponent]\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverModule.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ConfirmationPopoverModule, ConfirmationPopoverOptions as ɵd, ConfirmationPopoverWindowOptions as ɵf, ConfirmationPopoverWindowComponent as ɵe, ConfirmationPopoverDirective as ɵc, USER_OPTIONS as ɵa, optionsFactory as ɵb, FocusDirective as ɵg };\n//# sourceMappingURL=angular-confirmation-popover.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-confirmation-popover/esm5/angular-confirmation-popover.js\n// module id = 182\n// module chunks = 0","/**\n * @license Angular v5.2.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Inject, Injectable, InjectionToken, Injector, NgModule, PLATFORM_ID } from '@angular/core';\nimport { of } from 'rxjs/observable/of';\nimport { concatMap } from 'rxjs/operator/concatMap';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { __extends } from 'tslib';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpHandler = /** @class */ (function () {\n    function HttpHandler() {\n    }\n    return HttpHandler;\n}());\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * \\@stable\n * @abstract\n */\nvar HttpBackend = /** @class */ (function () {\n    function HttpBackend() {\n    }\n    return HttpBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\n/**\n * Immutable set of Http headers, with lazy parsing.\n * \\@stable\n */\nvar HttpHeaders = /** @class */ (function () {\n    function HttpHeaders(headers) {\n        var _this = this;\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                headers.split('\\n').forEach(function (line) {\n                    var /** @type {?} */ index = line.indexOf(':');\n                    if (index > 0) {\n                        var /** @type {?} */ name_1 = line.slice(0, index);\n                        var /** @type {?} */ key = name_1.toLowerCase();\n                        var /** @type {?} */ value = line.slice(index + 1).trim();\n                        _this.maybeSetNormalizedName(name_1, key);\n                        if (_this.headers.has(key)) {\n                            /** @type {?} */ ((_this.headers.get(key))).push(value);\n                        }\n                        else {\n                            _this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = function () {\n                _this.headers = new Map();\n                Object.keys(headers).forEach(function (name) {\n                    var /** @type {?} */ values = headers[name];\n                    var /** @type {?} */ key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        _this.headers.set(key, values);\n                        _this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of header by given name.\n     */\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.has = /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    };\n    /**\n     * Returns first header that matches given name.\n     */\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.get = /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        var /** @type {?} */ values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Returns the names of the headers\n     */\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    HttpHeaders.prototype.keys = /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    };\n    /**\n     * Returns list of header values for a given name.\n     */\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    HttpHeaders.prototype.getAll = /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.append = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'a' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.set = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 's' });\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpHeaders.prototype.delete = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        return this.clone({ name: name, value: value, op: 'd' });\n    };\n    /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    HttpHeaders.prototype.maybeSetNormalizedName = /**\n     * @param {?} name\n     * @param {?} lcName\n     * @return {?}\n     */\n    function (name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    HttpHeaders.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(function (update) { return _this.applyUpdate(update); });\n                this.lazyUpdate = null;\n            }\n        }\n    };\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    HttpHeaders.prototype.copyFrom = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        var _this = this;\n        other.init();\n        Array.from(other.headers.keys()).forEach(function (key) {\n            _this.headers.set(key, /** @type {?} */ ((other.headers.get(key))));\n            _this.normalizedNames.set(key, /** @type {?} */ ((other.normalizedNames.get(key))));\n        });\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpHeaders.prototype.applyUpdate = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                var /** @type {?} */ value = /** @type {?} */ ((update.value));\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                var /** @type {?} */ base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push.apply(base, value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                var /** @type {?} */ toDelete_1 = /** @type {?} */ (update.value);\n                if (!toDelete_1) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    var /** @type {?} */ existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(function (value) { return toDelete_1.indexOf(value) === -1; });\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    HttpHeaders.prototype.forEach = /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        var _this = this;\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(function (key) { return fn(/** @type {?} */ ((_this.normalizedNames.get(key))), /** @type {?} */ ((_this.headers.get(key)))); });\n    };\n    return HttpHeaders;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * \\@stable\n *\n * @record\n */\n\n/**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * \\@stable\n */\nvar HttpUrlEncodingCodec = /** @class */ (function () {\n    function HttpUrlEncodingCodec() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.encodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return standardEncoding(v); };\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeKey = /**\n     * @param {?} k\n     * @return {?}\n     */\n    function (k) { return decodeURIComponent(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    HttpUrlEncodingCodec.prototype.decodeValue = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) { return decodeURIComponent(v); };\n    return HttpUrlEncodingCodec;\n}());\n/**\n * @param {?} rawParams\n * @param {?} codec\n * @return {?}\n */\nfunction paramParser(rawParams, codec) {\n    var /** @type {?} */ map$$1 = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map$$1.get(key) || [];\n            list.push(val);\n            map$$1.set(key, list);\n        });\n    }\n    return map$$1;\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Options used to construct an `HttpParams` instance.\n * @record\n */\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable - all mutation operations return a new instance.\n *\n * \\@stable\n */\nvar HttpParams = /** @class */ (function () {\n    function HttpParams(options) {\n        if (options === void 0) { options = /** @type {?} */ ({}); }\n        var _this = this;\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(\"Cannot specify both fromString and fromObject.\");\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(function (key) {\n                var /** @type {?} */ value = (/** @type {?} */ (options.fromObject))[key]; /** @type {?} */\n                ((_this.map)).set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     */\n    /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.has = /**\n     * Check whether the body has one or more values for the given parameter name.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).has(param);\n    };\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.get = /**\n     * Get the first value for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        var /** @type {?} */ res = /** @type {?} */ ((this.map)).get(param);\n        return !!res ? res[0] : null;\n    };\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     */\n    /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    HttpParams.prototype.getAll = /**\n     * Get all values for the given parameter name, or `null` if it's not present.\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) {\n        this.init();\n        return /** @type {?} */ ((this.map)).get(param) || null;\n    };\n    /**\n     * Get all the parameter names for this body.\n     */\n    /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    HttpParams.prototype.keys = /**\n     * Get all the parameter names for this body.\n     * @return {?}\n     */\n    function () {\n        this.init();\n        return Array.from(/** @type {?} */ ((this.map)).keys());\n    };\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     */\n    /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.append = /**\n     * Construct a new body with an appended value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'a' }); };\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     */\n    /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    HttpParams.prototype.set = /**\n     * Construct a new body with a new value for the given parameter name.\n     * @param {?} param\n     * @param {?} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 's' }); };\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     */\n    /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    HttpParams.prototype.delete = /**\n     * Construct a new body with either the given value for the given parameter\n     * removed, if a value is given, or all values for the given parameter removed\n     * if not.\n     * @param {?} param\n     * @param {?=} value\n     * @return {?}\n     */\n    function (param, value) { return this.clone({ param: param, value: value, op: 'd' }); };\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    HttpParams.prototype.toString = /**\n     * Serialize the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.init();\n        return this.keys()\n            .map(function (key) {\n            var /** @type {?} */ eKey = _this.encoder.encodeKey(key);\n            return /** @type {?} */ ((/** @type {?} */ ((_this.map)).get(key))).map(function (value) { return eKey + '=' + _this.encoder.encodeValue(value); }).join('&');\n        })\n            .join('&');\n    };\n    /**\n     * @param {?} update\n     * @return {?}\n     */\n    HttpParams.prototype.clone = /**\n     * @param {?} update\n     * @return {?}\n     */\n    function (update) {\n        var /** @type {?} */ clone = new HttpParams(/** @type {?} */ ({ encoder: this.encoder }));\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat([update]);\n        return clone;\n    };\n    /**\n     * @return {?}\n     */\n    HttpParams.prototype.init = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(function (key) { return ((_this.map)).set(key, /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((_this.cloneFrom)).map)).get(key)))); }); /** @type {?} */\n            ((this.updates)).forEach(function (update) {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        var /** @type {?} */ base = (update.op === 'a' ? /** @type {?} */ ((_this.map)).get(update.param) : undefined) || [];\n                        base.push(/** @type {?} */ ((update.value))); /** @type {?} */\n                        ((_this.map)).set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            var /** @type {?} */ base_1 = /** @type {?} */ ((_this.map)).get(update.param) || [];\n                            var /** @type {?} */ idx = base_1.indexOf(update.value);\n                            if (idx !== -1) {\n                                base_1.splice(idx, 1);\n                            }\n                            if (base_1.length > 0) {\n                                /** @type {?} */ ((_this.map)).set(update.param, base_1);\n                            }\n                            else {\n                                /** @type {?} */ ((_this.map)).delete(update.param);\n                            }\n                        }\n                        else {\n                            /** @type {?} */ ((_this.map)).delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = null;\n        }\n    };\n    return HttpParams;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n * @param {?} method\n * @return {?}\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n * @param {?} value\n * @return {?}\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * \\@stable\n */\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        var /** @type {?} */ options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? /** @type {?} */ (third) : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = /** @type {?} */ (third);\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            var /** @type {?} */ params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                var /** @type {?} */ qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                var /** @type {?} */ sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    HttpRequest.prototype.serializeBody = /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     * @return {?}\n     */\n    function () {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return (/** @type {?} */ (this.body)).toString();\n    };\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    HttpRequest.prototype.detectContentTypeHeader = /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     * @return {?}\n     */\n    function () {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    };\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpRequest.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        var /** @type {?} */ method = update.method || this.method;\n        var /** @type {?} */ url = update.url || this.url;\n        var /** @type {?} */ responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        var /** @type {?} */ body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        var /** @type {?} */ withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        var /** @type {?} */ reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        var /** @type {?} */ headers = update.headers || this.headers;\n        var /** @type {?} */ params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce(function (headers, name) { return headers.set(name, /** @type {?} */ ((update.setHeaders))[name]); }, headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce(function (params, param) { return params.set(param, /** @type {?} */ ((update.setParams))[param]); }, params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params: params, headers: headers, reportProgress: reportProgress, responseType: responseType, withCredentials: withCredentials,\n        });\n    };\n    return HttpRequest;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar HttpEventType = {\n    /**\n       * The request was sent out over the wire.\n       */\n    Sent: 0,\n    /**\n       * An upload progress event was received.\n       */\n    UploadProgress: 1,\n    /**\n       * The response status code and headers were received.\n       */\n    ResponseHeader: 2,\n    /**\n       * A download progress event was received.\n       */\n    DownloadProgress: 3,\n    /**\n       * The full response including the body was received.\n       */\n    Response: 4,\n    /**\n       * A custom event from an interceptor or a backend.\n       */\n    User: 5,\n};\nHttpEventType[HttpEventType.Sent] = \"Sent\";\nHttpEventType[HttpEventType.UploadProgress] = \"UploadProgress\";\nHttpEventType[HttpEventType.ResponseHeader] = \"ResponseHeader\";\nHttpEventType[HttpEventType.DownloadProgress] = \"DownloadProgress\";\nHttpEventType[HttpEventType.Response] = \"Response\";\nHttpEventType[HttpEventType.User] = \"User\";\n/**\n * Base interface for progress events.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A download progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An upload progress event.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * \\@stable\n * @record\n */\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * \\@stable\n * @record\n */\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n * \\@stable\n * @record\n */\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * \\@stable\n * @abstract\n */\nvar HttpResponseBase = /** @class */ (function () {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    function HttpResponseBase(init, defaultStatus, defaultStatusText) {\n        if (defaultStatus === void 0) { defaultStatus = 200; }\n        if (defaultStatusText === void 0) { defaultStatusText = 'OK'; }\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n    return HttpResponseBase;\n}());\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * \\@stable\n */\nvar HttpHeaderResponse = /** @class */ (function (_super) {\n    __extends(HttpHeaderResponse, _super);\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    function HttpHeaderResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.ResponseHeader;\n        return _this;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpHeaderResponse.prototype.clone = /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpHeaderResponse;\n}(HttpResponseBase));\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * \\@stable\n */\nvar HttpResponse = /** @class */ (function (_super) {\n    __extends(HttpResponse, _super);\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    function HttpResponse(init) {\n        if (init === void 0) { init = {}; }\n        var _this = _super.call(this, init) || this;\n        _this.type = HttpEventType.Response;\n        _this.body = init.body !== undefined ? init.body : null;\n        return _this;\n    }\n    /**\n     * @param {?=} update\n     * @return {?}\n     */\n    HttpResponse.prototype.clone = /**\n     * @param {?=} update\n     * @return {?}\n     */\n    function (update) {\n        if (update === void 0) { update = {}; }\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    };\n    return HttpResponse;\n}(HttpResponseBase));\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * \\@stable\n */\nvar HttpErrorResponse = /** @class */ (function (_super) {\n    __extends(HttpErrorResponse, _super);\n    function HttpErrorResponse(init) {\n        var _this = \n        // Initialize with a default status of 0 / Unknown Error.\n        _super.call(this, init, 0, 'Unknown Error') || this;\n        _this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        _this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (_this.status >= 200 && _this.status < 300) {\n            _this.message = \"Http failure during parsing for \" + (init.url || '(unknown url)');\n        }\n        else {\n            _this.message =\n                \"Http failure response for \" + (init.url || '(unknown url)') + \": \" + init.status + \" \" + init.statusText;\n        }\n        _this.error = init.error || null;\n        return _this;\n    }\n    return HttpErrorResponse;\n}(HttpResponseBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Construct an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. Basically, this clones the object and adds the body.\n * @template T\n * @param {?} options\n * @param {?} body\n * @return {?}\n */\nfunction addBody(options, body) {\n    return {\n        body: body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Perform HTTP requests.\n *\n * `HttpClient` is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies according to which\n * signature is called (mainly the values of `observe` and `responseType`).\n *\n * \\@stable\n */\nvar HttpClient = /** @class */ (function () {\n    function HttpClient(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     */\n    /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.request = /**\n     * Constructs an `Observable` for a particular HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * This method can be called in one of two ways. Either an `HttpRequest`\n     * instance can be passed directly as the only parameter, or a method can be\n     * passed as the first parameter, a string URL as the second, and an\n     * options hash as the third.\n     *\n     * If a `HttpRequest` object is passed directly, an `Observable` of the\n     * raw `HttpEvent` stream will be returned.\n     *\n     * If a request is instead built by providing a URL, the options object\n     * determines the return type of `request()`. In addition to configuring\n     * request parameters such as the outgoing headers and/or the body, the options\n     * hash specifies two key pieces of information about the request: the\n     * `responseType` and what to `observe`.\n     *\n     * The `responseType` value determines how a successful response body will be\n     * parsed. If `responseType` is the default `json`, a type interface for the\n     * resulting object may be passed as a type parameter to `request()`.\n     *\n     * The `observe` value determines the return type of `request()`, based on what\n     * the consumer is interested in observing. A value of `events` will return an\n     * `Observable<HttpEvent>` representing the raw `HttpEvent` stream,\n     * including progress events by default. A value of `response` will return an\n     * `Observable<HttpResponse<T>>` where the `T` parameter of `HttpResponse`\n     * depends on the `responseType` and any optionally provided type parameter.\n     * A value of `body` will return an `Observable<T>` with the same `T` body type.\n     * @param {?} first\n     * @param {?=} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (first, url, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var /** @type {?} */ req;\n        // Firstly, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = /** @type {?} */ (first);\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming GET unless a method is\n            // provided.\n            // Figure out the headers.\n            var /** @type {?} */ headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            var /** @type {?} */ params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams(/** @type {?} */ ({ fromObject: options.params }));\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, /** @type {?} */ ((url)), (options.body !== undefined ? options.body : null), {\n                headers: headers,\n                params: params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        var /** @type {?} */ events$ = concatMap.call(of(req), function (req) { return _this.handler.handle(req); });\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        var /** @type {?} */ res$ = filter.call(events$, function (event) { return event instanceof HttpResponse; });\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        });\n                    case 'blob':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        });\n                    case 'text':\n                        return map.call(res$, function (res) {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        });\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return map.call(res$, function (res) { return res.body; });\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(\"Unreachable: unhandled observe type \" + options.observe + \"}\");\n        }\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.delete = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * DELETE request to be executed on the server. See the individual overloads for\n     * details of `delete()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('DELETE', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.get = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * GET request to be executed on the server. See the individual overloads for\n     * details of `get()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('GET', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.head = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * HEAD request to be executed on the server. See the individual overloads for\n     * details of `head()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('HEAD', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    HttpClient.prototype.jsonp = /**\n     * Constructs an `Observable` which, when subscribed, will cause a request\n     * with the special method `JSONP` to be dispatched via the interceptor pipeline.\n     *\n     * A suitable interceptor must be installed (e.g. via the `HttpClientJsonpModule`).\n     * If no such interceptor is reached, then the `JSONP` request will likely be\n     * rejected by the configured backend.\n     * @template T\n     * @param {?} url\n     * @param {?} callbackParam\n     * @return {?}\n     */\n    function (url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.options = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * OPTIONS request to be executed on the server. See the individual overloads for\n     * details of `options()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('OPTIONS', url, /** @type {?} */ (options));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.patch = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * PATCH request to be executed on the server. See the individual overloads for\n     * details of `patch()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PATCH', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.post = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('POST', url, addBody(options, body));\n    };\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     */\n    /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClient.prototype.put = /**\n     * Constructs an `Observable` which, when subscribed, will cause the configured\n     * POST request to be executed on the server. See the individual overloads for\n     * details of `post()`'s return type based on the provided options.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        return this.request('PUT', url, addBody(options, body));\n    };\n    HttpClient.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpClient.ctorParameters = function () { return [\n        { type: HttpHandler, },\n    ]; };\n    return HttpClient;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Intercepts `HttpRequest` and handles them.\n *\n * Most interceptors will transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n *\n * In rare cases, interceptors may wish to completely handle a request themselves,\n * and not delegate to the remainder of the chain. This behavior is allowed.\n *\n * \\@stable\n * @record\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n * \\@stable\n */\nvar HttpInterceptorHandler = /** @class */ (function () {\n    function HttpInterceptorHandler(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptorHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        return this.interceptor.intercept(req, this.next);\n    };\n    return HttpInterceptorHandler;\n}());\n/**\n * A multi-provider token which represents the array of `HttpInterceptor`s that\n * are registered.\n *\n * \\@stable\n */\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nvar NoopInterceptor = /** @class */ (function () {\n    function NoopInterceptor() {\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    NoopInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        return next.handle(req);\n    };\n    NoopInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    NoopInterceptor.ctorParameters = function () { return []; };\n    return NoopInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nvar nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n * \\@stable\n * @abstract\n */\nvar JsonpCallbackContext = /** @class */ (function () {\n    function JsonpCallbackContext() {\n    }\n    return JsonpCallbackContext;\n}());\n/**\n * `HttpBackend` that only processes `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n *\n * \\@stable\n */\nvar JsonpClientBackend = /** @class */ (function () {\n    function JsonpClientBackend(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.nextCallback = /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     * @return {?}\n     */\n    function () { return \"ng_jsonp_callback_\" + nextRequestId++; };\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     */\n    /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    JsonpClientBackend.prototype.handle = /**\n     * Process a JSONP request and return an event stream of the results.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable(function (observer) {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            var /** @type {?} */ callback = _this.nextCallback();\n            var /** @type {?} */ url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\" + callback + \"$1\");\n            // Construct the <script> tag and point it at the URL.\n            var /** @type {?} */ node = _this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            var /** @type {?} */ body = null;\n            // Whether the response callback has been called.\n            var /** @type {?} */ finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            var /** @type {?} */ cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            _this.callbackMap[callback] = function (data) {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete _this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            var /** @type {?} */ cleanup = function () {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete _this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            var /** @type {?} */ onLoad = function (event) {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // Cleanup the page.\n                cleanup();\n                // Check whether the response callback has run.\n                if (!finished) {\n                    // It hasn't, something went wrong with the request. Return an error via\n                    // the Observable error path. All JSONP errors have status 0.\n                    observer.error(new HttpErrorResponse({\n                        url: url,\n                        status: 0,\n                        statusText: 'JSONP Error',\n                        error: new Error(JSONP_ERR_NO_CALLBACK),\n                    }));\n                    return;\n                }\n                // Success. body either contains the response body or null if none was\n                // returned.\n                observer.next(new HttpResponse({\n                    body: body,\n                    status: 200,\n                    statusText: 'OK', url: url,\n                }));\n                // Complete the stream, the resposne is over.\n                observer.complete();\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            var /** @type {?} */ onError = function (error) {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error: error,\n                    status: 0,\n                    statusText: 'JSONP Error', url: url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            _this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return function () {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    };\n    JsonpClientBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpClientBackend.ctorParameters = function () { return [\n        { type: JsonpCallbackContext, },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n    ]; };\n    return JsonpClientBackend;\n}());\n/**\n * An `HttpInterceptor` which identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * \\@stable\n */\nvar JsonpInterceptor = /** @class */ (function () {\n    function JsonpInterceptor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    JsonpInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(/** @type {?} */ (req));\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    };\n    JsonpInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    JsonpInterceptor.ctorParameters = function () { return [\n        { type: JsonpClientBackend, },\n    ]; };\n    return JsonpInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * \\@stable\n * @abstract\n */\nvar XhrFactory = /** @class */ (function () {\n    function XhrFactory() {\n    }\n    return XhrFactory;\n}());\n/**\n * A factory for \\@{link HttpXhrBackend} that uses the `XMLHttpRequest` browser API.\n *\n * \\@stable\n */\nvar BrowserXhr = /** @class */ (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((new XMLHttpRequest())); };\n    BrowserXhr.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    BrowserXhr.ctorParameters = function () { return []; };\n    return BrowserXhr;\n}());\n/**\n * An `HttpBackend` which uses the XMLHttpRequest API to send\n * requests to a backend server.\n *\n * \\@stable\n */\nvar HttpXhrBackend = /** @class */ (function () {\n    function HttpXhrBackend(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Process a request and return a stream of response events.\n     */\n    /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    HttpXhrBackend.prototype.handle = /**\n     * Process a request and return a stream of response events.\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        var _this = this;\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the JsonpClientModule\n        if (req.method === 'JSONP') {\n            throw new Error(\"Attempted to construct Jsonp request without JsonpClientModule installed.\");\n        }\n        // Everything happens on Observable subscription.\n        return new Observable(function (observer) {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            var /** @type {?} */ xhr = _this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach(function (name, values) { return xhr.setRequestHeader(name, values.join(',')); });\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                var /** @type {?} */ detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                var /** @type {?} */ responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = /** @type {?} */ (((responseType !== 'json') ? responseType : 'text'));\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            var /** @type {?} */ reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            var /** @type {?} */ headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            var /** @type {?} */ partialFromXhr = function () {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n                var /** @type {?} */ status = xhr.status === 1223 ? 204 : xhr.status;\n                var /** @type {?} */ statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                var /** @type {?} */ headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                var /** @type {?} */ url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers: headers, status: status, statusText: statusText, url: url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            var /** @type {?} */ onLoad = function () {\n                // Read response state from the memoized partial data.\n                var _a = partialFromXhr(), headers = _a.headers, status = _a.status, statusText = _a.statusText, url = _a.url;\n                // The body will be read out if present.\n                var /** @type {?} */ body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                var /** @type {?} */ ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    var /** @type {?} */ originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (/** @type {?} */ error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = /** @type {?} */ ({ error: error, text: body });\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers: headers,\n                        status: status,\n                        statusText: statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            var /** @type {?} */ onError = function (error) {\n                var /** @type {?} */ res = new HttpErrorResponse({\n                    error: error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            var /** @type {?} */ sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onDownProgress = function (event) {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                var /** @type {?} */ progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            var /** @type {?} */ onUpProgress = function (event) {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                var /** @type {?} */ progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return function () {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                xhr.abort();\n            };\n        });\n    };\n    HttpXhrBackend.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXhrBackend.ctorParameters = function () { return [\n        { type: XhrFactory, },\n    ]; };\n    return HttpXhrBackend;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * \\@stable\n * @abstract\n */\nvar HttpXsrfTokenExtractor = /** @class */ (function () {\n    function HttpXsrfTokenExtractor() {\n    }\n    return HttpXsrfTokenExtractor;\n}());\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nvar HttpXsrfCookieExtractor = /** @class */ (function () {\n    function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * \\@internal for testing\n         */\n        this.parseCount = 0;\n    }\n    /**\n     * @return {?}\n     */\n    HttpXsrfCookieExtractor.prototype.getToken = /**\n     * @return {?}\n     */\n    function () {\n        if (this.platform === 'server') {\n            return null;\n        }\n        var /** @type {?} */ cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    };\n    HttpXsrfCookieExtractor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfCookieExtractor.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] },] },\n    ]; };\n    return HttpXsrfCookieExtractor;\n}());\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nvar HttpXsrfInterceptor = /** @class */ (function () {\n    function HttpXsrfInterceptor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    HttpXsrfInterceptor.prototype.intercept = /**\n     * @param {?} req\n     * @param {?} next\n     * @return {?}\n     */\n    function (req, next) {\n        var /** @type {?} */ lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        var /** @type {?} */ token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    };\n    HttpXsrfInterceptor.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpXsrfInterceptor.ctorParameters = function () { return [\n        { type: HttpXsrfTokenExtractor, },\n        { type: undefined, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] },] },\n    ]; };\n    return HttpXsrfInterceptor;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n */\nvar HttpInterceptingHandler = /** @class */ (function () {\n    function HttpInterceptingHandler(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    HttpInterceptingHandler.prototype.handle = /**\n     * @param {?} req\n     * @return {?}\n     */\n    function (req) {\n        if (this.chain === null) {\n            var /** @type {?} */ interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, this.backend);\n        }\n        return this.chain.handle(req);\n    };\n    HttpInterceptingHandler.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    HttpInterceptingHandler.ctorParameters = function () { return [\n        { type: HttpBackend, },\n        { type: Injector, },\n    ]; };\n    return HttpInterceptingHandler;\n}());\n/**\n * Constructs an `HttpHandler` that applies a bunch of `HttpInterceptor`s\n * to a request before passing it to the given `HttpBackend`.\n *\n * Meant to be used as a factory function within `HttpClientModule`.\n *\n * \\@stable\n * @param {?} backend\n * @param {?=} interceptors\n * @return {?}\n */\nfunction interceptingHandler(backend, interceptors) {\n    if (interceptors === void 0) { interceptors = []; }\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight(function (next, interceptor) { return new HttpInterceptorHandler(next, interceptor); }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n * \\@stable\n * @return {?}\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * `NgModule` which adds XSRF protection support to outgoing requests.\n *\n * Provided the server supports a cookie-based XSRF protection system, this\n * module can be used directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no such names are provided, the default is to use `X-XSRF-TOKEN` for\n * the header name and `XSRF-TOKEN` for the cookie name.\n *\n * \\@stable\n */\nvar HttpClientXsrfModule = /** @class */ (function () {\n    function HttpClientXsrfModule() {\n    }\n    /**\n     * Disable the default XSRF protection.\n     */\n    /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    HttpClientXsrfModule.disable = /**\n     * Disable the default XSRF protection.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    };\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     */\n    /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    HttpClientXsrfModule.withOptions = /**\n     * Configure XSRF protection to use the given cookie name or header name,\n     * or the default names (as described above) if not provided.\n     * @param {?=} options\n     * @return {?}\n     */\n    function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    };\n    HttpClientXsrfModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientXsrfModule.ctorParameters = function () { return []; };\n    return HttpClientXsrfModule;\n}());\n/**\n * `NgModule` which provides the `HttpClient` and associated services.\n *\n * Interceptors can be added to the chain behind `HttpClient` by binding them\n * to the multiprovider for `HTTP_INTERCEPTORS`.\n *\n * \\@stable\n */\nvar HttpClientModule = /** @class */ (function () {\n    function HttpClientModule() {\n    }\n    HttpClientModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        HttpClientXsrfModule.withOptions({\n                            cookieName: 'XSRF-TOKEN',\n                            headerName: 'X-XSRF-TOKEN',\n                        }),\n                    ],\n                    providers: [\n                        HttpClient,\n                        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                        HttpXhrBackend,\n                        { provide: HttpBackend, useExisting: HttpXhrBackend },\n                        BrowserXhr,\n                        { provide: XhrFactory, useExisting: BrowserXhr },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientModule.ctorParameters = function () { return []; };\n    return HttpClientModule;\n}());\n/**\n * `NgModule` which enables JSONP support in `HttpClient`.\n *\n * Without this module, Jsonp requests will reach the backend\n * with method JSONP, where they'll be rejected.\n *\n * \\@stable\n */\nvar HttpClientJsonpModule = /** @class */ (function () {\n    function HttpClientJsonpModule() {\n    }\n    HttpClientJsonpModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [\n                        JsonpClientBackend,\n                        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    HttpClientJsonpModule.ctorParameters = function () { return []; };\n    return HttpClientJsonpModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpBackend, HttpHandler, HttpClient, HttpHeaders, HTTP_INTERCEPTORS, JsonpClientBackend, JsonpInterceptor, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, interceptingHandler as ɵinterceptingHandler, HttpParams, HttpUrlEncodingCodec, HttpRequest, HttpErrorResponse, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpXhrBackend, XhrFactory, HttpXsrfTokenExtractor, NoopInterceptor as ɵa, JsonpCallbackContext as ɵb, HttpInterceptingHandler as ɵc, jsonpCallbackContext as ɵd, BrowserXhr as ɵe, HttpXsrfCookieExtractor as ɵh, HttpXsrfInterceptor as ɵi, XSRF_COOKIE_NAME as ɵf, XSRF_HEADER_NAME as ɵg };\n//# sourceMappingURL=http.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/common/esm5/http.js\n// module id = 183\n// module chunks = 0","var DEFAULT_KEY_PREFIX = 'async-cache-';\nvar LocalStorageDriver = (function () {\n    function LocalStorageDriver(options) {\n        if (options === void 0) { options = { keyPrefix: DEFAULT_KEY_PREFIX }; }\n        this.options = options;\n    }\n    LocalStorageDriver.prototype.has = function (key) {\n        return localStorage.hasOwnProperty(this.getInternalKey(key));\n    };\n    LocalStorageDriver.prototype.get = function (key) {\n        return JSON.parse(localStorage.getItem(this.getInternalKey(key)));\n    };\n    LocalStorageDriver.prototype.set = function (key, value) {\n        return localStorage.setItem(this.getInternalKey(key), JSON.stringify(value));\n    };\n    LocalStorageDriver.prototype.delete = function (key) {\n        return localStorage.removeItem(this.getInternalKey(key));\n    };\n    LocalStorageDriver.prototype.clear = function () {\n        for (var _i = 0, _a = this.keys(); _i < _a.length; _i++) {\n            var key = _a[_i];\n            this.delete(key);\n        }\n        return;\n    };\n    LocalStorageDriver.prototype.keys = function () {\n        var _this = this;\n        var keys = [];\n        for (var i = 0; i < localStorage.length; i++) {\n            keys.push(localStorage.key(i));\n        }\n        return keys.filter(function (key) { return key.startsWith(_this.options.keyPrefix); }).map(function (key) { return _this.getExternalKey(key); });\n    };\n    LocalStorageDriver.prototype.getInternalKey = function (suffix) {\n        return \"\" + this.options.keyPrefix + suffix;\n    };\n    LocalStorageDriver.prototype.getExternalKey = function (key) {\n        return key.replace(new RegExp('^' + this.options.keyPrefix), '');\n    };\n    return LocalStorageDriver;\n}());\nexport { LocalStorageDriver };\n//# sourceMappingURL=local-storage-driver.provider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/drivers/local-storage-driver.provider.js\n// module id = 184\n// module chunks = 0","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AsyncCache } from './async-cache.provider';\nvar CachedHttp = (function () {\n    function CachedHttp(http, asyncCache) {\n        this.http = http;\n        this.asyncCache = asyncCache;\n    }\n    CachedHttp.prototype.get = function (url, options, asyncCacheOptions) {\n        var result$ = this.http.get(url, options);\n        var cacheKey = url;\n        if (options && options.params) {\n            cacheKey += '?' + options.params.toString();\n        }\n        return this.asyncCache.wrap(result$, cacheKey, asyncCacheOptions);\n    };\n    CachedHttp.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    CachedHttp.ctorParameters = function () { return [\n        { type: HttpClient, },\n        { type: AsyncCache, },\n    ]; };\n    return CachedHttp;\n}());\nexport { CachedHttp };\n//# sourceMappingURL=cached-http.provider.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/cached-http.provider.js\n// module id = 185\n// module chunks = 0","import { Pipe, PipeTransform } from '@angular/core';\nimport orderBy from 'lodash.orderby';\n\nexport enum OrderByDirection {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\n@Pipe({\n  name: 'mwlOrderBy'\n})\nexport class OrderBy implements PipeTransform {\n  transform(\n    input: object[],\n    field: string,\n    direction: OrderByDirection = OrderByDirection.Asc\n  ): object[] {\n    if (input && field) {\n      return orderBy(input, field, direction);\n    }\n    return input;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/order-by.pipe.ts","import { NgModule } from '@angular/core';\nimport { LocalStorageDriver } from './drivers/local-storage-driver.provider';\nimport { MemoryDriver } from './drivers/memory-driver.provider';\nimport { AsyncCacheOptions } from './async-cache-options.provider';\nimport { AsyncCache } from './async-cache.provider';\nimport { AsyncCachePipe } from './async-cache.pipe';\nimport { CachedHttp } from './cached-http.provider';\nexport function memoryDriverFactory(options) {\n    return options.driver instanceof MemoryDriver ? options.driver : new MemoryDriver();\n}\nexport function localStorageDriverFactory(options) {\n    return options.driver instanceof LocalStorageDriver ? options.driver : new LocalStorageDriver();\n}\nexport function cacheOptionFactory() {\n    return new AsyncCacheOptions();\n}\nvar AsyncCacheModule = (function () {\n    function AsyncCacheModule() {\n    }\n    AsyncCacheModule.forRoot = function (cacheOptions) {\n        if (cacheOptions === void 0) { cacheOptions = {\n            provide: AsyncCacheOptions,\n            useFactory: cacheOptionFactory\n        }; }\n        return {\n            ngModule: AsyncCacheModule,\n            providers: [{\n                    provide: LocalStorageDriver,\n                    useFactory: localStorageDriverFactory,\n                    deps: [AsyncCacheOptions]\n                }, {\n                    provide: MemoryDriver,\n                    useFactory: memoryDriverFactory,\n                    deps: [AsyncCacheOptions]\n                },\n                cacheOptions,\n                AsyncCache,\n                CachedHttp\n            ]\n        };\n    };\n    AsyncCacheModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [AsyncCachePipe],\n                    exports: [AsyncCachePipe]\n                },] },\n    ];\n    /** @nocollapse */\n    AsyncCacheModule.ctorParameters = function () { return []; };\n    return AsyncCacheModule;\n}());\nexport { AsyncCacheModule };\n//# sourceMappingURL=async-cache.module.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/async-cache.module.js\n// module id = null\n// module chunks = ","import { Pipe } from '@angular/core';\nimport { AsyncCache } from './async-cache.provider';\nvar AsyncCachePipe = (function () {\n    function AsyncCachePipe(asyncCache) {\n        this.asyncCache = asyncCache;\n    }\n    AsyncCachePipe.prototype.transform = function (value, cacheKey, options) {\n        return this.asyncCache.wrap(value, cacheKey, options);\n    };\n    AsyncCachePipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'asyncCache'\n                },] },\n    ];\n    /** @nocollapse */\n    AsyncCachePipe.ctorParameters = function () { return [\n        { type: AsyncCache, },\n    ]; };\n    return AsyncCachePipe;\n}());\nexport { AsyncCachePipe };\n//# sourceMappingURL=async-cache.pipe.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-async-cache/async-cache.pipe.js\n// module id = null\n// module chunks = ","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-confirmation-popover\";\nimport * as i2 from \"@angular/common\";\nvar ConfirmationPopoverModuleNgFactory = i0.ɵcmf(i1.ConfirmationPopoverModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [ɵeNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵa]]), i0.ɵmpd(512, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(512, i1.ConfirmationPopoverModule, i1.ConfirmationPopoverModule, [])]); });\nexport { ConfirmationPopoverModuleNgFactory as ConfirmationPopoverModuleNgFactory };\nvar styles_ɵe = [\".popover[_ngcontent-%COMP%] {\\n      display: block;\\n    }\\n    .bs-popover-top[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-bottom[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      left: 50%;\\n    }\\n    .bs-popover-left[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-right[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%] {\\n      top: 50%;\\n    }\\n    .btn[_ngcontent-%COMP%] {\\n      transition: none;\\n    }\\n    .confirm-btns[_ngcontent-%COMP%] {\\n      display: flex;\\n      justify-content: space-around;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%] {\\n      flex-basis: 50%;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child) {\\n      margin-left: 4px;\\n    }\\n    .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 4px;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%] {\\n      flex-direction: row-reverse;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child) {\\n      margin-right: 4px;\\n      margin-left: 0;\\n    }\\n    .confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child) {\\n      margin-right: 0;\\n      margin-left: 4px;\\n    }\"];\nvar RenderType_ɵe = i0.ɵcrt({ encapsulation: 0, styles: styles_ɵe, data: {} });\nexport { RenderType_ɵe as RenderType_ɵe };\nfunction View_ɵe_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, \"div\", [[\"class\", \"confirm-btn-container\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n              \"])), (_l()(), i0.ɵeld(2, 0, null, null, 2, \"button\", [[\"type\", \"button\"]], [[8, \"className\", 0], [8, \"innerHTML\", 1]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.parent.context.options.onCancel({ clickEvent: $event }) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(3, 540672, null, 0, i1.ɵg, [i0.ElementRef], { mwlFocus: [0, \"mwlFocus\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n              \"])), (_l()(), i0.ɵted(-1, null, [\"\\n            \"]))], function (_ck, _v) { var currVal_2 = (_v.parent.context.options.focusButton === \"cancel\"); _ck(_v, 3, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = (\"btn btn-block btn-\" + _v.parent.context.options.cancelButtonType); var currVal_1 = _v.parent.context.options.cancelText; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_ɵe_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, \"div\", [[\"class\", \"confirm-btn-container\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n              \"])), (_l()(), i0.ɵeld(2, 0, null, null, 2, \"button\", [[\"type\", \"button\"]], [[8, \"className\", 0], [8, \"innerHTML\", 1]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (_v.parent.context.options.onConfirm({ clickEvent: $event }) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(3, 540672, null, 0, i1.ɵg, [i0.ElementRef], { mwlFocus: [0, \"mwlFocus\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n              \"])), (_l()(), i0.ɵted(-1, null, [\"\\n            \"]))], function (_ck, _v) { var currVal_2 = (_v.parent.context.options.focusButton === \"confirm\"); _ck(_v, 3, 0, currVal_2); }, function (_ck, _v) { var currVal_0 = (\"btn btn-block btn-\" + _v.parent.context.options.confirmButtonType); var currVal_1 = _v.parent.context.options.confirmText; _ck(_v, 2, 0, currVal_0, currVal_1); }); }\nfunction View_ɵe_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(1, 0, null, null, 21, \"div\", [], null, null, null, null, null)), i0.ɵdid(2, 278528, null, 0, i2.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { ngClass: [0, \"ngClass\"] }, null), i0.ɵpad(3, 5), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(5, 0, null, null, 0, \"div\", [[\"class\", \"popover-arrow arrow\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(7, 0, null, null, 0, \"h3\", [[\"class\", \"popover-title popover-header\"]], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(9, 0, null, null, 12, \"div\", [[\"class\", \"popover-content popover-body\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(11, 0, null, null, 0, \"p\", [], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(13, 0, null, null, 7, \"div\", [[\"class\", \"confirm-btns\"]], [[2, \"confirm-btns-reversed\", null]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_ɵe_2)), i0.ɵdid(16, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_ɵe_3)), i0.ɵdid(19, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var currVal_0 = _ck(_v, 3, 0, \"popover\", _v.context.options.placement, (\"popover-\" + _v.context.options.placement), (\"bs-popover-\" + _v.context.options.placement), _v.context.options.popoverClass); _ck(_v, 2, 0, currVal_0); var currVal_4 = !_v.context.options.hideCancelButton; _ck(_v, 16, 0, currVal_4); var currVal_5 = !_v.context.options.hideConfirmButton; _ck(_v, 19, 0, currVal_5); }, function (_ck, _v) { var currVal_1 = _v.context.options.popoverTitle; _ck(_v, 7, 0, currVal_1); var currVal_2 = _v.context.options.popoverMessage; _ck(_v, 11, 0, currVal_2); var currVal_3 = _v.context.options.reverseButtonOrder; _ck(_v, 13, 0, currVal_3); }); }\nfunction View_ɵe_4(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], null, null); }\nexport function View_ɵe_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵand(0, [[\"defaultTemplate\", 2]], null, 0, null, View_ɵe_1)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_ɵe_4)), i0.ɵdid(4, 540672, null, 0, i2.NgTemplateOutlet, [i0.ViewContainerRef], { ngTemplateOutletContext: [0, \"ngTemplateOutletContext\"], ngTemplateOutlet: [1, \"ngTemplateOutlet\"] }, null), i0.ɵpod(5, { options: 0 }), (_l()(), i0.ɵted(-1, null, [\"\\n  \"]))], function (_ck, _v) { var _co = _v.component; var currVal_0 = _ck(_v, 5, 0, _co.options); var currVal_1 = (_co.options.customTemplate || i0.ɵnov(_v, 1)); _ck(_v, 4, 0, currVal_0, currVal_1); }, null); }\nexport function View_ɵe_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"mwl-confirmation-popover-window\", [], null, null, null, View_ɵe_0, RenderType_ɵe)), i0.ɵdid(1, 4243456, null, 0, i1.ɵe, [i1.ɵf], null, null)], null, null); }\nvar ɵeNgFactory = i0.ɵccf(\"mwl-confirmation-popover-window\", i1.ɵe, View_ɵe_Host_0, {}, {}, []);\nexport { ɵeNgFactory as ɵeNgFactory };\n//# sourceMappingURL=angular-confirmation-popover.ngfactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-confirmation-popover/angular-confirmation-popover.ngfactory.js\n// module id = 188\n// module chunks = 0","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ConfirmationPopoverModule } from 'angular-confirmation-popover';\nimport {\n  AsyncCacheModule,\n  LocalStorageDriver,\n  AsyncCacheOptions\n} from 'angular-async-cache';\nimport { OrderBy } from './order-by.pipe';\nimport { Replace } from './replace.pipe';\nimport { SortableHeaderComponent } from './sortable-header.directive';\nimport { LocalStorage } from './local-storage.provider';\nimport { TVMaze } from './tv-maze.provider';\nimport { ShowListComponent } from './show-list.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport function asyncCacheOptionsFactory(): AsyncCacheOptions {\n  return new AsyncCacheOptions({\n    driver: new LocalStorageDriver(),\n    fromCacheAndReplay: true\n  });\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ConfirmationPopoverModule.forRoot({\n      confirmButtonType: 'danger',\n      cancelButtonType: 'secondary'\n    }),\n    HttpClientModule,\n    AsyncCacheModule.forRoot({\n      provide: AsyncCacheOptions,\n      useFactory: asyncCacheOptionsFactory\n    }),\n    ReactiveFormsModule\n  ],\n  declarations: [OrderBy, Replace, SortableHeaderComponent, ShowListComponent],\n  exports: [\n    OrderBy,\n    Replace,\n    SortableHeaderComponent,\n    ShowListComponent,\n    CommonModule\n  ],\n  providers: [\n    // if these held any state they should be instantiated by the root module\n    LocalStorage,\n    TVMaze\n  ]\n})\nexport class SharedModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/index.ts","import { Component, Input } from '@angular/core';\nimport { OrderByDirection } from './order-by.pipe';\n\nexport interface SortableHeader {\n  field: string | null;\n  direction: OrderByDirection;\n}\n\n@Component({\n  selector: 'th[mwlSortableHeader]', // tslint:disable-line\n  template: `\n    <div (click)=\"headerClicked()\">\n      <i class=\"fa fa-sort\" [hidden]=\"sort.field === fieldName\"></i>\n      <i class=\"fa fa-sort-asc\" [hidden]=\"sort.field !== fieldName || sort.direction === OrderByDirection.Desc\"></i>\n      <i class=\"fa fa-sort-desc\" [hidden]=\"sort.field !== fieldName || sort.direction === OrderByDirection.Asc\"></i>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styles: [\n    `\n    div {\n      cursor: pointer;\n      width: 80px;\n    }\n  `\n  ]\n})\nexport class SortableHeaderComponent {\n  @Input('mwlSortableHeader') fieldName: string; // tslint:disable-line\n\n  @Input() sort: SortableHeader;\n\n  OrderByDirection = OrderByDirection;\n\n  headerClicked(): void {\n    if (this.sort.field === this.fieldName) {\n      if (this.sort.direction === OrderByDirection.Desc) {\n        this.sort.direction = OrderByDirection.Asc;\n        this.sort.field = null;\n      } else {\n        this.sort.direction = OrderByDirection.Desc;\n      }\n    } else {\n      this.sort.field = this.fieldName;\n      this.sort.direction = OrderByDirection.Asc;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/sortable-header.directive.ts","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\nimport { LocalStorage } from './local-storage.provider';\nimport { Show } from './../../interfaces';\nimport { SortableHeader } from './sortable-header.directive';\nimport { OrderByDirection } from './order-by.pipe';\nimport { FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operators/takeUntil';\nimport get from 'lodash.get';\n\nconst SUBSCRIBED_SHOWS_LS_KEY = 'subscribedShows';\n\n@Component({\n  selector: 'mwl-show-list',\n  template: `\n    <table class=\"table\" [hidden]=\"!shows || shows.length === 0\">\n      <thead>\n        <tr>\n          <th colspan=\"6\">\n            <input \n              class=\"form-control\" \n              type=\"search\" \n              placeholder=\"Filter shows...\" \n              [formControl]=\"searchTextControl\">\n          </th>\n        </tr>\n        <tr>\n          <th mwlSortableHeader=\"name\" [sort]=\"sort\">Name</th>\n          <th>Image</th>\n          <th mwlSortableHeader=\"network.name\" [sort]=\"sort\">Network</th>\n          <th>Summary</th>\n          <th mwlSortableHeader=\"status\" [sort]=\"sort\">Status</th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let show of filteredShowsList | mwlOrderBy:sort.field:sort.direction\" [hidden]=\"!show.image?.medium\">\n          <td>{{ show.name }}</td>\n          <td>\n            <img [src]=\"show.image?.medium | mwlReplace:'http://':'https://'\" width=\"60\">\n          </td>\n          <td>{{ show.network?.name }}</td>\n          <td [innerHtml]=\"show.summary\"></td>\n          <td>\n            <span\n              class=\"badge\"\n              [class.badge-success]=\"show.status === 'Running'\"\n              [class.badge-danger]=\"show.status !== 'Running'\">\n               {{ show.status }}\n             </span>\n          </td>\n          <td style=\"width: 270px\">\n            <button class=\"btn btn-success\" (click)=\"subscribeToShow(show)\" [hidden]=\"show.isSubscribed\">\n              Subscribe\n            </button>\n            <button\n              class=\"btn btn-danger\"\n              [hidden]=\"!show.isSubscribed\"\n              mwlConfirmationPopover\n              popoverTitle=\"Unsubscribe\"\n              popoverMessage=\"Are you sure you would like to unsubscribe from this show?\"\n              (confirm)=\"unsubscribeFromShow(show)\">\n              Unsubscribe\n            </button>\n            <button class=\"btn btn-info\" [routerLink]=\"['/episodes', show.id]\">\n              Episodes\n            </button>\n          </td>\n        </tr>\n      </tbody>\n      <tfoot *ngIf=\"filteredShowsList.length === 0 && searchTextControl.value\">\n        <tr>\n          <th colspan=\"6\">\n            <div class=\"alert alert-info\">No shows were found for your search</div>\n          </th>\n        </tr>\n      </tfoot>\n    </table>\n  `\n})\nexport class ShowListComponent implements OnChanges, OnDestroy, OnInit {\n  @Input() shows: Show[];\n\n  @Output() unsubscribe = new EventEmitter<Show>();\n\n  filteredShowsList: Show[] = [];\n\n  sort: SortableHeader = {\n    field: null,\n    direction: OrderByDirection.Asc\n  };\n\n  searchTextControl = new FormControl('');\n\n  destroy$ = new Subject();\n\n  constructor(private localStorage: LocalStorage) {}\n\n  ngOnInit() {\n    this.searchTextControl.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.updateFilteredShowsList());\n  }\n\n  ngOnChanges(changeRecord: SimpleChanges): void {\n    if (changeRecord.shows && this.shows) {\n      this.updateFilteredShowsList();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n  }\n\n  subscribeToShow(show: Show): void {\n    this.setSubscribedShows([...this.getSubscribedShows(), show]);\n  }\n\n  unsubscribeFromShow(show: Show): void {\n    this.setSubscribedShows(\n      this.getSubscribedShows().filter(iShow => iShow.id !== show.id)\n    );\n    this.unsubscribe.emit(show);\n  }\n\n  private getSubscribedShows(): Show[] {\n    return this.localStorage.getItem(SUBSCRIBED_SHOWS_LS_KEY, []);\n  }\n\n  private setSubscribedShows(shows: Show[]) {\n    this.localStorage.setItem(SUBSCRIBED_SHOWS_LS_KEY, shows);\n    this.updateFilteredShowsList();\n  }\n\n  private updateFilteredShowsList() {\n    const subscribedShows = this.getSubscribedShows();\n\n    const filterByFields = ['name', 'network.name', 'summary'];\n\n    this.filteredShowsList = this.shows\n      .map(show => {\n        const isSubscribed = subscribedShows.some(\n          iShow => iShow.id === show.id\n        );\n        return { ...show, isSubscribed };\n      })\n      .filter(show => {\n        if (!this.searchTextControl.value) {\n          return true;\n        } else {\n          return filterByFields.some(field => {\n            const fieldValue = get(show, field);\n            return (\n              fieldValue &&\n              fieldValue\n                .toLowerCase()\n                .includes(this.searchTextControl.value.toLowerCase())\n            );\n          });\n        }\n      });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/show-list.component.ts","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operators/takeUntil.js\n// module id = 194\n// module chunks = 0","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-confirmation-popover\";\nimport * as i2 from \"positioning/dist/positioning\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./order-by.pipe\";\nimport * as i5 from \"./replace.pipe\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"./sortable-header.directive.ngfactory\";\nimport * as i8 from \"./sortable-header.directive\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"./show-list.component\";\nimport * as i11 from \"./local-storage.provider\";\nvar styles_ShowListComponent = [];\nvar RenderType_ShowListComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_ShowListComponent, data: {} });\nexport { RenderType_ShowListComponent as RenderType_ShowListComponent };\nfunction View_ShowListComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 36, \"tr\", [], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(2, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(3, null, [\"\", \"\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(5, 0, null, null, 4, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(7, 0, null, null, 1, \"img\", [[\"width\", \"60\"]], [[8, \"src\", 4]], null, null, null, null)), i0.ɵppd(8, 3), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(11, 0, null, null, 1, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(12, null, [\"\", \"\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(14, 0, null, null, 0, \"td\", [], [[8, \"innerHTML\", 1]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(16, 0, null, null, 4, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(18, 0, null, null, 1, \"span\", [[\"class\", \"badge\"]], [[2, \"badge-success\", null], [2, \"badge-danger\", null]], null, null, null, null)), (_l()(), i0.ɵted(19, null, [\"\\n               \", \"\\n             \"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(22, 0, null, null, 13, \"td\", [[\"style\", \"width: 270px\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(24, 0, null, null, 1, \"button\", [[\"class\", \"btn btn-success\"]], [[8, \"hidden\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.subscribeToShow(_v.context.$implicit) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n              Subscribe\\n            \"])), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(27, 16777216, null, null, 2, \"button\", [[\"class\", \"btn btn-danger\"], [\"mwlConfirmationPopover\", \"\"], [\"popoverMessage\", \"Are you sure you would like to unsubscribe from this show?\"], [\"popoverTitle\", \"Unsubscribe\"]], [[8, \"hidden\", 0]], [[null, \"confirm\"], [null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 28).togglePopover() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"confirm\" === en)) {\n        var pd_1 = (_co.unsubscribeFromShow(_v.context.$implicit) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), i0.ɵdid(28, 737280, null, 0, i1.ɵc, [i0.ViewContainerRef, i0.ElementRef, i1.ɵd, i0.ComponentFactoryResolver, i2.Positioning, i0.Renderer2], { popoverTitle: [0, \"popoverTitle\"], popoverMessage: [1, \"popoverMessage\"] }, { confirm: \"confirm\" }), (_l()(), i0.ɵted(-1, null, [\"\\n              Unsubscribe\\n            \"])), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(31, 0, null, null, 3, \"button\", [[\"class\", \"btn btn-info\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 32).onClick() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), i0.ɵdid(32, 16384, null, 0, i3.RouterLink, [i3.Router, i3.ActivatedRoute, [8, null], i0.Renderer2, i0.ElementRef], { routerLink: [0, \"routerLink\"] }, null), i0.ɵpad(33, 2), (_l()(), i0.ɵted(-1, null, [\"\\n              Episodes\\n            \"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n        \"]))], function (_ck, _v) { var currVal_10 = \"Unsubscribe\"; var currVal_11 = \"Are you sure you would like to unsubscribe from this show?\"; _ck(_v, 28, 0, currVal_10, currVal_11); var currVal_12 = _ck(_v, 33, 0, \"/episodes\", _v.context.$implicit.id); _ck(_v, 32, 0, currVal_12); }, function (_ck, _v) { var currVal_0 = !((_v.context.$implicit.image == null) ? null : _v.context.$implicit.image.medium); _ck(_v, 0, 0, currVal_0); var currVal_1 = _v.context.$implicit.name; _ck(_v, 3, 0, currVal_1); var currVal_2 = i0.ɵunv(_v, 7, 0, _ck(_v, 8, 0, i0.ɵnov(_v.parent, 1), ((_v.context.$implicit.image == null) ? null : _v.context.$implicit.image.medium), \"http://\", \"https://\")); _ck(_v, 7, 0, currVal_2); var currVal_3 = ((_v.context.$implicit.network == null) ? null : _v.context.$implicit.network.name); _ck(_v, 12, 0, currVal_3); var currVal_4 = _v.context.$implicit.summary; _ck(_v, 14, 0, currVal_4); var currVal_5 = (_v.context.$implicit.status === \"Running\"); var currVal_6 = (_v.context.$implicit.status !== \"Running\"); _ck(_v, 18, 0, currVal_5, currVal_6); var currVal_7 = _v.context.$implicit.status; _ck(_v, 19, 0, currVal_7); var currVal_8 = _v.context.$implicit.isSubscribed; _ck(_v, 24, 0, currVal_8); var currVal_9 = !_v.context.$implicit.isSubscribed; _ck(_v, 27, 0, currVal_9); }); }\nfunction View_ShowListComponent_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 10, \"tfoot\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(2, 0, null, null, 7, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(4, 0, null, null, 4, \"th\", [[\"colspan\", \"6\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(6, 0, null, null, 1, \"div\", [[\"class\", \"alert alert-info\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"No shows were found for your search\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"]))], null, null); }\nexport function View_ShowListComponent_0(_l) { return i0.ɵvid(0, [i0.ɵpid(0, i4.OrderBy, []), i0.ɵpid(0, i5.Replace, []), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵeld(3, 0, null, null, 50, \"table\", [[\"class\", \"table\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(5, 0, null, null, 37, \"thead\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(7, 0, null, null, 11, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(9, 0, null, null, 8, \"th\", [[\"colspan\", \"6\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n            \"])), (_l()(), i0.ɵeld(11, 0, null, null, 5, \"input\", [[\"class\", \"form-control\"], [\"placeholder\", \"Filter shows...\"], [\"type\", \"search\"]], [[2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null]], [[null, \"input\"], [null, \"blur\"], [null, \"compositionstart\"], [null, \"compositionend\"]], function (_v, en, $event) { var ad = true; if ((\"input\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 12)._handleInput($event.target.value) !== false);\n        ad = (pd_0 && ad);\n    } if ((\"blur\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 12).onTouched() !== false);\n        ad = (pd_1 && ad);\n    } if ((\"compositionstart\" === en)) {\n        var pd_2 = (i0.ɵnov(_v, 12)._compositionStart() !== false);\n        ad = (pd_2 && ad);\n    } if ((\"compositionend\" === en)) {\n        var pd_3 = (i0.ɵnov(_v, 12)._compositionEnd($event.target.value) !== false);\n        ad = (pd_3 && ad);\n    } return ad; }, null, null)), i0.ɵdid(12, 16384, null, 0, i6.DefaultValueAccessor, [i0.Renderer2, i0.ElementRef, [2, i6.COMPOSITION_BUFFER_MODE]], null, null), i0.ɵprd(1024, null, i6.NG_VALUE_ACCESSOR, function (p0_0) { return [p0_0]; }, [i6.DefaultValueAccessor]), i0.ɵdid(14, 540672, null, 0, i6.FormControlDirective, [[8, null], [8, null], [2, i6.NG_VALUE_ACCESSOR]], { form: [0, \"form\"] }, null), i0.ɵprd(2048, null, i6.NgControl, null, [i6.FormControlDirective]), i0.ɵdid(16, 16384, null, 0, i6.NgControlStatus, [i6.NgControl], null, null), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(20, 0, null, null, 21, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(22, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"name\"]], null, null, null, i7.View_SortableHeaderComponent_0, i7.RenderType_SortableHeaderComponent)), i0.ɵdid(23, 49152, null, 0, i8.SortableHeaderComponent, [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), i0.ɵted(-1, 0, [\"Name\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(26, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Image\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(29, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"network.name\"]], null, null, null, i7.View_SortableHeaderComponent_0, i7.RenderType_SortableHeaderComponent)), i0.ɵdid(30, 49152, null, 0, i8.SortableHeaderComponent, [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), i0.ɵted(-1, 0, [\"Network\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(33, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Summary\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(36, 0, null, null, 2, \"th\", [[\"mwlSortableHeader\", \"status\"]], null, null, null, i7.View_SortableHeaderComponent_0, i7.RenderType_SortableHeaderComponent)), i0.ɵdid(37, 49152, null, 0, i8.SortableHeaderComponent, [], { fieldName: [0, \"fieldName\"], sort: [1, \"sort\"] }, null), (_l()(), i0.ɵted(-1, 0, [\"Status\"])), (_l()(), i0.ɵted(-1, null, [\"\\n          \"])), (_l()(), i0.ɵeld(40, 0, null, null, 0, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(44, 0, null, null, 5, \"tbody\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵand(16777216, null, null, 2, null, View_ShowListComponent_1)), i0.ɵdid(47, 802816, null, 0, i9.NgForOf, [i0.ViewContainerRef, i0.TemplateRef, i0.IterableDiffers], { ngForOf: [0, \"ngForOf\"] }, null), i0.ɵppd(48, 3), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_ShowListComponent_2)), i0.ɵdid(52, 16384, null, 0, i9.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵted(-1, null, [\"\\n  \"]))], function (_ck, _v) { var _co = _v.component; var currVal_8 = _co.searchTextControl; _ck(_v, 14, 0, currVal_8); var currVal_9 = \"name\"; var currVal_10 = _co.sort; _ck(_v, 23, 0, currVal_9, currVal_10); var currVal_11 = \"network.name\"; var currVal_12 = _co.sort; _ck(_v, 30, 0, currVal_11, currVal_12); var currVal_13 = \"status\"; var currVal_14 = _co.sort; _ck(_v, 37, 0, currVal_13, currVal_14); var currVal_15 = i0.ɵunv(_v, 47, 0, _ck(_v, 48, 0, i0.ɵnov(_v, 0), _co.filteredShowsList, _co.sort.field, _co.sort.direction)); _ck(_v, 47, 0, currVal_15); var currVal_16 = ((_co.filteredShowsList.length === 0) && _co.searchTextControl.value); _ck(_v, 52, 0, currVal_16); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = (!_co.shows || (_co.shows.length === 0)); _ck(_v, 3, 0, currVal_0); var currVal_1 = i0.ɵnov(_v, 16).ngClassUntouched; var currVal_2 = i0.ɵnov(_v, 16).ngClassTouched; var currVal_3 = i0.ɵnov(_v, 16).ngClassPristine; var currVal_4 = i0.ɵnov(_v, 16).ngClassDirty; var currVal_5 = i0.ɵnov(_v, 16).ngClassValid; var currVal_6 = i0.ɵnov(_v, 16).ngClassInvalid; var currVal_7 = i0.ɵnov(_v, 16).ngClassPending; _ck(_v, 11, 0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7); }); }\nexport function View_ShowListComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"mwl-show-list\", [], null, null, null, View_ShowListComponent_0, RenderType_ShowListComponent)), i0.ɵdid(1, 770048, null, 0, i10.ShowListComponent, [i11.LocalStorage], null, null)], function (_ck, _v) { _ck(_v, 1, 0); }, null); }\nvar ShowListComponentNgFactory = i0.ɵccf(\"mwl-show-list\", i10.ShowListComponent, View_ShowListComponent_Host_0, { shows: \"shows\" }, { unsubscribe: \"unsubscribe\" }, []);\nexport { ShowListComponentNgFactory as ShowListComponentNgFactory };\n//# sourceMappingURL=show-list.component.ngfactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/shared/show-list.component.ngfactory.js\n// module id = null\n// module chunks = ","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'mwlReplace'\n})\nexport class Replace implements PipeTransform {\n  transform(\n    input: string = '',\n    find: string = '',\n    replaceWith: string = ''\n  ): string {\n    return input.replace(find, replaceWith);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/modules/shared/replace.pipe.ts","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 200\n// module chunks = 0","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/forkJoin.js\n// module id = 201\n// module chunks = 0","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./sortable-header.directive\";\nvar styles_SortableHeaderComponent = [\"div[_ngcontent-%COMP%] {\\n      cursor: pointer;\\n      width: 80px;\\n    }\"];\nvar RenderType_SortableHeaderComponent = i0.ɵcrt({ encapsulation: 0, styles: styles_SortableHeaderComponent, data: {} });\nexport { RenderType_SortableHeaderComponent as RenderType_SortableHeaderComponent };\nexport function View_SortableHeaderComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵeld(1, 0, null, null, 9, \"div\", [], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.headerClicked() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(3, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(5, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort-asc\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(7, 0, null, null, 0, \"i\", [[\"class\", \"fa fa-sort-desc\"]], [[8, \"hidden\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), i0.ɵncd(null, 0), (_l()(), i0.ɵted(-1, null, [\"\\n    \"])), (_l()(), i0.ɵted(-1, null, [\"\\n  \"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.sort.field === _co.fieldName); _ck(_v, 3, 0, currVal_0); var currVal_1 = ((_co.sort.field !== _co.fieldName) || (_co.sort.direction === _co.OrderByDirection.Desc)); _ck(_v, 5, 0, currVal_1); var currVal_2 = ((_co.sort.field !== _co.fieldName) || (_co.sort.direction === _co.OrderByDirection.Asc)); _ck(_v, 7, 0, currVal_2); }); }\nexport function View_SortableHeaderComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"th\", [[\"mwlSortableHeader\", \"\"]], null, null, null, View_SortableHeaderComponent_0, RenderType_SortableHeaderComponent)), i0.ɵdid(1, 49152, null, 0, i1.SortableHeaderComponent, [], { fieldName: [0, \"fieldName\"] }, null)], function (_ck, _v) { var currVal_0 = \"\"; _ck(_v, 1, 0, currVal_0); }, null); }\nvar SortableHeaderComponentNgFactory = i0.ɵccf(\"th[mwlSortableHeader]\", i1.SortableHeaderComponent, View_SortableHeaderComponent_Host_0, { fieldName: \"mwlSortableHeader\", sort: \"sort\" }, {}, [\"*\"]);\nexport { SortableHeaderComponentNgFactory as SortableHeaderComponentNgFactory };\n//# sourceMappingURL=sortable-header.directive.ngfactory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/modules/shared/sortable-header.directive.ngfactory.js\n// module id = 202\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for comparison styles. */\nvar UNORDERED_COMPARE_FLAG = 1,\n    PARTIAL_COMPARE_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {boolean} [bitmask] The bitmask of comparison flags.\n *  The bitmask may be composed of the following flags:\n *     1 - Unordered comparison\n *     2 - Partial comparison\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, customizer, bitmask, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = getTag(object);\n    objTag = objTag == argsTag ? objectTag : objTag;\n  }\n  if (!othIsArr) {\n    othTag = getTag(other);\n    othTag = othTag == argsTag ? objectTag : othTag;\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)\n      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n  }\n  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n}\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n  };\n}\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!seen.has(othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n              return seen.add(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, customizer, bitmask, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= UNORDERED_COMPARE_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} customizer The function to customize comparisons.\n * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n *  for more details.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n      objProps = keys(object),\n      objLength = objProps.length,\n      othProps = keys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var result,\n      index = -1,\n      length = path.length;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result) {\n    return result;\n  }\n  var length = object ? object.length : 0;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = orderBy;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash.orderby/index.js\n// module id = 218\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/observable/ForkJoinObservable.js\n// module id = 219\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash.get/index.js\n// module id = 220\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/fromPromise.js\n// module id = 221\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/of.js\n// module id = 222\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/merge.js\n// module id = 223\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 224\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/mergeMap.js\n// module id = 225\n// module chunks = 0","module.exports = require('./lib/index');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/symbol-observable/index.js\n// module id = 226\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar root = undefined; /* global window */\n\nif (typeof global !== 'undefined') {\n\troot = global;\n} else if (typeof window !== 'undefined') {\n\troot = window;\n}\n\nvar result = (0, _ponyfill2.default)(root);\nexports.default = result;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/symbol-observable/lib/index.js\n// module id = 227\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/symbol-observable/lib/ponyfill.js\n// module id = 228\n// module chunks = 0"],"sourceRoot":""}